"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgUpdateParamsResponse = exports.MsgUpdateParams = exports.MsgClaimResponse = exports.MsgClaim = exports.protobufPackage = void 0;
/* eslint-disable */
const oracle_1 = require("./oracle");
const helpers_1 = require("../../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "cosmos.oracle.v1";
function createBaseMsgClaim() {
    return {
        fromAddress: "",
        srcChainId: 0,
        destChainId: 0,
        sequence: helpers_1.Long.UZERO,
        timestamp: helpers_1.Long.UZERO,
        payload: new Uint8Array(),
        voteAddressSet: [],
        aggSignature: new Uint8Array()
    };
}
exports.MsgClaim = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.fromAddress !== "") {
            writer.uint32(10).string(message.fromAddress);
        }
        if (message.srcChainId !== 0) {
            writer.uint32(16).uint32(message.srcChainId);
        }
        if (message.destChainId !== 0) {
            writer.uint32(24).uint32(message.destChainId);
        }
        if (!message.sequence.isZero()) {
            writer.uint32(32).uint64(message.sequence);
        }
        if (!message.timestamp.isZero()) {
            writer.uint32(40).uint64(message.timestamp);
        }
        if (message.payload.length !== 0) {
            writer.uint32(50).bytes(message.payload);
        }
        writer.uint32(58).fork();
        for (const v of message.voteAddressSet) {
            writer.fixed64(v);
        }
        writer.ldelim();
        if (message.aggSignature.length !== 0) {
            writer.uint32(66).bytes(message.aggSignature);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgClaim();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fromAddress = reader.string();
                    break;
                case 2:
                    message.srcChainId = reader.uint32();
                    break;
                case 3:
                    message.destChainId = reader.uint32();
                    break;
                case 4:
                    message.sequence = reader.uint64();
                    break;
                case 5:
                    message.timestamp = reader.uint64();
                    break;
                case 6:
                    message.payload = reader.bytes();
                    break;
                case 7:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.voteAddressSet.push(reader.fixed64());
                        }
                    }
                    else {
                        message.voteAddressSet.push(reader.fixed64());
                    }
                    break;
                case 8:
                    message.aggSignature = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            fromAddress: (0, helpers_1.isSet)(object.fromAddress) ? String(object.fromAddress) : "",
            srcChainId: (0, helpers_1.isSet)(object.srcChainId) ? Number(object.srcChainId) : 0,
            destChainId: (0, helpers_1.isSet)(object.destChainId) ? Number(object.destChainId) : 0,
            sequence: (0, helpers_1.isSet)(object.sequence) ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO,
            timestamp: (0, helpers_1.isSet)(object.timestamp) ? helpers_1.Long.fromValue(object.timestamp) : helpers_1.Long.UZERO,
            payload: (0, helpers_1.isSet)(object.payload) ? (0, helpers_1.bytesFromBase64)(object.payload) : new Uint8Array(),
            voteAddressSet: Array.isArray(object?.voteAddressSet) ? object.voteAddressSet.map((e) => helpers_1.Long.fromValue(e)) : [],
            aggSignature: (0, helpers_1.isSet)(object.aggSignature) ? (0, helpers_1.bytesFromBase64)(object.aggSignature) : new Uint8Array()
        };
    },
    toJSON(message) {
        const obj = {};
        message.fromAddress !== undefined && (obj.fromAddress = message.fromAddress);
        message.srcChainId !== undefined && (obj.srcChainId = Math.round(message.srcChainId));
        message.destChainId !== undefined && (obj.destChainId = Math.round(message.destChainId));
        message.sequence !== undefined && (obj.sequence = (message.sequence || helpers_1.Long.UZERO).toString());
        message.timestamp !== undefined && (obj.timestamp = (message.timestamp || helpers_1.Long.UZERO).toString());
        message.payload !== undefined && (obj.payload = (0, helpers_1.base64FromBytes)(message.payload !== undefined ? message.payload : new Uint8Array()));
        if (message.voteAddressSet) {
            obj.voteAddressSet = message.voteAddressSet.map(e => (e || helpers_1.Long.ZERO).toString());
        }
        else {
            obj.voteAddressSet = [];
        }
        message.aggSignature !== undefined && (obj.aggSignature = (0, helpers_1.base64FromBytes)(message.aggSignature !== undefined ? message.aggSignature : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgClaim();
        message.fromAddress = object.fromAddress ?? "";
        message.srcChainId = object.srcChainId ?? 0;
        message.destChainId = object.destChainId ?? 0;
        message.sequence = object.sequence !== undefined && object.sequence !== null ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO;
        message.timestamp = object.timestamp !== undefined && object.timestamp !== null ? helpers_1.Long.fromValue(object.timestamp) : helpers_1.Long.UZERO;
        message.payload = object.payload ?? new Uint8Array();
        message.voteAddressSet = object.voteAddressSet?.map(e => helpers_1.Long.fromValue(e)) || [];
        message.aggSignature = object.aggSignature ?? new Uint8Array();
        return message;
    },
    fromSDK(object) {
        return {
            fromAddress: object?.from_address,
            srcChainId: object?.src_chain_id,
            destChainId: object?.dest_chain_id,
            sequence: object?.sequence,
            timestamp: object?.timestamp,
            payload: object?.payload,
            voteAddressSet: Array.isArray(object?.vote_address_set) ? object.vote_address_set.map((e) => e) : [],
            aggSignature: object?.agg_signature
        };
    },
    toSDK(message) {
        const obj = {};
        obj.from_address = message.fromAddress;
        obj.src_chain_id = message.srcChainId;
        obj.dest_chain_id = message.destChainId;
        obj.sequence = message.sequence;
        obj.timestamp = message.timestamp;
        obj.payload = message.payload;
        if (message.voteAddressSet) {
            obj.vote_address_set = message.voteAddressSet.map(e => e);
        }
        else {
            obj.vote_address_set = [];
        }
        obj.agg_signature = message.aggSignature;
        return obj;
    }
};
function createBaseMsgClaimResponse() {
    return {};
}
exports.MsgClaimResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgClaimResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgClaimResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgUpdateParams() {
    return {
        authority: "",
        params: undefined
    };
}
exports.MsgUpdateParams = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.params !== undefined) {
            oracle_1.Params.encode(message.params, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.authority = reader.string();
                    break;
                case 2:
                    message.params = oracle_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: (0, helpers_1.isSet)(object.authority) ? String(object.authority) : "",
            params: (0, helpers_1.isSet)(object.params) ? oracle_1.Params.fromJSON(object.params) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.authority !== undefined && (obj.authority = message.authority);
        message.params !== undefined && (obj.params = message.params ? oracle_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateParams();
        message.authority = object.authority ?? "";
        message.params = object.params !== undefined && object.params !== null ? oracle_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            authority: object?.authority,
            params: object.params ? oracle_1.Params.fromSDK(object.params) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        obj.authority = message.authority;
        message.params !== undefined && (obj.params = message.params ? oracle_1.Params.toSDK(message.params) : undefined);
        return obj;
    }
};
function createBaseMsgUpdateParamsResponse() {
    return {};
}
exports.MsgUpdateParamsResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateParamsResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
class MsgClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Claim = this.Claim.bind(this);
        this.UpdateParams = this.UpdateParams.bind(this);
    }
    Claim(request) {
        const data = exports.MsgClaim.encode(request).finish();
        const promise = this.rpc.request("cosmos.oracle.v1.Msg", "Claim", data);
        return promise.then(data => exports.MsgClaimResponse.decode(new _m0.Reader(data)));
    }
    UpdateParams(request) {
        const data = exports.MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request("cosmos.oracle.v1.Msg", "UpdateParams", data);
        return promise.then(data => exports.MsgUpdateParamsResponse.decode(new _m0.Reader(data)));
    }
}
exports.MsgClientImpl = MsgClientImpl;
//# sourceMappingURL=tx.js.map