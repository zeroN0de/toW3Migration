"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StoreKeyConfig = exports.Module = exports.protobufPackage = void 0;
/* eslint-disable */
const _m0 = __importStar(require("protobufjs/minimal"));
const helpers_1 = require("../../../../helpers");
exports.protobufPackage = "cosmos.app.runtime.v1alpha1";
function createBaseModule() {
    return {
        appName: "",
        beginBlockers: [],
        endBlockers: [],
        initGenesis: [],
        exportGenesis: [],
        overrideStoreKeys: [],
        orderMigrations: []
    };
}
exports.Module = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.appName !== "") {
            writer.uint32(10).string(message.appName);
        }
        for (const v of message.beginBlockers) {
            writer.uint32(18).string(v);
        }
        for (const v of message.endBlockers) {
            writer.uint32(26).string(v);
        }
        for (const v of message.initGenesis) {
            writer.uint32(34).string(v);
        }
        for (const v of message.exportGenesis) {
            writer.uint32(42).string(v);
        }
        for (const v of message.overrideStoreKeys) {
            exports.StoreKeyConfig.encode(v, writer.uint32(50).fork()).ldelim();
        }
        for (const v of message.orderMigrations) {
            writer.uint32(58).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModule();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.appName = reader.string();
                    break;
                case 2:
                    message.beginBlockers.push(reader.string());
                    break;
                case 3:
                    message.endBlockers.push(reader.string());
                    break;
                case 4:
                    message.initGenesis.push(reader.string());
                    break;
                case 5:
                    message.exportGenesis.push(reader.string());
                    break;
                case 6:
                    message.overrideStoreKeys.push(exports.StoreKeyConfig.decode(reader, reader.uint32()));
                    break;
                case 7:
                    message.orderMigrations.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            appName: (0, helpers_1.isSet)(object.appName) ? String(object.appName) : "",
            beginBlockers: Array.isArray(object?.beginBlockers) ? object.beginBlockers.map((e) => String(e)) : [],
            endBlockers: Array.isArray(object?.endBlockers) ? object.endBlockers.map((e) => String(e)) : [],
            initGenesis: Array.isArray(object?.initGenesis) ? object.initGenesis.map((e) => String(e)) : [],
            exportGenesis: Array.isArray(object?.exportGenesis) ? object.exportGenesis.map((e) => String(e)) : [],
            overrideStoreKeys: Array.isArray(object?.overrideStoreKeys) ? object.overrideStoreKeys.map((e) => exports.StoreKeyConfig.fromJSON(e)) : [],
            orderMigrations: Array.isArray(object?.orderMigrations) ? object.orderMigrations.map((e) => String(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.appName !== undefined && (obj.appName = message.appName);
        if (message.beginBlockers) {
            obj.beginBlockers = message.beginBlockers.map(e => e);
        }
        else {
            obj.beginBlockers = [];
        }
        if (message.endBlockers) {
            obj.endBlockers = message.endBlockers.map(e => e);
        }
        else {
            obj.endBlockers = [];
        }
        if (message.initGenesis) {
            obj.initGenesis = message.initGenesis.map(e => e);
        }
        else {
            obj.initGenesis = [];
        }
        if (message.exportGenesis) {
            obj.exportGenesis = message.exportGenesis.map(e => e);
        }
        else {
            obj.exportGenesis = [];
        }
        if (message.overrideStoreKeys) {
            obj.overrideStoreKeys = message.overrideStoreKeys.map(e => e ? exports.StoreKeyConfig.toJSON(e) : undefined);
        }
        else {
            obj.overrideStoreKeys = [];
        }
        if (message.orderMigrations) {
            obj.orderMigrations = message.orderMigrations.map(e => e);
        }
        else {
            obj.orderMigrations = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseModule();
        message.appName = object.appName ?? "";
        message.beginBlockers = object.beginBlockers?.map(e => e) || [];
        message.endBlockers = object.endBlockers?.map(e => e) || [];
        message.initGenesis = object.initGenesis?.map(e => e) || [];
        message.exportGenesis = object.exportGenesis?.map(e => e) || [];
        message.overrideStoreKeys = object.overrideStoreKeys?.map(e => exports.StoreKeyConfig.fromPartial(e)) || [];
        message.orderMigrations = object.orderMigrations?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            appName: object?.app_name,
            beginBlockers: Array.isArray(object?.begin_blockers) ? object.begin_blockers.map((e) => e) : [],
            endBlockers: Array.isArray(object?.end_blockers) ? object.end_blockers.map((e) => e) : [],
            initGenesis: Array.isArray(object?.init_genesis) ? object.init_genesis.map((e) => e) : [],
            exportGenesis: Array.isArray(object?.export_genesis) ? object.export_genesis.map((e) => e) : [],
            overrideStoreKeys: Array.isArray(object?.override_store_keys) ? object.override_store_keys.map((e) => exports.StoreKeyConfig.fromSDK(e)) : [],
            orderMigrations: Array.isArray(object?.order_migrations) ? object.order_migrations.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.app_name = message.appName;
        if (message.beginBlockers) {
            obj.begin_blockers = message.beginBlockers.map(e => e);
        }
        else {
            obj.begin_blockers = [];
        }
        if (message.endBlockers) {
            obj.end_blockers = message.endBlockers.map(e => e);
        }
        else {
            obj.end_blockers = [];
        }
        if (message.initGenesis) {
            obj.init_genesis = message.initGenesis.map(e => e);
        }
        else {
            obj.init_genesis = [];
        }
        if (message.exportGenesis) {
            obj.export_genesis = message.exportGenesis.map(e => e);
        }
        else {
            obj.export_genesis = [];
        }
        if (message.overrideStoreKeys) {
            obj.override_store_keys = message.overrideStoreKeys.map(e => e ? exports.StoreKeyConfig.toSDK(e) : undefined);
        }
        else {
            obj.override_store_keys = [];
        }
        if (message.orderMigrations) {
            obj.order_migrations = message.orderMigrations.map(e => e);
        }
        else {
            obj.order_migrations = [];
        }
        return obj;
    }
};
function createBaseStoreKeyConfig() {
    return {
        moduleName: "",
        kvStoreKey: ""
    };
}
exports.StoreKeyConfig = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.moduleName !== "") {
            writer.uint32(10).string(message.moduleName);
        }
        if (message.kvStoreKey !== "") {
            writer.uint32(18).string(message.kvStoreKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStoreKeyConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.moduleName = reader.string();
                    break;
                case 2:
                    message.kvStoreKey = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            moduleName: (0, helpers_1.isSet)(object.moduleName) ? String(object.moduleName) : "",
            kvStoreKey: (0, helpers_1.isSet)(object.kvStoreKey) ? String(object.kvStoreKey) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.moduleName !== undefined && (obj.moduleName = message.moduleName);
        message.kvStoreKey !== undefined && (obj.kvStoreKey = message.kvStoreKey);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseStoreKeyConfig();
        message.moduleName = object.moduleName ?? "";
        message.kvStoreKey = object.kvStoreKey ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            moduleName: object?.module_name,
            kvStoreKey: object?.kv_store_key
        };
    },
    toSDK(message) {
        const obj = {};
        obj.module_name = message.moduleName;
        obj.kv_store_key = message.kvStoreKey;
        return obj;
    }
};
//# sourceMappingURL=module.js.map