/// <reference types="long" />
import { Params, ParamsSDKType } from "./crosschain";
import * as _m0 from "protobufjs/minimal";
import { Long, Rpc } from "../../../helpers";
export declare const protobufPackage = "cosmos.crosschain.v1";
/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}
/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequestSDKType {
}
/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
    /** params defines the parameters of the module. */
    params?: Params;
}
/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponseSDKType {
    params?: ParamsSDKType;
}
/** QueryCrossChainPackageRequest is the request type for the Query/CrossChainPackage RPC method. */
export interface QueryCrossChainPackageRequest {
    /** channel id of the cross chain package */
    channelId: number;
    /** sequence of the cross chain package */
    sequence: Long;
}
/** QueryCrossChainPackageRequest is the request type for the Query/CrossChainPackage RPC method. */
export interface QueryCrossChainPackageRequestSDKType {
    channel_id: number;
    sequence: Long;
}
/** QueryCrossChainPackageResponse is the response type for the Query/CrossChainPackage RPC method. */
export interface QueryCrossChainPackageResponse {
    /** content of the cross chain package */
    package: Uint8Array;
}
/** QueryCrossChainPackageResponse is the response type for the Query/CrossChainPackage RPC method. */
export interface QueryCrossChainPackageResponseSDKType {
    package: Uint8Array;
}
/** QuerySendSequenceRequest is the request type for the Query/SendSequence RPC method. */
export interface QuerySendSequenceRequest {
    /** channel id of the cross chain package */
    channelId: number;
}
/** QuerySendSequenceRequest is the request type for the Query/SendSequence RPC method. */
export interface QuerySendSequenceRequestSDKType {
    channel_id: number;
}
/** QuerySendSequenceResponse is the response type for the Query/SendSequence RPC method. */
export interface QuerySendSequenceResponse {
    /** sequence of the cross chain package */
    sequence: Long;
}
/** QuerySendSequenceResponse is the response type for the Query/SendSequence RPC method. */
export interface QuerySendSequenceResponseSDKType {
    sequence: Long;
}
/** QuerySendSequenceRequest is the request type for the Query/ReceiveSequence RPC method. */
export interface QueryReceiveSequenceRequest {
    /** channel id of the cross chain package */
    channelId: number;
}
/** QuerySendSequenceRequest is the request type for the Query/ReceiveSequence RPC method. */
export interface QueryReceiveSequenceRequestSDKType {
    channel_id: number;
}
/** QuerySendSequenceResponse is the response type for the Query/ReceiveSequence RPC method. */
export interface QueryReceiveSequenceResponse {
    /** sequence of the cross chain package */
    sequence: Long;
}
/** QuerySendSequenceResponse is the response type for the Query/ReceiveSequence RPC method. */
export interface QueryReceiveSequenceResponseSDKType {
    sequence: Long;
}
export declare const QueryParamsRequest: {
    encode(_: QueryParamsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsRequest;
    fromJSON(_: any): QueryParamsRequest;
    toJSON(_: QueryParamsRequest): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): QueryParamsRequest;
    fromSDK(_: QueryParamsRequestSDKType): QueryParamsRequest;
    toSDK(_: QueryParamsRequest): QueryParamsRequestSDKType;
};
export declare const QueryParamsResponse: {
    encode(message: QueryParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsResponse;
    fromJSON(object: any): QueryParamsResponse;
    toJSON(message: QueryParamsResponse): unknown;
    fromPartial<I extends {
        params?: {
            initModuleBalance?: string | undefined;
        } | undefined;
    } & {
        params?: ({
            initModuleBalance?: string | undefined;
        } & {
            initModuleBalance?: string | undefined;
        } & Record<Exclude<keyof I["params"], "initModuleBalance">, never>) | undefined;
    } & Record<Exclude<keyof I, "params">, never>>(object: I): QueryParamsResponse;
    fromSDK(object: QueryParamsResponseSDKType): QueryParamsResponse;
    toSDK(message: QueryParamsResponse): QueryParamsResponseSDKType;
};
export declare const QueryCrossChainPackageRequest: {
    encode(message: QueryCrossChainPackageRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryCrossChainPackageRequest;
    fromJSON(object: any): QueryCrossChainPackageRequest;
    toJSON(message: QueryCrossChainPackageRequest): unknown;
    fromPartial<I extends {
        channelId?: number | undefined;
        sequence?: string | number | Long.Long | undefined;
    } & {
        channelId?: number | undefined;
        sequence?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["sequence"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof QueryCrossChainPackageRequest>, never>>(object: I): QueryCrossChainPackageRequest;
    fromSDK(object: QueryCrossChainPackageRequestSDKType): QueryCrossChainPackageRequest;
    toSDK(message: QueryCrossChainPackageRequest): QueryCrossChainPackageRequestSDKType;
};
export declare const QueryCrossChainPackageResponse: {
    encode(message: QueryCrossChainPackageResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryCrossChainPackageResponse;
    fromJSON(object: any): QueryCrossChainPackageResponse;
    toJSON(message: QueryCrossChainPackageResponse): unknown;
    fromPartial<I extends {
        package?: Uint8Array | undefined;
    } & {
        package?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, "package">, never>>(object: I): QueryCrossChainPackageResponse;
    fromSDK(object: QueryCrossChainPackageResponseSDKType): QueryCrossChainPackageResponse;
    toSDK(message: QueryCrossChainPackageResponse): QueryCrossChainPackageResponseSDKType;
};
export declare const QuerySendSequenceRequest: {
    encode(message: QuerySendSequenceRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QuerySendSequenceRequest;
    fromJSON(object: any): QuerySendSequenceRequest;
    toJSON(message: QuerySendSequenceRequest): unknown;
    fromPartial<I extends {
        channelId?: number | undefined;
    } & {
        channelId?: number | undefined;
    } & Record<Exclude<keyof I, "channelId">, never>>(object: I): QuerySendSequenceRequest;
    fromSDK(object: QuerySendSequenceRequestSDKType): QuerySendSequenceRequest;
    toSDK(message: QuerySendSequenceRequest): QuerySendSequenceRequestSDKType;
};
export declare const QuerySendSequenceResponse: {
    encode(message: QuerySendSequenceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QuerySendSequenceResponse;
    fromJSON(object: any): QuerySendSequenceResponse;
    toJSON(message: QuerySendSequenceResponse): unknown;
    fromPartial<I extends {
        sequence?: string | number | Long.Long | undefined;
    } & {
        sequence?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["sequence"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, "sequence">, never>>(object: I): QuerySendSequenceResponse;
    fromSDK(object: QuerySendSequenceResponseSDKType): QuerySendSequenceResponse;
    toSDK(message: QuerySendSequenceResponse): QuerySendSequenceResponseSDKType;
};
export declare const QueryReceiveSequenceRequest: {
    encode(message: QueryReceiveSequenceRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryReceiveSequenceRequest;
    fromJSON(object: any): QueryReceiveSequenceRequest;
    toJSON(message: QueryReceiveSequenceRequest): unknown;
    fromPartial<I extends {
        channelId?: number | undefined;
    } & {
        channelId?: number | undefined;
    } & Record<Exclude<keyof I, "channelId">, never>>(object: I): QueryReceiveSequenceRequest;
    fromSDK(object: QueryReceiveSequenceRequestSDKType): QueryReceiveSequenceRequest;
    toSDK(message: QueryReceiveSequenceRequest): QueryReceiveSequenceRequestSDKType;
};
export declare const QueryReceiveSequenceResponse: {
    encode(message: QueryReceiveSequenceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryReceiveSequenceResponse;
    fromJSON(object: any): QueryReceiveSequenceResponse;
    toJSON(message: QueryReceiveSequenceResponse): unknown;
    fromPartial<I extends {
        sequence?: string | number | Long.Long | undefined;
    } & {
        sequence?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["sequence"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, "sequence">, never>>(object: I): QueryReceiveSequenceResponse;
    fromSDK(object: QueryReceiveSequenceResponseSDKType): QueryReceiveSequenceResponse;
    toSDK(message: QueryReceiveSequenceResponse): QueryReceiveSequenceResponseSDKType;
};
/** Query provides defines the gRPC querier service. */
export interface Query {
    /** Params returns the total set of cross chain parameters. */
    Params(request?: QueryParamsRequest): Promise<QueryParamsResponse>;
    /** CrossChainPackage returns the specified cross chain package */
    CrossChainPackage(request: QueryCrossChainPackageRequest): Promise<QueryCrossChainPackageResponse>;
    /** SendSequence returns the send sequence of the channel */
    SendSequence(request: QuerySendSequenceRequest): Promise<QuerySendSequenceResponse>;
    /** ReceiveSequence returns the receive sequence of the channel */
    ReceiveSequence(request: QueryReceiveSequenceRequest): Promise<QueryReceiveSequenceResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    Params(request?: QueryParamsRequest): Promise<QueryParamsResponse>;
    CrossChainPackage(request: QueryCrossChainPackageRequest): Promise<QueryCrossChainPackageResponse>;
    SendSequence(request: QuerySendSequenceRequest): Promise<QuerySendSequenceResponse>;
    ReceiveSequence(request: QueryReceiveSequenceRequest): Promise<QueryReceiveSequenceResponse>;
}
