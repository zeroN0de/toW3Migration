/// <reference types="long" />
import { Coin, CoinSDKType } from "../../cosmos/base/v1beta1/coin";
import { Long } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "greenfield.bridge";
export declare enum RefundReason {
    REFUND_REASON_UNKNOWN = 0,
    REFUND_REASON_INSUFFICIENT_BALANCE = 1,
    REFUND_REASON_FAIL_ACK = 2,
    UNRECOGNIZED = -1
}
export declare const RefundReasonSDKType: typeof RefundReason;
export declare function refundReasonFromJSON(object: any): RefundReason;
export declare function refundReasonToJSON(object: RefundReason): string;
/** EventCrossTransferOut is emitted when a cross chain transfer out tx created */
export interface EventCrossTransferOut {
    /** From addres of the cross chain transfer tx */
    from: string;
    /** To addres of the cross chain transfer tx */
    to: string;
    /** Amount of the cross chain transfer tx */
    amount?: Coin;
    /** Relayer fee of the cross chain transfer tx */
    relayerFee?: Coin;
    /** Sequence of the corresponding cross chain package */
    sequence: Long;
}
/** EventCrossTransferOut is emitted when a cross chain transfer out tx created */
export interface EventCrossTransferOutSDKType {
    from: string;
    to: string;
    amount?: CoinSDKType;
    relayer_fee?: CoinSDKType;
    sequence: Long;
}
/** EventCrossTransferOutRefund is emitted when a cross chain transfer out tx failed */
export interface EventCrossTransferOutRefund {
    /** Refund address of the failed cross chain transfer tx */
    refundAddress: string;
    /** Amount of the failed cross chain transfer tx */
    amount?: Coin;
    /** Refund reason of the failed cross chain transfer tx */
    refundReason: RefundReason;
    /** Sequence of the corresponding cross chain package */
    sequence: Long;
}
/** EventCrossTransferOutRefund is emitted when a cross chain transfer out tx failed */
export interface EventCrossTransferOutRefundSDKType {
    refund_address: string;
    amount?: CoinSDKType;
    refund_reason: RefundReason;
    sequence: Long;
}
/** EventCrossTransferIn is emitted when a cross chain transfer in tx happened */
export interface EventCrossTransferIn {
    /** Amount of the cross chain transfer tx */
    amount?: Coin;
    /** Receiver of the cross chain transfer tx */
    receiverAddress: string;
    /** Refund of the cross chain transfer tx in BSC */
    refundAddress: string;
    /** Sequence of the corresponding cross chain package */
    sequence: Long;
}
/** EventCrossTransferIn is emitted when a cross chain transfer in tx happened */
export interface EventCrossTransferInSDKType {
    amount?: CoinSDKType;
    receiver_address: string;
    refund_address: string;
    sequence: Long;
}
export declare const EventCrossTransferOut: {
    encode(message: EventCrossTransferOut, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventCrossTransferOut;
    fromJSON(object: any): EventCrossTransferOut;
    toJSON(message: EventCrossTransferOut): unknown;
    fromPartial<I extends {
        from?: string | undefined;
        to?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        relayerFee?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        sequence?: string | number | Long.Long | undefined;
    } & {
        from?: string | undefined;
        to?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>) | undefined;
        relayerFee?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["relayerFee"], keyof Coin>, never>) | undefined;
        sequence?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["sequence"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof EventCrossTransferOut>, never>>(object: I): EventCrossTransferOut;
    fromSDK(object: EventCrossTransferOutSDKType): EventCrossTransferOut;
    toSDK(message: EventCrossTransferOut): EventCrossTransferOutSDKType;
};
export declare const EventCrossTransferOutRefund: {
    encode(message: EventCrossTransferOutRefund, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventCrossTransferOutRefund;
    fromJSON(object: any): EventCrossTransferOutRefund;
    toJSON(message: EventCrossTransferOutRefund): unknown;
    fromPartial<I extends {
        refundAddress?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        refundReason?: RefundReason | undefined;
        sequence?: string | number | Long.Long | undefined;
    } & {
        refundAddress?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>) | undefined;
        refundReason?: RefundReason | undefined;
        sequence?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["sequence"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof EventCrossTransferOutRefund>, never>>(object: I): EventCrossTransferOutRefund;
    fromSDK(object: EventCrossTransferOutRefundSDKType): EventCrossTransferOutRefund;
    toSDK(message: EventCrossTransferOutRefund): EventCrossTransferOutRefundSDKType;
};
export declare const EventCrossTransferIn: {
    encode(message: EventCrossTransferIn, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventCrossTransferIn;
    fromJSON(object: any): EventCrossTransferIn;
    toJSON(message: EventCrossTransferIn): unknown;
    fromPartial<I extends {
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        receiverAddress?: string | undefined;
        refundAddress?: string | undefined;
        sequence?: string | number | Long.Long | undefined;
    } & {
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>) | undefined;
        receiverAddress?: string | undefined;
        refundAddress?: string | undefined;
        sequence?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["sequence"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof EventCrossTransferIn>, never>>(object: I): EventCrossTransferIn;
    fromSDK(object: EventCrossTransferInSDKType): EventCrossTransferIn;
    toSDK(message: EventCrossTransferIn): EventCrossTransferInSDKType;
};
