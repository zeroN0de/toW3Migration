"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventCrossTransferIn = exports.EventCrossTransferOutRefund = exports.EventCrossTransferOut = exports.refundReasonToJSON = exports.refundReasonFromJSON = exports.RefundReasonSDKType = exports.RefundReason = exports.protobufPackage = void 0;
/* eslint-disable */
const coin_1 = require("../../cosmos/base/v1beta1/coin");
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "greenfield.bridge";
var RefundReason;
(function (RefundReason) {
    RefundReason[RefundReason["REFUND_REASON_UNKNOWN"] = 0] = "REFUND_REASON_UNKNOWN";
    RefundReason[RefundReason["REFUND_REASON_INSUFFICIENT_BALANCE"] = 1] = "REFUND_REASON_INSUFFICIENT_BALANCE";
    RefundReason[RefundReason["REFUND_REASON_FAIL_ACK"] = 2] = "REFUND_REASON_FAIL_ACK";
    RefundReason[RefundReason["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(RefundReason = exports.RefundReason || (exports.RefundReason = {}));
exports.RefundReasonSDKType = RefundReason;
function refundReasonFromJSON(object) {
    switch (object) {
        case 0:
        case "REFUND_REASON_UNKNOWN":
            return RefundReason.REFUND_REASON_UNKNOWN;
        case 1:
        case "REFUND_REASON_INSUFFICIENT_BALANCE":
            return RefundReason.REFUND_REASON_INSUFFICIENT_BALANCE;
        case 2:
        case "REFUND_REASON_FAIL_ACK":
            return RefundReason.REFUND_REASON_FAIL_ACK;
        case -1:
        case "UNRECOGNIZED":
        default:
            return RefundReason.UNRECOGNIZED;
    }
}
exports.refundReasonFromJSON = refundReasonFromJSON;
function refundReasonToJSON(object) {
    switch (object) {
        case RefundReason.REFUND_REASON_UNKNOWN:
            return "REFUND_REASON_UNKNOWN";
        case RefundReason.REFUND_REASON_INSUFFICIENT_BALANCE:
            return "REFUND_REASON_INSUFFICIENT_BALANCE";
        case RefundReason.REFUND_REASON_FAIL_ACK:
            return "REFUND_REASON_FAIL_ACK";
        case RefundReason.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.refundReasonToJSON = refundReasonToJSON;
function createBaseEventCrossTransferOut() {
    return {
        from: "",
        to: "",
        amount: undefined,
        relayerFee: undefined,
        sequence: helpers_1.Long.UZERO
    };
}
exports.EventCrossTransferOut = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.from !== "") {
            writer.uint32(10).string(message.from);
        }
        if (message.to !== "") {
            writer.uint32(18).string(message.to);
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(26).fork()).ldelim();
        }
        if (message.relayerFee !== undefined) {
            coin_1.Coin.encode(message.relayerFee, writer.uint32(34).fork()).ldelim();
        }
        if (!message.sequence.isZero()) {
            writer.uint32(40).uint64(message.sequence);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCrossTransferOut();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.from = reader.string();
                    break;
                case 2:
                    message.to = reader.string();
                    break;
                case 3:
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.relayerFee = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.sequence = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            from: (0, helpers_1.isSet)(object.from) ? String(object.from) : "",
            to: (0, helpers_1.isSet)(object.to) ? String(object.to) : "",
            amount: (0, helpers_1.isSet)(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
            relayerFee: (0, helpers_1.isSet)(object.relayerFee) ? coin_1.Coin.fromJSON(object.relayerFee) : undefined,
            sequence: (0, helpers_1.isSet)(object.sequence) ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.from !== undefined && (obj.from = message.from);
        message.to !== undefined && (obj.to = message.to);
        message.amount !== undefined && (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);
        message.relayerFee !== undefined && (obj.relayerFee = message.relayerFee ? coin_1.Coin.toJSON(message.relayerFee) : undefined);
        message.sequence !== undefined && (obj.sequence = (message.sequence || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCrossTransferOut();
        message.from = object.from ?? "";
        message.to = object.to ?? "";
        message.amount = object.amount !== undefined && object.amount !== null ? coin_1.Coin.fromPartial(object.amount) : undefined;
        message.relayerFee = object.relayerFee !== undefined && object.relayerFee !== null ? coin_1.Coin.fromPartial(object.relayerFee) : undefined;
        message.sequence = object.sequence !== undefined && object.sequence !== null ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO;
        return message;
    },
    fromSDK(object) {
        return {
            from: object?.from,
            to: object?.to,
            amount: object.amount ? coin_1.Coin.fromSDK(object.amount) : undefined,
            relayerFee: object.relayer_fee ? coin_1.Coin.fromSDK(object.relayer_fee) : undefined,
            sequence: object?.sequence
        };
    },
    toSDK(message) {
        const obj = {};
        obj.from = message.from;
        obj.to = message.to;
        message.amount !== undefined && (obj.amount = message.amount ? coin_1.Coin.toSDK(message.amount) : undefined);
        message.relayerFee !== undefined && (obj.relayer_fee = message.relayerFee ? coin_1.Coin.toSDK(message.relayerFee) : undefined);
        obj.sequence = message.sequence;
        return obj;
    }
};
function createBaseEventCrossTransferOutRefund() {
    return {
        refundAddress: "",
        amount: undefined,
        refundReason: 0,
        sequence: helpers_1.Long.UZERO
    };
}
exports.EventCrossTransferOutRefund = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.refundAddress !== "") {
            writer.uint32(10).string(message.refundAddress);
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(18).fork()).ldelim();
        }
        if (message.refundReason !== 0) {
            writer.uint32(24).int32(message.refundReason);
        }
        if (!message.sequence.isZero()) {
            writer.uint32(32).uint64(message.sequence);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCrossTransferOutRefund();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.refundAddress = reader.string();
                    break;
                case 2:
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.refundReason = reader.int32();
                    break;
                case 4:
                    message.sequence = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            refundAddress: (0, helpers_1.isSet)(object.refundAddress) ? String(object.refundAddress) : "",
            amount: (0, helpers_1.isSet)(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
            refundReason: (0, helpers_1.isSet)(object.refundReason) ? refundReasonFromJSON(object.refundReason) : 0,
            sequence: (0, helpers_1.isSet)(object.sequence) ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.refundAddress !== undefined && (obj.refundAddress = message.refundAddress);
        message.amount !== undefined && (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);
        message.refundReason !== undefined && (obj.refundReason = refundReasonToJSON(message.refundReason));
        message.sequence !== undefined && (obj.sequence = (message.sequence || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCrossTransferOutRefund();
        message.refundAddress = object.refundAddress ?? "";
        message.amount = object.amount !== undefined && object.amount !== null ? coin_1.Coin.fromPartial(object.amount) : undefined;
        message.refundReason = object.refundReason ?? 0;
        message.sequence = object.sequence !== undefined && object.sequence !== null ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO;
        return message;
    },
    fromSDK(object) {
        return {
            refundAddress: object?.refund_address,
            amount: object.amount ? coin_1.Coin.fromSDK(object.amount) : undefined,
            refundReason: (0, helpers_1.isSet)(object.refund_reason) ? refundReasonFromJSON(object.refund_reason) : 0,
            sequence: object?.sequence
        };
    },
    toSDK(message) {
        const obj = {};
        obj.refund_address = message.refundAddress;
        message.amount !== undefined && (obj.amount = message.amount ? coin_1.Coin.toSDK(message.amount) : undefined);
        message.refundReason !== undefined && (obj.refund_reason = refundReasonToJSON(message.refundReason));
        obj.sequence = message.sequence;
        return obj;
    }
};
function createBaseEventCrossTransferIn() {
    return {
        amount: undefined,
        receiverAddress: "",
        refundAddress: "",
        sequence: helpers_1.Long.UZERO
    };
}
exports.EventCrossTransferIn = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(10).fork()).ldelim();
        }
        if (message.receiverAddress !== "") {
            writer.uint32(18).string(message.receiverAddress);
        }
        if (message.refundAddress !== "") {
            writer.uint32(26).string(message.refundAddress);
        }
        if (!message.sequence.isZero()) {
            writer.uint32(32).uint64(message.sequence);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCrossTransferIn();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.receiverAddress = reader.string();
                    break;
                case 3:
                    message.refundAddress = reader.string();
                    break;
                case 4:
                    message.sequence = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            amount: (0, helpers_1.isSet)(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
            receiverAddress: (0, helpers_1.isSet)(object.receiverAddress) ? String(object.receiverAddress) : "",
            refundAddress: (0, helpers_1.isSet)(object.refundAddress) ? String(object.refundAddress) : "",
            sequence: (0, helpers_1.isSet)(object.sequence) ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.amount !== undefined && (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);
        message.receiverAddress !== undefined && (obj.receiverAddress = message.receiverAddress);
        message.refundAddress !== undefined && (obj.refundAddress = message.refundAddress);
        message.sequence !== undefined && (obj.sequence = (message.sequence || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCrossTransferIn();
        message.amount = object.amount !== undefined && object.amount !== null ? coin_1.Coin.fromPartial(object.amount) : undefined;
        message.receiverAddress = object.receiverAddress ?? "";
        message.refundAddress = object.refundAddress ?? "";
        message.sequence = object.sequence !== undefined && object.sequence !== null ? helpers_1.Long.fromValue(object.sequence) : helpers_1.Long.UZERO;
        return message;
    },
    fromSDK(object) {
        return {
            amount: object.amount ? coin_1.Coin.fromSDK(object.amount) : undefined,
            receiverAddress: object?.receiver_address,
            refundAddress: object?.refund_address,
            sequence: object?.sequence
        };
    },
    toSDK(message) {
        const obj = {};
        message.amount !== undefined && (obj.amount = message.amount ? coin_1.Coin.toSDK(message.amount) : undefined);
        obj.receiver_address = message.receiverAddress;
        obj.refund_address = message.refundAddress;
        obj.sequence = message.sequence;
        return obj;
    }
};
//# sourceMappingURL=event.js.map