import { Coin, CoinSDKType } from "../../cosmos/base/v1beta1/coin";
import { Params, ParamsSDKType } from "./params";
import * as _m0 from "protobufjs/minimal";
import { Rpc } from "../../helpers";
export declare const protobufPackage = "greenfield.bridge";
/** MsgTransferOut is the Msg/TransferOut request type. */
export interface MsgTransferOut {
    /** from address */
    from: string;
    /** to address */
    to: string;
    /** transfer token amount */
    amount?: Coin;
}
/** MsgTransferOut is the Msg/TransferOut request type. */
export interface MsgTransferOutSDKType {
    from: string;
    to: string;
    amount?: CoinSDKType;
}
/** MsgTransferOutResponse is the Msg/TransferOut response type. */
export interface MsgTransferOutResponse {
}
/** MsgTransferOutResponse is the Msg/TransferOut response type. */
export interface MsgTransferOutResponseSDKType {
}
/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
    /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
    authority: string;
    /**
     * params defines the x/crosschain parameters to update.
     *
     * NOTE: All parameters must be supplied.
     */
    params?: Params;
}
/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParamsSDKType {
    authority: string;
    params?: ParamsSDKType;
}
/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}
/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponseSDKType {
}
export declare const MsgTransferOut: {
    encode(message: MsgTransferOut, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgTransferOut;
    fromJSON(object: any): MsgTransferOut;
    toJSON(message: MsgTransferOut): unknown;
    fromPartial<I extends {
        from?: string | undefined;
        to?: string | undefined;
        amount?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        from?: string | undefined;
        to?: string | undefined;
        amount?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["amount"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgTransferOut>, never>>(object: I): MsgTransferOut;
    fromSDK(object: MsgTransferOutSDKType): MsgTransferOut;
    toSDK(message: MsgTransferOut): MsgTransferOutSDKType;
};
export declare const MsgTransferOutResponse: {
    encode(_: MsgTransferOutResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgTransferOutResponse;
    fromJSON(_: any): MsgTransferOutResponse;
    toJSON(_: MsgTransferOutResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgTransferOutResponse;
    fromSDK(_: MsgTransferOutResponseSDKType): MsgTransferOutResponse;
    toSDK(_: MsgTransferOutResponse): MsgTransferOutResponseSDKType;
};
export declare const MsgUpdateParams: {
    encode(message: MsgUpdateParams, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams;
    fromJSON(object: any): MsgUpdateParams;
    toJSON(message: MsgUpdateParams): unknown;
    fromPartial<I extends {
        authority?: string | undefined;
        params?: {
            transferOutRelayerFee?: string | undefined;
            transferOutAckRelayerFee?: string | undefined;
        } | undefined;
    } & {
        authority?: string | undefined;
        params?: ({
            transferOutRelayerFee?: string | undefined;
            transferOutAckRelayerFee?: string | undefined;
        } & {
            transferOutRelayerFee?: string | undefined;
            transferOutAckRelayerFee?: string | undefined;
        } & Record<Exclude<keyof I["params"], keyof Params>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgUpdateParams>, never>>(object: I): MsgUpdateParams;
    fromSDK(object: MsgUpdateParamsSDKType): MsgUpdateParams;
    toSDK(message: MsgUpdateParams): MsgUpdateParamsSDKType;
};
export declare const MsgUpdateParamsResponse: {
    encode(_: MsgUpdateParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse;
    fromJSON(_: any): MsgUpdateParamsResponse;
    toJSON(_: MsgUpdateParamsResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgUpdateParamsResponse;
    fromSDK(_: MsgUpdateParamsResponseSDKType): MsgUpdateParamsResponse;
    toSDK(_: MsgUpdateParamsResponse): MsgUpdateParamsResponseSDKType;
};
/** Msg defines the Msg service. */
export interface Msg {
    TransferOut(request: MsgTransferOut): Promise<MsgTransferOutResponse>;
    /**
     * UpdateParams defines a governance operation for updating the x/bridge module parameters.
     * The authority is defined in the keeper.
     *
     * Since: cosmos-sdk 0.47
     */
    UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    TransferOut(request: MsgTransferOut): Promise<MsgTransferOutResponse>;
    UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
}
