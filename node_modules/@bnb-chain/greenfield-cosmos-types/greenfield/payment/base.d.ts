import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "greenfield.payment";
/** StreamAccountStatus defines the status of a stream account */
export declare enum StreamAccountStatus {
    /** STREAM_ACCOUNT_STATUS_ACTIVE - STREAM_ACCOUNT_STATUS_ACTIVE defines the active status of a stream account. */
    STREAM_ACCOUNT_STATUS_ACTIVE = 0,
    /**
     * STREAM_ACCOUNT_STATUS_FROZEN - STREAM_ACCOUNT_STATUS_FROZEN defines the frozen status of a stream account.
     * A frozen stream account cannot be used as payment address for buckets.
     * It can be unfrozen by depositing more BNB to the stream account.
     */
    STREAM_ACCOUNT_STATUS_FROZEN = 1,
    UNRECOGNIZED = -1
}
export declare const StreamAccountStatusSDKType: typeof StreamAccountStatus;
export declare function streamAccountStatusFromJSON(object: any): StreamAccountStatus;
export declare function streamAccountStatusToJSON(object: StreamAccountStatus): string;
/**
 * OutFlow defines the accumulative outflow stream rate in BNB
 * from a stream account to a Storage Provider
 */
export interface OutFlow {
    /** stream account address who receives the flow, usually SP(service provider) */
    toAddress: string;
    /** flow rate */
    rate: string;
}
/**
 * OutFlow defines the accumulative outflow stream rate in BNB
 * from a stream account to a Storage Provider
 */
export interface OutFlowSDKType {
    to_address: string;
    rate: string;
}
export declare const OutFlow: {
    encode(message: OutFlow, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): OutFlow;
    fromJSON(object: any): OutFlow;
    toJSON(message: OutFlow): unknown;
    fromPartial<I extends {
        toAddress?: string | undefined;
        rate?: string | undefined;
    } & {
        toAddress?: string | undefined;
        rate?: string | undefined;
    } & Record<Exclude<keyof I, keyof OutFlow>, never>>(object: I): OutFlow;
    fromSDK(object: OutFlowSDKType): OutFlow;
    toSDK(message: OutFlow): OutFlowSDKType;
};
