"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamRecord = exports.protobufPackage = void 0;
/* eslint-disable */
const base_1 = require("./base");
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "greenfield.payment";
function createBaseStreamRecord() {
    return {
        account: "",
        crudTimestamp: helpers_1.Long.ZERO,
        netflowRate: "",
        staticBalance: "",
        bufferBalance: "",
        lockBalance: "",
        status: 0,
        settleTimestamp: helpers_1.Long.ZERO,
        outFlows: []
    };
}
exports.StreamRecord = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        if (!message.crudTimestamp.isZero()) {
            writer.uint32(16).int64(message.crudTimestamp);
        }
        if (message.netflowRate !== "") {
            writer.uint32(26).string(message.netflowRate);
        }
        if (message.staticBalance !== "") {
            writer.uint32(34).string(message.staticBalance);
        }
        if (message.bufferBalance !== "") {
            writer.uint32(42).string(message.bufferBalance);
        }
        if (message.lockBalance !== "") {
            writer.uint32(50).string(message.lockBalance);
        }
        if (message.status !== 0) {
            writer.uint32(56).int32(message.status);
        }
        if (!message.settleTimestamp.isZero()) {
            writer.uint32(64).int64(message.settleTimestamp);
        }
        for (const v of message.outFlows) {
            base_1.OutFlow.encode(v, writer.uint32(74).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStreamRecord();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.crudTimestamp = reader.int64();
                    break;
                case 3:
                    message.netflowRate = reader.string();
                    break;
                case 4:
                    message.staticBalance = reader.string();
                    break;
                case 5:
                    message.bufferBalance = reader.string();
                    break;
                case 6:
                    message.lockBalance = reader.string();
                    break;
                case 7:
                    message.status = reader.int32();
                    break;
                case 8:
                    message.settleTimestamp = reader.int64();
                    break;
                case 9:
                    message.outFlows.push(base_1.OutFlow.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: (0, helpers_1.isSet)(object.account) ? String(object.account) : "",
            crudTimestamp: (0, helpers_1.isSet)(object.crudTimestamp) ? helpers_1.Long.fromValue(object.crudTimestamp) : helpers_1.Long.ZERO,
            netflowRate: (0, helpers_1.isSet)(object.netflowRate) ? String(object.netflowRate) : "",
            staticBalance: (0, helpers_1.isSet)(object.staticBalance) ? String(object.staticBalance) : "",
            bufferBalance: (0, helpers_1.isSet)(object.bufferBalance) ? String(object.bufferBalance) : "",
            lockBalance: (0, helpers_1.isSet)(object.lockBalance) ? String(object.lockBalance) : "",
            status: (0, helpers_1.isSet)(object.status) ? (0, base_1.streamAccountStatusFromJSON)(object.status) : 0,
            settleTimestamp: (0, helpers_1.isSet)(object.settleTimestamp) ? helpers_1.Long.fromValue(object.settleTimestamp) : helpers_1.Long.ZERO,
            outFlows: Array.isArray(object?.outFlows) ? object.outFlows.map((e) => base_1.OutFlow.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.account !== undefined && (obj.account = message.account);
        message.crudTimestamp !== undefined && (obj.crudTimestamp = (message.crudTimestamp || helpers_1.Long.ZERO).toString());
        message.netflowRate !== undefined && (obj.netflowRate = message.netflowRate);
        message.staticBalance !== undefined && (obj.staticBalance = message.staticBalance);
        message.bufferBalance !== undefined && (obj.bufferBalance = message.bufferBalance);
        message.lockBalance !== undefined && (obj.lockBalance = message.lockBalance);
        message.status !== undefined && (obj.status = (0, base_1.streamAccountStatusToJSON)(message.status));
        message.settleTimestamp !== undefined && (obj.settleTimestamp = (message.settleTimestamp || helpers_1.Long.ZERO).toString());
        if (message.outFlows) {
            obj.outFlows = message.outFlows.map(e => e ? base_1.OutFlow.toJSON(e) : undefined);
        }
        else {
            obj.outFlows = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseStreamRecord();
        message.account = object.account ?? "";
        message.crudTimestamp = object.crudTimestamp !== undefined && object.crudTimestamp !== null ? helpers_1.Long.fromValue(object.crudTimestamp) : helpers_1.Long.ZERO;
        message.netflowRate = object.netflowRate ?? "";
        message.staticBalance = object.staticBalance ?? "";
        message.bufferBalance = object.bufferBalance ?? "";
        message.lockBalance = object.lockBalance ?? "";
        message.status = object.status ?? 0;
        message.settleTimestamp = object.settleTimestamp !== undefined && object.settleTimestamp !== null ? helpers_1.Long.fromValue(object.settleTimestamp) : helpers_1.Long.ZERO;
        message.outFlows = object.outFlows?.map(e => base_1.OutFlow.fromPartial(e)) || [];
        return message;
    },
    fromSDK(object) {
        return {
            account: object?.account,
            crudTimestamp: object?.crud_timestamp,
            netflowRate: object?.netflow_rate,
            staticBalance: object?.static_balance,
            bufferBalance: object?.buffer_balance,
            lockBalance: object?.lock_balance,
            status: (0, helpers_1.isSet)(object.status) ? (0, base_1.streamAccountStatusFromJSON)(object.status) : 0,
            settleTimestamp: object?.settle_timestamp,
            outFlows: Array.isArray(object?.out_flows) ? object.out_flows.map((e) => base_1.OutFlow.fromSDK(e)) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.account = message.account;
        obj.crud_timestamp = message.crudTimestamp;
        obj.netflow_rate = message.netflowRate;
        obj.static_balance = message.staticBalance;
        obj.buffer_balance = message.bufferBalance;
        obj.lock_balance = message.lockBalance;
        message.status !== undefined && (obj.status = (0, base_1.streamAccountStatusToJSON)(message.status));
        obj.settle_timestamp = message.settleTimestamp;
        if (message.outFlows) {
            obj.out_flows = message.outFlows.map(e => e ? base_1.OutFlow.toSDK(e) : undefined);
        }
        else {
            obj.out_flows = [];
        }
        return obj;
    }
};
//# sourceMappingURL=stream_record.js.map