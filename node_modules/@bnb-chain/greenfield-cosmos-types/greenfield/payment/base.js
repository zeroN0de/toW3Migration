"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutFlow = exports.streamAccountStatusToJSON = exports.streamAccountStatusFromJSON = exports.StreamAccountStatusSDKType = exports.StreamAccountStatus = exports.protobufPackage = void 0;
/* eslint-disable */
const _m0 = __importStar(require("protobufjs/minimal"));
const helpers_1 = require("../../helpers");
exports.protobufPackage = "greenfield.payment";
/** StreamAccountStatus defines the status of a stream account */
var StreamAccountStatus;
(function (StreamAccountStatus) {
    /** STREAM_ACCOUNT_STATUS_ACTIVE - STREAM_ACCOUNT_STATUS_ACTIVE defines the active status of a stream account. */
    StreamAccountStatus[StreamAccountStatus["STREAM_ACCOUNT_STATUS_ACTIVE"] = 0] = "STREAM_ACCOUNT_STATUS_ACTIVE";
    /**
     * STREAM_ACCOUNT_STATUS_FROZEN - STREAM_ACCOUNT_STATUS_FROZEN defines the frozen status of a stream account.
     * A frozen stream account cannot be used as payment address for buckets.
     * It can be unfrozen by depositing more BNB to the stream account.
     */
    StreamAccountStatus[StreamAccountStatus["STREAM_ACCOUNT_STATUS_FROZEN"] = 1] = "STREAM_ACCOUNT_STATUS_FROZEN";
    StreamAccountStatus[StreamAccountStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(StreamAccountStatus = exports.StreamAccountStatus || (exports.StreamAccountStatus = {}));
exports.StreamAccountStatusSDKType = StreamAccountStatus;
function streamAccountStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "STREAM_ACCOUNT_STATUS_ACTIVE":
            return StreamAccountStatus.STREAM_ACCOUNT_STATUS_ACTIVE;
        case 1:
        case "STREAM_ACCOUNT_STATUS_FROZEN":
            return StreamAccountStatus.STREAM_ACCOUNT_STATUS_FROZEN;
        case -1:
        case "UNRECOGNIZED":
        default:
            return StreamAccountStatus.UNRECOGNIZED;
    }
}
exports.streamAccountStatusFromJSON = streamAccountStatusFromJSON;
function streamAccountStatusToJSON(object) {
    switch (object) {
        case StreamAccountStatus.STREAM_ACCOUNT_STATUS_ACTIVE:
            return "STREAM_ACCOUNT_STATUS_ACTIVE";
        case StreamAccountStatus.STREAM_ACCOUNT_STATUS_FROZEN:
            return "STREAM_ACCOUNT_STATUS_FROZEN";
        case StreamAccountStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.streamAccountStatusToJSON = streamAccountStatusToJSON;
function createBaseOutFlow() {
    return {
        toAddress: "",
        rate: ""
    };
}
exports.OutFlow = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.toAddress !== "") {
            writer.uint32(10).string(message.toAddress);
        }
        if (message.rate !== "") {
            writer.uint32(18).string(message.rate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOutFlow();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.toAddress = reader.string();
                    break;
                case 2:
                    message.rate = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            toAddress: (0, helpers_1.isSet)(object.toAddress) ? String(object.toAddress) : "",
            rate: (0, helpers_1.isSet)(object.rate) ? String(object.rate) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.toAddress !== undefined && (obj.toAddress = message.toAddress);
        message.rate !== undefined && (obj.rate = message.rate);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseOutFlow();
        message.toAddress = object.toAddress ?? "";
        message.rate = object.rate ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            toAddress: object?.to_address,
            rate: object?.rate
        };
    },
    toSDK(message) {
        const obj = {};
        obj.to_address = message.toAddress;
        obj.rate = message.rate;
        return obj;
    }
};
//# sourceMappingURL=base.js.map