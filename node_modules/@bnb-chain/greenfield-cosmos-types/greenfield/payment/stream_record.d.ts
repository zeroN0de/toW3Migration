/// <reference types="long" />
import { StreamAccountStatus, OutFlow, OutFlowSDKType } from "./base";
import { Long } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "greenfield.payment";
/** Stream Payment Record of a stream account */
export interface StreamRecord {
    /** account address */
    account: string;
    /** latest update timestamp of the stream record */
    crudTimestamp: Long;
    /**
     * The per-second rate that an account's balance is changing.
     * It is the sum of the account's inbound and outbound flow rates.
     */
    netflowRate: string;
    /** The balance of the stream account at the latest CRUD timestamp. */
    staticBalance: string;
    /**
     * reserved balance of the stream account
     * If the netflow rate is negative, the reserved balance is `netflow_rate * reserve_time`
     */
    bufferBalance: string;
    /** the locked balance of the stream account after it puts a new object and before the object is sealed */
    lockBalance: string;
    /** the status of the stream account */
    status: StreamAccountStatus;
    /** the unix timestamp when the stream account will be settled */
    settleTimestamp: Long;
    /** the accumulated outflow rates of the stream account */
    outFlows: OutFlow[];
}
/** Stream Payment Record of a stream account */
export interface StreamRecordSDKType {
    account: string;
    crud_timestamp: Long;
    netflow_rate: string;
    static_balance: string;
    buffer_balance: string;
    lock_balance: string;
    status: StreamAccountStatus;
    settle_timestamp: Long;
    out_flows: OutFlowSDKType[];
}
export declare const StreamRecord: {
    encode(message: StreamRecord, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StreamRecord;
    fromJSON(object: any): StreamRecord;
    toJSON(message: StreamRecord): unknown;
    fromPartial<I extends {
        account?: string | undefined;
        crudTimestamp?: string | number | Long.Long | undefined;
        netflowRate?: string | undefined;
        staticBalance?: string | undefined;
        bufferBalance?: string | undefined;
        lockBalance?: string | undefined;
        status?: StreamAccountStatus | undefined;
        settleTimestamp?: string | number | Long.Long | undefined;
        outFlows?: {
            toAddress?: string | undefined;
            rate?: string | undefined;
        }[] | undefined;
    } & {
        account?: string | undefined;
        crudTimestamp?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["crudTimestamp"], keyof Long.Long>, never>) | undefined;
        netflowRate?: string | undefined;
        staticBalance?: string | undefined;
        bufferBalance?: string | undefined;
        lockBalance?: string | undefined;
        status?: StreamAccountStatus | undefined;
        settleTimestamp?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["settleTimestamp"], keyof Long.Long>, never>) | undefined;
        outFlows?: ({
            toAddress?: string | undefined;
            rate?: string | undefined;
        }[] & ({
            toAddress?: string | undefined;
            rate?: string | undefined;
        } & {
            toAddress?: string | undefined;
            rate?: string | undefined;
        } & Record<Exclude<keyof I["outFlows"][number], keyof OutFlow>, never>)[] & Record<Exclude<keyof I["outFlows"], keyof {
            toAddress?: string | undefined;
            rate?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof StreamRecord>, never>>(object: I): StreamRecord;
    fromSDK(object: StreamRecordSDKType): StreamRecord;
    toSDK(message: StreamRecord): StreamRecordSDKType;
};
