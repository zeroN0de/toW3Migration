"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryAllAutoSettleRecordResponse = exports.QueryAllAutoSettleRecordRequest = exports.QueryGetPaymentAccountsByOwnerResponse = exports.QueryGetPaymentAccountsByOwnerRequest = exports.QueryDynamicBalanceResponse = exports.QueryDynamicBalanceRequest = exports.QueryAllPaymentAccountResponse = exports.QueryAllPaymentAccountRequest = exports.QueryGetPaymentAccountResponse = exports.QueryGetPaymentAccountRequest = exports.QueryAllPaymentAccountCountResponse = exports.QueryAllPaymentAccountCountRequest = exports.QueryGetPaymentAccountCountResponse = exports.QueryGetPaymentAccountCountRequest = exports.QueryAllStreamRecordResponse = exports.QueryAllStreamRecordRequest = exports.QueryGetStreamRecordResponse = exports.QueryGetStreamRecordRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const pagination_1 = require("../../cosmos/base/query/v1beta1/pagination");
const params_1 = require("./params");
const stream_record_1 = require("./stream_record");
const payment_account_count_1 = require("./payment_account_count");
const payment_account_1 = require("./payment_account");
const auto_settle_record_1 = require("./auto_settle_record");
const _m0 = __importStar(require("protobufjs/minimal"));
const helpers_1 = require("../../helpers");
exports.protobufPackage = "greenfield.payment";
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseQueryParamsResponse() {
    return {
        params: undefined
    };
}
exports.QueryParamsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: (0, helpers_1.isSet)(object.params) ? params_1.Params.fromJSON(object.params) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = object.params !== undefined && object.params !== null ? params_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            params: object.params ? params_1.Params.fromSDK(object.params) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toSDK(message.params) : undefined);
        return obj;
    }
};
function createBaseQueryGetStreamRecordRequest() {
    return {
        account: ""
    };
}
exports.QueryGetStreamRecordRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetStreamRecordRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: (0, helpers_1.isSet)(object.account) ? String(object.account) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.account !== undefined && (obj.account = message.account);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGetStreamRecordRequest();
        message.account = object.account ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            account: object?.account
        };
    },
    toSDK(message) {
        const obj = {};
        obj.account = message.account;
        return obj;
    }
};
function createBaseQueryGetStreamRecordResponse() {
    return {
        streamRecord: undefined
    };
}
exports.QueryGetStreamRecordResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.streamRecord !== undefined) {
            stream_record_1.StreamRecord.encode(message.streamRecord, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetStreamRecordResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.streamRecord = stream_record_1.StreamRecord.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            streamRecord: (0, helpers_1.isSet)(object.streamRecord) ? stream_record_1.StreamRecord.fromJSON(object.streamRecord) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.streamRecord !== undefined && (obj.streamRecord = message.streamRecord ? stream_record_1.StreamRecord.toJSON(message.streamRecord) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGetStreamRecordResponse();
        message.streamRecord = object.streamRecord !== undefined && object.streamRecord !== null ? stream_record_1.StreamRecord.fromPartial(object.streamRecord) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            streamRecord: object.stream_record ? stream_record_1.StreamRecord.fromSDK(object.stream_record) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.streamRecord !== undefined && (obj.stream_record = message.streamRecord ? stream_record_1.StreamRecord.toSDK(message.streamRecord) : undefined);
        return obj;
    }
};
function createBaseQueryAllStreamRecordRequest() {
    return {
        pagination: undefined
    };
}
exports.QueryAllStreamRecordRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAllStreamRecordRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryAllStreamRecordRequest();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            pagination: object.pagination ? pagination_1.PageRequest.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryAllStreamRecordResponse() {
    return {
        streamRecord: [],
        pagination: undefined
    };
}
exports.QueryAllStreamRecordResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.streamRecord) {
            stream_record_1.StreamRecord.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAllStreamRecordResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.streamRecord.push(stream_record_1.StreamRecord.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            streamRecord: Array.isArray(object?.streamRecord) ? object.streamRecord.map((e) => stream_record_1.StreamRecord.fromJSON(e)) : [],
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.streamRecord) {
            obj.streamRecord = message.streamRecord.map(e => e ? stream_record_1.StreamRecord.toJSON(e) : undefined);
        }
        else {
            obj.streamRecord = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryAllStreamRecordResponse();
        message.streamRecord = object.streamRecord?.map(e => stream_record_1.StreamRecord.fromPartial(e)) || [];
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            streamRecord: Array.isArray(object?.stream_record) ? object.stream_record.map((e) => stream_record_1.StreamRecord.fromSDK(e)) : [],
            pagination: object.pagination ? pagination_1.PageResponse.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.streamRecord) {
            obj.stream_record = message.streamRecord.map(e => e ? stream_record_1.StreamRecord.toSDK(e) : undefined);
        }
        else {
            obj.stream_record = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryGetPaymentAccountCountRequest() {
    return {
        owner: ""
    };
}
exports.QueryGetPaymentAccountCountRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.owner !== "") {
            writer.uint32(10).string(message.owner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetPaymentAccountCountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.owner = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.owner !== undefined && (obj.owner = message.owner);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGetPaymentAccountCountRequest();
        message.owner = object.owner ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            owner: object?.owner
        };
    },
    toSDK(message) {
        const obj = {};
        obj.owner = message.owner;
        return obj;
    }
};
function createBaseQueryGetPaymentAccountCountResponse() {
    return {
        paymentAccountCount: undefined
    };
}
exports.QueryGetPaymentAccountCountResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.paymentAccountCount !== undefined) {
            payment_account_count_1.PaymentAccountCount.encode(message.paymentAccountCount, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetPaymentAccountCountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.paymentAccountCount = payment_account_count_1.PaymentAccountCount.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            paymentAccountCount: (0, helpers_1.isSet)(object.paymentAccountCount) ? payment_account_count_1.PaymentAccountCount.fromJSON(object.paymentAccountCount) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.paymentAccountCount !== undefined && (obj.paymentAccountCount = message.paymentAccountCount ? payment_account_count_1.PaymentAccountCount.toJSON(message.paymentAccountCount) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGetPaymentAccountCountResponse();
        message.paymentAccountCount = object.paymentAccountCount !== undefined && object.paymentAccountCount !== null ? payment_account_count_1.PaymentAccountCount.fromPartial(object.paymentAccountCount) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            paymentAccountCount: object.payment_account_count ? payment_account_count_1.PaymentAccountCount.fromSDK(object.payment_account_count) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.paymentAccountCount !== undefined && (obj.payment_account_count = message.paymentAccountCount ? payment_account_count_1.PaymentAccountCount.toSDK(message.paymentAccountCount) : undefined);
        return obj;
    }
};
function createBaseQueryAllPaymentAccountCountRequest() {
    return {
        pagination: undefined
    };
}
exports.QueryAllPaymentAccountCountRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAllPaymentAccountCountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryAllPaymentAccountCountRequest();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            pagination: object.pagination ? pagination_1.PageRequest.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryAllPaymentAccountCountResponse() {
    return {
        paymentAccountCount: [],
        pagination: undefined
    };
}
exports.QueryAllPaymentAccountCountResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.paymentAccountCount) {
            payment_account_count_1.PaymentAccountCount.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAllPaymentAccountCountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.paymentAccountCount.push(payment_account_count_1.PaymentAccountCount.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            paymentAccountCount: Array.isArray(object?.paymentAccountCount) ? object.paymentAccountCount.map((e) => payment_account_count_1.PaymentAccountCount.fromJSON(e)) : [],
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.paymentAccountCount) {
            obj.paymentAccountCount = message.paymentAccountCount.map(e => e ? payment_account_count_1.PaymentAccountCount.toJSON(e) : undefined);
        }
        else {
            obj.paymentAccountCount = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryAllPaymentAccountCountResponse();
        message.paymentAccountCount = object.paymentAccountCount?.map(e => payment_account_count_1.PaymentAccountCount.fromPartial(e)) || [];
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            paymentAccountCount: Array.isArray(object?.payment_account_count) ? object.payment_account_count.map((e) => payment_account_count_1.PaymentAccountCount.fromSDK(e)) : [],
            pagination: object.pagination ? pagination_1.PageResponse.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.paymentAccountCount) {
            obj.payment_account_count = message.paymentAccountCount.map(e => e ? payment_account_count_1.PaymentAccountCount.toSDK(e) : undefined);
        }
        else {
            obj.payment_account_count = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryGetPaymentAccountRequest() {
    return {
        addr: ""
    };
}
exports.QueryGetPaymentAccountRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.addr !== "") {
            writer.uint32(10).string(message.addr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetPaymentAccountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.addr = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            addr: (0, helpers_1.isSet)(object.addr) ? String(object.addr) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.addr !== undefined && (obj.addr = message.addr);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGetPaymentAccountRequest();
        message.addr = object.addr ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            addr: object?.addr
        };
    },
    toSDK(message) {
        const obj = {};
        obj.addr = message.addr;
        return obj;
    }
};
function createBaseQueryGetPaymentAccountResponse() {
    return {
        paymentAccount: undefined
    };
}
exports.QueryGetPaymentAccountResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.paymentAccount !== undefined) {
            payment_account_1.PaymentAccount.encode(message.paymentAccount, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetPaymentAccountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.paymentAccount = payment_account_1.PaymentAccount.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            paymentAccount: (0, helpers_1.isSet)(object.paymentAccount) ? payment_account_1.PaymentAccount.fromJSON(object.paymentAccount) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.paymentAccount !== undefined && (obj.paymentAccount = message.paymentAccount ? payment_account_1.PaymentAccount.toJSON(message.paymentAccount) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGetPaymentAccountResponse();
        message.paymentAccount = object.paymentAccount !== undefined && object.paymentAccount !== null ? payment_account_1.PaymentAccount.fromPartial(object.paymentAccount) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            paymentAccount: object.payment_account ? payment_account_1.PaymentAccount.fromSDK(object.payment_account) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.paymentAccount !== undefined && (obj.payment_account = message.paymentAccount ? payment_account_1.PaymentAccount.toSDK(message.paymentAccount) : undefined);
        return obj;
    }
};
function createBaseQueryAllPaymentAccountRequest() {
    return {
        pagination: undefined
    };
}
exports.QueryAllPaymentAccountRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAllPaymentAccountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryAllPaymentAccountRequest();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            pagination: object.pagination ? pagination_1.PageRequest.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryAllPaymentAccountResponse() {
    return {
        paymentAccount: [],
        pagination: undefined
    };
}
exports.QueryAllPaymentAccountResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.paymentAccount) {
            payment_account_1.PaymentAccount.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAllPaymentAccountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.paymentAccount.push(payment_account_1.PaymentAccount.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            paymentAccount: Array.isArray(object?.paymentAccount) ? object.paymentAccount.map((e) => payment_account_1.PaymentAccount.fromJSON(e)) : [],
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.paymentAccount) {
            obj.paymentAccount = message.paymentAccount.map(e => e ? payment_account_1.PaymentAccount.toJSON(e) : undefined);
        }
        else {
            obj.paymentAccount = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryAllPaymentAccountResponse();
        message.paymentAccount = object.paymentAccount?.map(e => payment_account_1.PaymentAccount.fromPartial(e)) || [];
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            paymentAccount: Array.isArray(object?.payment_account) ? object.payment_account.map((e) => payment_account_1.PaymentAccount.fromSDK(e)) : [],
            pagination: object.pagination ? pagination_1.PageResponse.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.paymentAccount) {
            obj.payment_account = message.paymentAccount.map(e => e ? payment_account_1.PaymentAccount.toSDK(e) : undefined);
        }
        else {
            obj.payment_account = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryDynamicBalanceRequest() {
    return {
        account: ""
    };
}
exports.QueryDynamicBalanceRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDynamicBalanceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: (0, helpers_1.isSet)(object.account) ? String(object.account) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.account !== undefined && (obj.account = message.account);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryDynamicBalanceRequest();
        message.account = object.account ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            account: object?.account
        };
    },
    toSDK(message) {
        const obj = {};
        obj.account = message.account;
        return obj;
    }
};
function createBaseQueryDynamicBalanceResponse() {
    return {
        dynamicBalance: "",
        streamRecord: undefined,
        currentTimestamp: helpers_1.Long.ZERO,
        bankBalance: "",
        availableBalance: "",
        lockedFee: "",
        changeRate: ""
    };
}
exports.QueryDynamicBalanceResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.dynamicBalance !== "") {
            writer.uint32(10).string(message.dynamicBalance);
        }
        if (message.streamRecord !== undefined) {
            stream_record_1.StreamRecord.encode(message.streamRecord, writer.uint32(18).fork()).ldelim();
        }
        if (!message.currentTimestamp.isZero()) {
            writer.uint32(24).int64(message.currentTimestamp);
        }
        if (message.bankBalance !== "") {
            writer.uint32(34).string(message.bankBalance);
        }
        if (message.availableBalance !== "") {
            writer.uint32(42).string(message.availableBalance);
        }
        if (message.lockedFee !== "") {
            writer.uint32(50).string(message.lockedFee);
        }
        if (message.changeRate !== "") {
            writer.uint32(58).string(message.changeRate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryDynamicBalanceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.dynamicBalance = reader.string();
                    break;
                case 2:
                    message.streamRecord = stream_record_1.StreamRecord.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.currentTimestamp = reader.int64();
                    break;
                case 4:
                    message.bankBalance = reader.string();
                    break;
                case 5:
                    message.availableBalance = reader.string();
                    break;
                case 6:
                    message.lockedFee = reader.string();
                    break;
                case 7:
                    message.changeRate = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            dynamicBalance: (0, helpers_1.isSet)(object.dynamicBalance) ? String(object.dynamicBalance) : "",
            streamRecord: (0, helpers_1.isSet)(object.streamRecord) ? stream_record_1.StreamRecord.fromJSON(object.streamRecord) : undefined,
            currentTimestamp: (0, helpers_1.isSet)(object.currentTimestamp) ? helpers_1.Long.fromValue(object.currentTimestamp) : helpers_1.Long.ZERO,
            bankBalance: (0, helpers_1.isSet)(object.bankBalance) ? String(object.bankBalance) : "",
            availableBalance: (0, helpers_1.isSet)(object.availableBalance) ? String(object.availableBalance) : "",
            lockedFee: (0, helpers_1.isSet)(object.lockedFee) ? String(object.lockedFee) : "",
            changeRate: (0, helpers_1.isSet)(object.changeRate) ? String(object.changeRate) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.dynamicBalance !== undefined && (obj.dynamicBalance = message.dynamicBalance);
        message.streamRecord !== undefined && (obj.streamRecord = message.streamRecord ? stream_record_1.StreamRecord.toJSON(message.streamRecord) : undefined);
        message.currentTimestamp !== undefined && (obj.currentTimestamp = (message.currentTimestamp || helpers_1.Long.ZERO).toString());
        message.bankBalance !== undefined && (obj.bankBalance = message.bankBalance);
        message.availableBalance !== undefined && (obj.availableBalance = message.availableBalance);
        message.lockedFee !== undefined && (obj.lockedFee = message.lockedFee);
        message.changeRate !== undefined && (obj.changeRate = message.changeRate);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryDynamicBalanceResponse();
        message.dynamicBalance = object.dynamicBalance ?? "";
        message.streamRecord = object.streamRecord !== undefined && object.streamRecord !== null ? stream_record_1.StreamRecord.fromPartial(object.streamRecord) : undefined;
        message.currentTimestamp = object.currentTimestamp !== undefined && object.currentTimestamp !== null ? helpers_1.Long.fromValue(object.currentTimestamp) : helpers_1.Long.ZERO;
        message.bankBalance = object.bankBalance ?? "";
        message.availableBalance = object.availableBalance ?? "";
        message.lockedFee = object.lockedFee ?? "";
        message.changeRate = object.changeRate ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            dynamicBalance: object?.dynamic_balance,
            streamRecord: object.stream_record ? stream_record_1.StreamRecord.fromSDK(object.stream_record) : undefined,
            currentTimestamp: object?.current_timestamp,
            bankBalance: object?.bank_balance,
            availableBalance: object?.available_balance,
            lockedFee: object?.locked_fee,
            changeRate: object?.change_rate
        };
    },
    toSDK(message) {
        const obj = {};
        obj.dynamic_balance = message.dynamicBalance;
        message.streamRecord !== undefined && (obj.stream_record = message.streamRecord ? stream_record_1.StreamRecord.toSDK(message.streamRecord) : undefined);
        obj.current_timestamp = message.currentTimestamp;
        obj.bank_balance = message.bankBalance;
        obj.available_balance = message.availableBalance;
        obj.locked_fee = message.lockedFee;
        obj.change_rate = message.changeRate;
        return obj;
    }
};
function createBaseQueryGetPaymentAccountsByOwnerRequest() {
    return {
        owner: ""
    };
}
exports.QueryGetPaymentAccountsByOwnerRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.owner !== "") {
            writer.uint32(10).string(message.owner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetPaymentAccountsByOwnerRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.owner = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.owner !== undefined && (obj.owner = message.owner);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGetPaymentAccountsByOwnerRequest();
        message.owner = object.owner ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            owner: object?.owner
        };
    },
    toSDK(message) {
        const obj = {};
        obj.owner = message.owner;
        return obj;
    }
};
function createBaseQueryGetPaymentAccountsByOwnerResponse() {
    return {
        paymentAccounts: []
    };
}
exports.QueryGetPaymentAccountsByOwnerResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.paymentAccounts) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetPaymentAccountsByOwnerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.paymentAccounts.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            paymentAccounts: Array.isArray(object?.paymentAccounts) ? object.paymentAccounts.map((e) => String(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.paymentAccounts) {
            obj.paymentAccounts = message.paymentAccounts.map(e => e);
        }
        else {
            obj.paymentAccounts = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGetPaymentAccountsByOwnerResponse();
        message.paymentAccounts = object.paymentAccounts?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            paymentAccounts: Array.isArray(object?.paymentAccounts) ? object.paymentAccounts.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.paymentAccounts) {
            obj.paymentAccounts = message.paymentAccounts.map(e => e);
        }
        else {
            obj.paymentAccounts = [];
        }
        return obj;
    }
};
function createBaseQueryAllAutoSettleRecordRequest() {
    return {
        pagination: undefined
    };
}
exports.QueryAllAutoSettleRecordRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAllAutoSettleRecordRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryAllAutoSettleRecordRequest();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            pagination: object.pagination ? pagination_1.PageRequest.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryAllAutoSettleRecordResponse() {
    return {
        autoSettleRecord: [],
        pagination: undefined
    };
}
exports.QueryAllAutoSettleRecordResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.autoSettleRecord) {
            auto_settle_record_1.AutoSettleRecord.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAllAutoSettleRecordResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.autoSettleRecord.push(auto_settle_record_1.AutoSettleRecord.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            autoSettleRecord: Array.isArray(object?.autoSettleRecord) ? object.autoSettleRecord.map((e) => auto_settle_record_1.AutoSettleRecord.fromJSON(e)) : [],
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.autoSettleRecord) {
            obj.autoSettleRecord = message.autoSettleRecord.map(e => e ? auto_settle_record_1.AutoSettleRecord.toJSON(e) : undefined);
        }
        else {
            obj.autoSettleRecord = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryAllAutoSettleRecordResponse();
        message.autoSettleRecord = object.autoSettleRecord?.map(e => auto_settle_record_1.AutoSettleRecord.fromPartial(e)) || [];
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            autoSettleRecord: Array.isArray(object?.auto_settle_record) ? object.auto_settle_record.map((e) => auto_settle_record_1.AutoSettleRecord.fromSDK(e)) : [],
            pagination: object.pagination ? pagination_1.PageResponse.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.autoSettleRecord) {
            obj.auto_settle_record = message.autoSettleRecord.map(e => e ? auto_settle_record_1.AutoSettleRecord.toSDK(e) : undefined);
        }
        else {
            obj.auto_settle_record = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toSDK(message.pagination) : undefined);
        return obj;
    }
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.StreamRecord = this.StreamRecord.bind(this);
        this.StreamRecordAll = this.StreamRecordAll.bind(this);
        this.PaymentAccountCount = this.PaymentAccountCount.bind(this);
        this.PaymentAccountCountAll = this.PaymentAccountCountAll.bind(this);
        this.PaymentAccount = this.PaymentAccount.bind(this);
        this.PaymentAccountAll = this.PaymentAccountAll.bind(this);
        this.DynamicBalance = this.DynamicBalance.bind(this);
        this.GetPaymentAccountsByOwner = this.GetPaymentAccountsByOwner.bind(this);
        this.AutoSettleRecordAll = this.AutoSettleRecordAll.bind(this);
    }
    Params(request = {}) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "Params", data);
        return promise.then(data => exports.QueryParamsResponse.decode(new _m0.Reader(data)));
    }
    StreamRecord(request) {
        const data = exports.QueryGetStreamRecordRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "StreamRecord", data);
        return promise.then(data => exports.QueryGetStreamRecordResponse.decode(new _m0.Reader(data)));
    }
    StreamRecordAll(request = {
        pagination: undefined
    }) {
        const data = exports.QueryAllStreamRecordRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "StreamRecordAll", data);
        return promise.then(data => exports.QueryAllStreamRecordResponse.decode(new _m0.Reader(data)));
    }
    PaymentAccountCount(request) {
        const data = exports.QueryGetPaymentAccountCountRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "PaymentAccountCount", data);
        return promise.then(data => exports.QueryGetPaymentAccountCountResponse.decode(new _m0.Reader(data)));
    }
    PaymentAccountCountAll(request = {
        pagination: undefined
    }) {
        const data = exports.QueryAllPaymentAccountCountRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "PaymentAccountCountAll", data);
        return promise.then(data => exports.QueryAllPaymentAccountCountResponse.decode(new _m0.Reader(data)));
    }
    PaymentAccount(request) {
        const data = exports.QueryGetPaymentAccountRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "PaymentAccount", data);
        return promise.then(data => exports.QueryGetPaymentAccountResponse.decode(new _m0.Reader(data)));
    }
    PaymentAccountAll(request = {
        pagination: undefined
    }) {
        const data = exports.QueryAllPaymentAccountRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "PaymentAccountAll", data);
        return promise.then(data => exports.QueryAllPaymentAccountResponse.decode(new _m0.Reader(data)));
    }
    DynamicBalance(request) {
        const data = exports.QueryDynamicBalanceRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "DynamicBalance", data);
        return promise.then(data => exports.QueryDynamicBalanceResponse.decode(new _m0.Reader(data)));
    }
    GetPaymentAccountsByOwner(request) {
        const data = exports.QueryGetPaymentAccountsByOwnerRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "GetPaymentAccountsByOwner", data);
        return promise.then(data => exports.QueryGetPaymentAccountsByOwnerResponse.decode(new _m0.Reader(data)));
    }
    AutoSettleRecordAll(request = {
        pagination: undefined
    }) {
        const data = exports.QueryAllAutoSettleRecordRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.payment.Query", "AutoSettleRecordAll", data);
        return promise.then(data => exports.QueryAllAutoSettleRecordResponse.decode(new _m0.Reader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
//# sourceMappingURL=query.js.map