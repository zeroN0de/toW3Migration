"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryStorageProviderResponse = exports.QueryStorageProviderRequest = exports.QueryGetSecondarySpStorePriceByTimeResponse = exports.QueryGetSecondarySpStorePriceByTimeRequest = exports.QueryGetSpStoragePriceByTimeResponse = exports.QueryGetSpStoragePriceByTimeRequest = exports.QueryStorageProvidersResponse = exports.QueryStorageProvidersRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const pagination_1 = require("../../cosmos/base/query/v1beta1/pagination");
const params_1 = require("./params");
const types_1 = require("./types");
const _m0 = __importStar(require("protobufjs/minimal"));
const helpers_1 = require("../../helpers");
exports.protobufPackage = "greenfield.sp";
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseQueryParamsResponse() {
    return {
        params: undefined
    };
}
exports.QueryParamsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: (0, helpers_1.isSet)(object.params) ? params_1.Params.fromJSON(object.params) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = object.params !== undefined && object.params !== null ? params_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            params: object.params ? params_1.Params.fromSDK(object.params) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toSDK(message.params) : undefined);
        return obj;
    }
};
function createBaseQueryStorageProvidersRequest() {
    return {
        pagination: undefined
    };
}
exports.QueryStorageProvidersRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStorageProvidersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryStorageProvidersRequest();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            pagination: object.pagination ? pagination_1.PageRequest.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryStorageProvidersResponse() {
    return {
        sps: [],
        pagination: undefined
    };
}
exports.QueryStorageProvidersResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.sps) {
            types_1.StorageProvider.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStorageProvidersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sps.push(types_1.StorageProvider.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sps: Array.isArray(object?.sps) ? object.sps.map((e) => types_1.StorageProvider.fromJSON(e)) : [],
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sps) {
            obj.sps = message.sps.map(e => e ? types_1.StorageProvider.toJSON(e) : undefined);
        }
        else {
            obj.sps = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryStorageProvidersResponse();
        message.sps = object.sps?.map(e => types_1.StorageProvider.fromPartial(e)) || [];
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            sps: Array.isArray(object?.sps) ? object.sps.map((e) => types_1.StorageProvider.fromSDK(e)) : [],
            pagination: object.pagination ? pagination_1.PageResponse.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.sps) {
            obj.sps = message.sps.map(e => e ? types_1.StorageProvider.toSDK(e) : undefined);
        }
        else {
            obj.sps = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryGetSpStoragePriceByTimeRequest() {
    return {
        spAddr: "",
        timestamp: helpers_1.Long.ZERO
    };
}
exports.QueryGetSpStoragePriceByTimeRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.spAddr !== "") {
            writer.uint32(10).string(message.spAddr);
        }
        if (!message.timestamp.isZero()) {
            writer.uint32(16).int64(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetSpStoragePriceByTimeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spAddr = reader.string();
                    break;
                case 2:
                    message.timestamp = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            spAddr: (0, helpers_1.isSet)(object.spAddr) ? String(object.spAddr) : "",
            timestamp: (0, helpers_1.isSet)(object.timestamp) ? helpers_1.Long.fromValue(object.timestamp) : helpers_1.Long.ZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.spAddr !== undefined && (obj.spAddr = message.spAddr);
        message.timestamp !== undefined && (obj.timestamp = (message.timestamp || helpers_1.Long.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGetSpStoragePriceByTimeRequest();
        message.spAddr = object.spAddr ?? "";
        message.timestamp = object.timestamp !== undefined && object.timestamp !== null ? helpers_1.Long.fromValue(object.timestamp) : helpers_1.Long.ZERO;
        return message;
    },
    fromSDK(object) {
        return {
            spAddr: object?.sp_addr,
            timestamp: object?.timestamp
        };
    },
    toSDK(message) {
        const obj = {};
        obj.sp_addr = message.spAddr;
        obj.timestamp = message.timestamp;
        return obj;
    }
};
function createBaseQueryGetSpStoragePriceByTimeResponse() {
    return {
        spStoragePrice: undefined
    };
}
exports.QueryGetSpStoragePriceByTimeResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.spStoragePrice !== undefined) {
            types_1.SpStoragePrice.encode(message.spStoragePrice, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetSpStoragePriceByTimeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spStoragePrice = types_1.SpStoragePrice.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            spStoragePrice: (0, helpers_1.isSet)(object.spStoragePrice) ? types_1.SpStoragePrice.fromJSON(object.spStoragePrice) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.spStoragePrice !== undefined && (obj.spStoragePrice = message.spStoragePrice ? types_1.SpStoragePrice.toJSON(message.spStoragePrice) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGetSpStoragePriceByTimeResponse();
        message.spStoragePrice = object.spStoragePrice !== undefined && object.spStoragePrice !== null ? types_1.SpStoragePrice.fromPartial(object.spStoragePrice) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            spStoragePrice: object.sp_storage_price ? types_1.SpStoragePrice.fromSDK(object.sp_storage_price) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.spStoragePrice !== undefined && (obj.sp_storage_price = message.spStoragePrice ? types_1.SpStoragePrice.toSDK(message.spStoragePrice) : undefined);
        return obj;
    }
};
function createBaseQueryGetSecondarySpStorePriceByTimeRequest() {
    return {
        timestamp: helpers_1.Long.ZERO
    };
}
exports.QueryGetSecondarySpStorePriceByTimeRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.timestamp.isZero()) {
            writer.uint32(8).int64(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetSecondarySpStorePriceByTimeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.timestamp = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            timestamp: (0, helpers_1.isSet)(object.timestamp) ? helpers_1.Long.fromValue(object.timestamp) : helpers_1.Long.ZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.timestamp !== undefined && (obj.timestamp = (message.timestamp || helpers_1.Long.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGetSecondarySpStorePriceByTimeRequest();
        message.timestamp = object.timestamp !== undefined && object.timestamp !== null ? helpers_1.Long.fromValue(object.timestamp) : helpers_1.Long.ZERO;
        return message;
    },
    fromSDK(object) {
        return {
            timestamp: object?.timestamp
        };
    },
    toSDK(message) {
        const obj = {};
        obj.timestamp = message.timestamp;
        return obj;
    }
};
function createBaseQueryGetSecondarySpStorePriceByTimeResponse() {
    return {
        secondarySpStorePrice: undefined
    };
}
exports.QueryGetSecondarySpStorePriceByTimeResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.secondarySpStorePrice !== undefined) {
            types_1.SecondarySpStorePrice.encode(message.secondarySpStorePrice, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetSecondarySpStorePriceByTimeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.secondarySpStorePrice = types_1.SecondarySpStorePrice.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            secondarySpStorePrice: (0, helpers_1.isSet)(object.secondarySpStorePrice) ? types_1.SecondarySpStorePrice.fromJSON(object.secondarySpStorePrice) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.secondarySpStorePrice !== undefined && (obj.secondarySpStorePrice = message.secondarySpStorePrice ? types_1.SecondarySpStorePrice.toJSON(message.secondarySpStorePrice) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGetSecondarySpStorePriceByTimeResponse();
        message.secondarySpStorePrice = object.secondarySpStorePrice !== undefined && object.secondarySpStorePrice !== null ? types_1.SecondarySpStorePrice.fromPartial(object.secondarySpStorePrice) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            secondarySpStorePrice: object.secondary_sp_store_price ? types_1.SecondarySpStorePrice.fromSDK(object.secondary_sp_store_price) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.secondarySpStorePrice !== undefined && (obj.secondary_sp_store_price = message.secondarySpStorePrice ? types_1.SecondarySpStorePrice.toSDK(message.secondarySpStorePrice) : undefined);
        return obj;
    }
};
function createBaseQueryStorageProviderRequest() {
    return {
        spAddress: ""
    };
}
exports.QueryStorageProviderRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.spAddress !== "") {
            writer.uint32(10).string(message.spAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStorageProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            spAddress: (0, helpers_1.isSet)(object.spAddress) ? String(object.spAddress) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.spAddress !== undefined && (obj.spAddress = message.spAddress);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryStorageProviderRequest();
        message.spAddress = object.spAddress ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            spAddress: object?.spAddress
        };
    },
    toSDK(message) {
        const obj = {};
        obj.spAddress = message.spAddress;
        return obj;
    }
};
function createBaseQueryStorageProviderResponse() {
    return {
        storageProvider: undefined
    };
}
exports.QueryStorageProviderResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.storageProvider !== undefined) {
            types_1.StorageProvider.encode(message.storageProvider, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryStorageProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.storageProvider = types_1.StorageProvider.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            storageProvider: (0, helpers_1.isSet)(object.storageProvider) ? types_1.StorageProvider.fromJSON(object.storageProvider) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.storageProvider !== undefined && (obj.storageProvider = message.storageProvider ? types_1.StorageProvider.toJSON(message.storageProvider) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryStorageProviderResponse();
        message.storageProvider = object.storageProvider !== undefined && object.storageProvider !== null ? types_1.StorageProvider.fromPartial(object.storageProvider) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            storageProvider: object.storageProvider ? types_1.StorageProvider.fromSDK(object.storageProvider) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.storageProvider !== undefined && (obj.storageProvider = message.storageProvider ? types_1.StorageProvider.toSDK(message.storageProvider) : undefined);
        return obj;
    }
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.StorageProviders = this.StorageProviders.bind(this);
        this.QueryGetSpStoragePriceByTime = this.QueryGetSpStoragePriceByTime.bind(this);
        this.QueryGetSecondarySpStorePriceByTime = this.QueryGetSecondarySpStorePriceByTime.bind(this);
        this.StorageProvider = this.StorageProvider.bind(this);
    }
    Params(request = {}) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.sp.Query", "Params", data);
        return promise.then(data => exports.QueryParamsResponse.decode(new _m0.Reader(data)));
    }
    StorageProviders(request = {
        pagination: undefined
    }) {
        const data = exports.QueryStorageProvidersRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.sp.Query", "StorageProviders", data);
        return promise.then(data => exports.QueryStorageProvidersResponse.decode(new _m0.Reader(data)));
    }
    QueryGetSpStoragePriceByTime(request) {
        const data = exports.QueryGetSpStoragePriceByTimeRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.sp.Query", "QueryGetSpStoragePriceByTime", data);
        return promise.then(data => exports.QueryGetSpStoragePriceByTimeResponse.decode(new _m0.Reader(data)));
    }
    QueryGetSecondarySpStorePriceByTime(request) {
        const data = exports.QueryGetSecondarySpStorePriceByTimeRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.sp.Query", "QueryGetSecondarySpStorePriceByTime", data);
        return promise.then(data => exports.QueryGetSecondarySpStorePriceByTimeResponse.decode(new _m0.Reader(data)));
    }
    StorageProvider(request) {
        const data = exports.QueryStorageProviderRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.sp.Query", "StorageProvider", data);
        return promise.then(data => exports.QueryStorageProviderResponse.decode(new _m0.Reader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
//# sourceMappingURL=query.js.map