import { Params, ParamsSDKType } from "./params";
import { StorageProvider, StorageProviderSDKType, SpStoragePrice, SpStoragePriceSDKType } from "./types";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "greenfield.sp";
/** GenesisState defines the sp module's genesis state. */
export interface GenesisState {
    params?: Params;
    /** this used by starport scaffolding # genesis/proto/state */
    storageProviders: StorageProvider[];
    spStoragePriceList: SpStoragePrice[];
}
/** GenesisState defines the sp module's genesis state. */
export interface GenesisStateSDKType {
    params?: ParamsSDKType;
    storage_providers: StorageProviderSDKType[];
    sp_storage_price_list: SpStoragePriceSDKType[];
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    fromPartial<I extends {
        params?: {
            depositDenom?: string | undefined;
            minDeposit?: string | undefined;
            secondarySpStorePriceRatio?: string | undefined;
        } | undefined;
        storageProviders?: {
            operatorAddress?: string | undefined;
            fundingAddress?: string | undefined;
            sealAddress?: string | undefined;
            approvalAddress?: string | undefined;
            gcAddress?: string | undefined;
            totalDeposit?: string | undefined;
            status?: import("./types").Status | undefined;
            endpoint?: string | undefined;
            description?: {
                moniker?: string | undefined;
                identity?: string | undefined;
                website?: string | undefined;
                securityContact?: string | undefined;
                details?: string | undefined;
            } | undefined;
        }[] | undefined;
        spStoragePriceList?: {
            spAddress?: string | undefined;
            updateTimeSec?: string | number | import("long").Long | undefined;
            readPrice?: string | undefined;
            freeReadQuota?: string | number | import("long").Long | undefined;
            storePrice?: string | undefined;
        }[] | undefined;
    } & {
        params?: ({
            depositDenom?: string | undefined;
            minDeposit?: string | undefined;
            secondarySpStorePriceRatio?: string | undefined;
        } & {
            depositDenom?: string | undefined;
            minDeposit?: string | undefined;
            secondarySpStorePriceRatio?: string | undefined;
        } & Record<Exclude<keyof I["params"], keyof Params>, never>) | undefined;
        storageProviders?: ({
            operatorAddress?: string | undefined;
            fundingAddress?: string | undefined;
            sealAddress?: string | undefined;
            approvalAddress?: string | undefined;
            gcAddress?: string | undefined;
            totalDeposit?: string | undefined;
            status?: import("./types").Status | undefined;
            endpoint?: string | undefined;
            description?: {
                moniker?: string | undefined;
                identity?: string | undefined;
                website?: string | undefined;
                securityContact?: string | undefined;
                details?: string | undefined;
            } | undefined;
        }[] & ({
            operatorAddress?: string | undefined;
            fundingAddress?: string | undefined;
            sealAddress?: string | undefined;
            approvalAddress?: string | undefined;
            gcAddress?: string | undefined;
            totalDeposit?: string | undefined;
            status?: import("./types").Status | undefined;
            endpoint?: string | undefined;
            description?: {
                moniker?: string | undefined;
                identity?: string | undefined;
                website?: string | undefined;
                securityContact?: string | undefined;
                details?: string | undefined;
            } | undefined;
        } & {
            operatorAddress?: string | undefined;
            fundingAddress?: string | undefined;
            sealAddress?: string | undefined;
            approvalAddress?: string | undefined;
            gcAddress?: string | undefined;
            totalDeposit?: string | undefined;
            status?: import("./types").Status | undefined;
            endpoint?: string | undefined;
            description?: ({
                moniker?: string | undefined;
                identity?: string | undefined;
                website?: string | undefined;
                securityContact?: string | undefined;
                details?: string | undefined;
            } & {
                moniker?: string | undefined;
                identity?: string | undefined;
                website?: string | undefined;
                securityContact?: string | undefined;
                details?: string | undefined;
            } & Record<Exclude<keyof I["storageProviders"][number]["description"], keyof import("./types").Description>, never>) | undefined;
        } & Record<Exclude<keyof I["storageProviders"][number], keyof StorageProvider>, never>)[] & Record<Exclude<keyof I["storageProviders"], keyof {
            operatorAddress?: string | undefined;
            fundingAddress?: string | undefined;
            sealAddress?: string | undefined;
            approvalAddress?: string | undefined;
            gcAddress?: string | undefined;
            totalDeposit?: string | undefined;
            status?: import("./types").Status | undefined;
            endpoint?: string | undefined;
            description?: {
                moniker?: string | undefined;
                identity?: string | undefined;
                website?: string | undefined;
                securityContact?: string | undefined;
                details?: string | undefined;
            } | undefined;
        }[]>, never>) | undefined;
        spStoragePriceList?: ({
            spAddress?: string | undefined;
            updateTimeSec?: string | number | import("long").Long | undefined;
            readPrice?: string | undefined;
            freeReadQuota?: string | number | import("long").Long | undefined;
            storePrice?: string | undefined;
        }[] & ({
            spAddress?: string | undefined;
            updateTimeSec?: string | number | import("long").Long | undefined;
            readPrice?: string | undefined;
            freeReadQuota?: string | number | import("long").Long | undefined;
            storePrice?: string | undefined;
        } & {
            spAddress?: string | undefined;
            updateTimeSec?: string | number | (import("long").Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | import("long").Long) => import("long").Long;
                and: (other: string | number | import("long").Long) => import("long").Long;
                compare: (other: string | number | import("long").Long) => number;
                comp: (other: string | number | import("long").Long) => number;
                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                div: (divisor: string | number | import("long").Long) => import("long").Long;
                equals: (other: string | number | import("long").Long) => boolean;
                eq: (other: string | number | import("long").Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | import("long").Long) => boolean;
                gt: (other: string | number | import("long").Long) => boolean;
                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                gte: (other: string | number | import("long").Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | import("long").Long) => boolean;
                lt: (other: string | number | import("long").Long) => boolean;
                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                lte: (other: string | number | import("long").Long) => boolean;
                modulo: (other: string | number | import("long").Long) => import("long").Long;
                mod: (other: string | number | import("long").Long) => import("long").Long;
                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                negate: () => import("long").Long;
                neg: () => import("long").Long;
                not: () => import("long").Long;
                notEquals: (other: string | number | import("long").Long) => boolean;
                neq: (other: string | number | import("long").Long) => boolean;
                or: (other: string | number | import("long").Long) => import("long").Long;
                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                shl: (numBits: number | import("long").Long) => import("long").Long;
                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                shr: (numBits: number | import("long").Long) => import("long").Long;
                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                shru: (numBits: number | import("long").Long) => import("long").Long;
                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => import("long").Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => import("long").Long;
                xor: (other: string | number | import("long").Long) => import("long").Long;
            } & Record<Exclude<keyof I["spStoragePriceList"][number]["updateTimeSec"], keyof import("long").Long>, never>) | undefined;
            readPrice?: string | undefined;
            freeReadQuota?: string | number | (import("long").Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | import("long").Long) => import("long").Long;
                and: (other: string | number | import("long").Long) => import("long").Long;
                compare: (other: string | number | import("long").Long) => number;
                comp: (other: string | number | import("long").Long) => number;
                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                div: (divisor: string | number | import("long").Long) => import("long").Long;
                equals: (other: string | number | import("long").Long) => boolean;
                eq: (other: string | number | import("long").Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | import("long").Long) => boolean;
                gt: (other: string | number | import("long").Long) => boolean;
                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                gte: (other: string | number | import("long").Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | import("long").Long) => boolean;
                lt: (other: string | number | import("long").Long) => boolean;
                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                lte: (other: string | number | import("long").Long) => boolean;
                modulo: (other: string | number | import("long").Long) => import("long").Long;
                mod: (other: string | number | import("long").Long) => import("long").Long;
                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                negate: () => import("long").Long;
                neg: () => import("long").Long;
                not: () => import("long").Long;
                notEquals: (other: string | number | import("long").Long) => boolean;
                neq: (other: string | number | import("long").Long) => boolean;
                or: (other: string | number | import("long").Long) => import("long").Long;
                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                shl: (numBits: number | import("long").Long) => import("long").Long;
                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                shr: (numBits: number | import("long").Long) => import("long").Long;
                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                shru: (numBits: number | import("long").Long) => import("long").Long;
                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => import("long").Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => import("long").Long;
                xor: (other: string | number | import("long").Long) => import("long").Long;
            } & Record<Exclude<keyof I["spStoragePriceList"][number]["freeReadQuota"], keyof import("long").Long>, never>) | undefined;
            storePrice?: string | undefined;
        } & Record<Exclude<keyof I["spStoragePriceList"][number], keyof SpStoragePrice>, never>)[] & Record<Exclude<keyof I["spStoragePriceList"], keyof {
            spAddress?: string | undefined;
            updateTimeSec?: string | number | import("long").Long | undefined;
            readPrice?: string | undefined;
            freeReadQuota?: string | number | import("long").Long | undefined;
            storePrice?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof GenesisState>, never>>(object: I): GenesisState;
    fromSDK(object: GenesisStateSDKType): GenesisState;
    toSDK(message: GenesisState): GenesisStateSDKType;
};
