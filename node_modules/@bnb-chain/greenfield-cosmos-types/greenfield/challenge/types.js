"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttestedChallengeIds = exports.Challenge = exports.Slash = exports.voteResultToJSON = exports.voteResultFromJSON = exports.VoteResultSDKType = exports.VoteResult = exports.protobufPackage = void 0;
/* eslint-disable */
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "greenfield.challenge";
/** VoteResult defines the result attestation for a challenge. */
var VoteResult;
(function (VoteResult) {
    /** CHALLENGE_FAILED - The challenge failed. */
    VoteResult[VoteResult["CHALLENGE_FAILED"] = 0] = "CHALLENGE_FAILED";
    /** CHALLENGE_SUCCEED - The challenge succeed. */
    VoteResult[VoteResult["CHALLENGE_SUCCEED"] = 1] = "CHALLENGE_SUCCEED";
    VoteResult[VoteResult["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(VoteResult = exports.VoteResult || (exports.VoteResult = {}));
exports.VoteResultSDKType = VoteResult;
function voteResultFromJSON(object) {
    switch (object) {
        case 0:
        case "CHALLENGE_FAILED":
            return VoteResult.CHALLENGE_FAILED;
        case 1:
        case "CHALLENGE_SUCCEED":
            return VoteResult.CHALLENGE_SUCCEED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return VoteResult.UNRECOGNIZED;
    }
}
exports.voteResultFromJSON = voteResultFromJSON;
function voteResultToJSON(object) {
    switch (object) {
        case VoteResult.CHALLENGE_FAILED:
            return "CHALLENGE_FAILED";
        case VoteResult.CHALLENGE_SUCCEED:
            return "CHALLENGE_SUCCEED";
        case VoteResult.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.voteResultToJSON = voteResultToJSON;
function createBaseSlash() {
    return {
        spOperatorAddress: new Uint8Array(),
        objectId: "",
        height: helpers_1.Long.UZERO
    };
}
exports.Slash = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.spOperatorAddress.length !== 0) {
            writer.uint32(10).bytes(message.spOperatorAddress);
        }
        if (message.objectId !== "") {
            writer.uint32(18).string(message.objectId);
        }
        if (!message.height.isZero()) {
            writer.uint32(24).uint64(message.height);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSlash();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spOperatorAddress = reader.bytes();
                    break;
                case 2:
                    message.objectId = reader.string();
                    break;
                case 3:
                    message.height = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            spOperatorAddress: (0, helpers_1.isSet)(object.spOperatorAddress) ? (0, helpers_1.bytesFromBase64)(object.spOperatorAddress) : new Uint8Array(),
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : "",
            height: (0, helpers_1.isSet)(object.height) ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.spOperatorAddress !== undefined && (obj.spOperatorAddress = (0, helpers_1.base64FromBytes)(message.spOperatorAddress !== undefined ? message.spOperatorAddress : new Uint8Array()));
        message.objectId !== undefined && (obj.objectId = message.objectId);
        message.height !== undefined && (obj.height = (message.height || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSlash();
        message.spOperatorAddress = object.spOperatorAddress ?? new Uint8Array();
        message.objectId = object.objectId ?? "";
        message.height = object.height !== undefined && object.height !== null ? helpers_1.Long.fromValue(object.height) : helpers_1.Long.UZERO;
        return message;
    },
    fromSDK(object) {
        return {
            spOperatorAddress: object?.sp_operator_address,
            objectId: object?.object_id,
            height: object?.height
        };
    },
    toSDK(message) {
        const obj = {};
        obj.sp_operator_address = message.spOperatorAddress;
        obj.object_id = message.objectId;
        obj.height = message.height;
        return obj;
    }
};
function createBaseChallenge() {
    return {
        id: helpers_1.Long.UZERO,
        expiredHeight: helpers_1.Long.UZERO
    };
}
exports.Challenge = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.id.isZero()) {
            writer.uint32(8).uint64(message.id);
        }
        if (!message.expiredHeight.isZero()) {
            writer.uint32(16).uint64(message.expiredHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChallenge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.expiredHeight = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: (0, helpers_1.isSet)(object.id) ? helpers_1.Long.fromValue(object.id) : helpers_1.Long.UZERO,
            expiredHeight: (0, helpers_1.isSet)(object.expiredHeight) ? helpers_1.Long.fromValue(object.expiredHeight) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = (message.id || helpers_1.Long.UZERO).toString());
        message.expiredHeight !== undefined && (obj.expiredHeight = (message.expiredHeight || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseChallenge();
        message.id = object.id !== undefined && object.id !== null ? helpers_1.Long.fromValue(object.id) : helpers_1.Long.UZERO;
        message.expiredHeight = object.expiredHeight !== undefined && object.expiredHeight !== null ? helpers_1.Long.fromValue(object.expiredHeight) : helpers_1.Long.UZERO;
        return message;
    },
    fromSDK(object) {
        return {
            id: object?.id,
            expiredHeight: object?.expired_height
        };
    },
    toSDK(message) {
        const obj = {};
        obj.id = message.id;
        obj.expired_height = message.expiredHeight;
        return obj;
    }
};
function createBaseAttestedChallengeIds() {
    return {
        size: helpers_1.Long.UZERO,
        ids: [],
        cursor: helpers_1.Long.ZERO
    };
}
exports.AttestedChallengeIds = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.size.isZero()) {
            writer.uint32(8).uint64(message.size);
        }
        writer.uint32(18).fork();
        for (const v of message.ids) {
            writer.uint64(v);
        }
        writer.ldelim();
        if (!message.cursor.isZero()) {
            writer.uint32(24).int64(message.cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAttestedChallengeIds();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.size = reader.uint64();
                    break;
                case 2:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.ids.push(reader.uint64());
                        }
                    }
                    else {
                        message.ids.push(reader.uint64());
                    }
                    break;
                case 3:
                    message.cursor = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            size: (0, helpers_1.isSet)(object.size) ? helpers_1.Long.fromValue(object.size) : helpers_1.Long.UZERO,
            ids: Array.isArray(object?.ids) ? object.ids.map((e) => helpers_1.Long.fromValue(e)) : [],
            cursor: (0, helpers_1.isSet)(object.cursor) ? helpers_1.Long.fromValue(object.cursor) : helpers_1.Long.ZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.size !== undefined && (obj.size = (message.size || helpers_1.Long.UZERO).toString());
        if (message.ids) {
            obj.ids = message.ids.map(e => (e || helpers_1.Long.UZERO).toString());
        }
        else {
            obj.ids = [];
        }
        message.cursor !== undefined && (obj.cursor = (message.cursor || helpers_1.Long.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseAttestedChallengeIds();
        message.size = object.size !== undefined && object.size !== null ? helpers_1.Long.fromValue(object.size) : helpers_1.Long.UZERO;
        message.ids = object.ids?.map(e => helpers_1.Long.fromValue(e)) || [];
        message.cursor = object.cursor !== undefined && object.cursor !== null ? helpers_1.Long.fromValue(object.cursor) : helpers_1.Long.ZERO;
        return message;
    },
    fromSDK(object) {
        return {
            size: object?.size,
            ids: Array.isArray(object?.ids) ? object.ids.map((e) => e) : [],
            cursor: object?.cursor
        };
    },
    toSDK(message) {
        const obj = {};
        obj.size = message.size;
        if (message.ids) {
            obj.ids = message.ids.map(e => e);
        }
        else {
            obj.ids = [];
        }
        obj.cursor = message.cursor;
        return obj;
    }
};
//# sourceMappingURL=types.js.map