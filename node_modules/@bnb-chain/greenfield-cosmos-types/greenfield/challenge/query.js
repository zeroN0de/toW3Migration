"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.SubmitInterval = exports.QueryInturnAttestationSubmitterResponse = exports.QueryInturnAttestationSubmitterRequest = exports.QueryLatestAttestedChallengesResponse = exports.QueryLatestAttestedChallengesRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const params_1 = require("./params");
const _m0 = __importStar(require("protobufjs/minimal"));
const helpers_1 = require("../../helpers");
exports.protobufPackage = "greenfield.challenge";
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseQueryParamsResponse() {
    return {
        params: undefined
    };
}
exports.QueryParamsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: (0, helpers_1.isSet)(object.params) ? params_1.Params.fromJSON(object.params) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = object.params !== undefined && object.params !== null ? params_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            params: object.params ? params_1.Params.fromSDK(object.params) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toSDK(message.params) : undefined);
        return obj;
    }
};
function createBaseQueryLatestAttestedChallengesRequest() {
    return {};
}
exports.QueryLatestAttestedChallengesRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLatestAttestedChallengesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryLatestAttestedChallengesRequest();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseQueryLatestAttestedChallengesResponse() {
    return {
        challengeIds: []
    };
}
exports.QueryLatestAttestedChallengesResponse = {
    encode(message, writer = _m0.Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.challengeIds) {
            writer.uint64(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLatestAttestedChallengesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.challengeIds.push(reader.uint64());
                        }
                    }
                    else {
                        message.challengeIds.push(reader.uint64());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            challengeIds: Array.isArray(object?.challengeIds) ? object.challengeIds.map((e) => helpers_1.Long.fromValue(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.challengeIds) {
            obj.challengeIds = message.challengeIds.map(e => (e || helpers_1.Long.UZERO).toString());
        }
        else {
            obj.challengeIds = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryLatestAttestedChallengesResponse();
        message.challengeIds = object.challengeIds?.map(e => helpers_1.Long.fromValue(e)) || [];
        return message;
    },
    fromSDK(object) {
        return {
            challengeIds: Array.isArray(object?.challengeIds) ? object.challengeIds.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.challengeIds) {
            obj.challengeIds = message.challengeIds.map(e => e);
        }
        else {
            obj.challengeIds = [];
        }
        return obj;
    }
};
function createBaseQueryInturnAttestationSubmitterRequest() {
    return {};
}
exports.QueryInturnAttestationSubmitterRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryInturnAttestationSubmitterRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryInturnAttestationSubmitterRequest();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseQueryInturnAttestationSubmitterResponse() {
    return {
        blsPubKey: "",
        submitInterval: undefined
    };
}
exports.QueryInturnAttestationSubmitterResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.blsPubKey !== "") {
            writer.uint32(10).string(message.blsPubKey);
        }
        if (message.submitInterval !== undefined) {
            exports.SubmitInterval.encode(message.submitInterval, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryInturnAttestationSubmitterResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.blsPubKey = reader.string();
                    break;
                case 2:
                    message.submitInterval = exports.SubmitInterval.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            blsPubKey: (0, helpers_1.isSet)(object.blsPubKey) ? String(object.blsPubKey) : "",
            submitInterval: (0, helpers_1.isSet)(object.submitInterval) ? exports.SubmitInterval.fromJSON(object.submitInterval) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.blsPubKey !== undefined && (obj.blsPubKey = message.blsPubKey);
        message.submitInterval !== undefined && (obj.submitInterval = message.submitInterval ? exports.SubmitInterval.toJSON(message.submitInterval) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryInturnAttestationSubmitterResponse();
        message.blsPubKey = object.blsPubKey ?? "";
        message.submitInterval = object.submitInterval !== undefined && object.submitInterval !== null ? exports.SubmitInterval.fromPartial(object.submitInterval) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            blsPubKey: object?.bls_pub_key,
            submitInterval: object.submit_interval ? exports.SubmitInterval.fromSDK(object.submit_interval) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        obj.bls_pub_key = message.blsPubKey;
        message.submitInterval !== undefined && (obj.submit_interval = message.submitInterval ? exports.SubmitInterval.toSDK(message.submitInterval) : undefined);
        return obj;
    }
};
function createBaseSubmitInterval() {
    return {
        start: helpers_1.Long.UZERO,
        end: helpers_1.Long.UZERO
    };
}
exports.SubmitInterval = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.start.isZero()) {
            writer.uint32(8).uint64(message.start);
        }
        if (!message.end.isZero()) {
            writer.uint32(16).uint64(message.end);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubmitInterval();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.start = reader.uint64();
                    break;
                case 2:
                    message.end = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            start: (0, helpers_1.isSet)(object.start) ? helpers_1.Long.fromValue(object.start) : helpers_1.Long.UZERO,
            end: (0, helpers_1.isSet)(object.end) ? helpers_1.Long.fromValue(object.end) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.start !== undefined && (obj.start = (message.start || helpers_1.Long.UZERO).toString());
        message.end !== undefined && (obj.end = (message.end || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSubmitInterval();
        message.start = object.start !== undefined && object.start !== null ? helpers_1.Long.fromValue(object.start) : helpers_1.Long.UZERO;
        message.end = object.end !== undefined && object.end !== null ? helpers_1.Long.fromValue(object.end) : helpers_1.Long.UZERO;
        return message;
    },
    fromSDK(object) {
        return {
            start: object?.start,
            end: object?.end
        };
    },
    toSDK(message) {
        const obj = {};
        obj.start = message.start;
        obj.end = message.end;
        return obj;
    }
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.LatestAttestedChallenges = this.LatestAttestedChallenges.bind(this);
        this.InturnAttestationSubmitter = this.InturnAttestationSubmitter.bind(this);
    }
    Params(request = {}) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.challenge.Query", "Params", data);
        return promise.then(data => exports.QueryParamsResponse.decode(new _m0.Reader(data)));
    }
    LatestAttestedChallenges(request = {}) {
        const data = exports.QueryLatestAttestedChallengesRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.challenge.Query", "LatestAttestedChallenges", data);
        return promise.then(data => exports.QueryLatestAttestedChallengesResponse.decode(new _m0.Reader(data)));
    }
    InturnAttestationSubmitter(request = {}) {
        const data = exports.QueryInturnAttestationSubmitterRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.challenge.Query", "InturnAttestationSubmitter", data);
        return promise.then(data => exports.QueryInturnAttestationSubmitterResponse.decode(new _m0.Reader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
//# sourceMappingURL=query.js.map