"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Principal = exports.Statement = exports.principalTypeToJSON = exports.principalTypeFromJSON = exports.PrincipalTypeSDKType = exports.PrincipalType = exports.effectToJSON = exports.effectFromJSON = exports.EffectSDKType = exports.Effect = exports.actionTypeToJSON = exports.actionTypeFromJSON = exports.ActionTypeSDKType = exports.ActionType = exports.protobufPackage = void 0;
/* eslint-disable */
const timestamp_1 = require("../../google/protobuf/timestamp");
const wrapper_1 = require("../common/wrapper");
const _m0 = __importStar(require("protobufjs/minimal"));
const helpers_1 = require("../../helpers");
exports.protobufPackage = "greenfield.permission";
/** ActionType defines the operations you can execute in greenfield storage network */
var ActionType;
(function (ActionType) {
    ActionType[ActionType["ACTION_UNSPECIFIED"] = 0] = "ACTION_UNSPECIFIED";
    ActionType[ActionType["ACTION_UPDATE_BUCKET_INFO"] = 1] = "ACTION_UPDATE_BUCKET_INFO";
    ActionType[ActionType["ACTION_DELETE_BUCKET"] = 2] = "ACTION_DELETE_BUCKET";
    ActionType[ActionType["ACTION_CREATE_OBJECT"] = 3] = "ACTION_CREATE_OBJECT";
    ActionType[ActionType["ACTION_DELETE_OBJECT"] = 4] = "ACTION_DELETE_OBJECT";
    ActionType[ActionType["ACTION_COPY_OBJECT"] = 5] = "ACTION_COPY_OBJECT";
    ActionType[ActionType["ACTION_GET_OBJECT"] = 6] = "ACTION_GET_OBJECT";
    ActionType[ActionType["ACTION_EXECUTE_OBJECT"] = 7] = "ACTION_EXECUTE_OBJECT";
    ActionType[ActionType["ACTION_LIST_OBJECT"] = 8] = "ACTION_LIST_OBJECT";
    ActionType[ActionType["ACTION_UPDATE_GROUP_MEMBER"] = 9] = "ACTION_UPDATE_GROUP_MEMBER";
    ActionType[ActionType["ACTION_DELETE_GROUP"] = 10] = "ACTION_DELETE_GROUP";
    ActionType[ActionType["ACTION_UPDATE_OBJECT_INFO"] = 11] = "ACTION_UPDATE_OBJECT_INFO";
    ActionType[ActionType["ACTION_TYPE_ALL"] = 99] = "ACTION_TYPE_ALL";
    ActionType[ActionType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ActionType = exports.ActionType || (exports.ActionType = {}));
exports.ActionTypeSDKType = ActionType;
function actionTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "ACTION_UNSPECIFIED":
            return ActionType.ACTION_UNSPECIFIED;
        case 1:
        case "ACTION_UPDATE_BUCKET_INFO":
            return ActionType.ACTION_UPDATE_BUCKET_INFO;
        case 2:
        case "ACTION_DELETE_BUCKET":
            return ActionType.ACTION_DELETE_BUCKET;
        case 3:
        case "ACTION_CREATE_OBJECT":
            return ActionType.ACTION_CREATE_OBJECT;
        case 4:
        case "ACTION_DELETE_OBJECT":
            return ActionType.ACTION_DELETE_OBJECT;
        case 5:
        case "ACTION_COPY_OBJECT":
            return ActionType.ACTION_COPY_OBJECT;
        case 6:
        case "ACTION_GET_OBJECT":
            return ActionType.ACTION_GET_OBJECT;
        case 7:
        case "ACTION_EXECUTE_OBJECT":
            return ActionType.ACTION_EXECUTE_OBJECT;
        case 8:
        case "ACTION_LIST_OBJECT":
            return ActionType.ACTION_LIST_OBJECT;
        case 9:
        case "ACTION_UPDATE_GROUP_MEMBER":
            return ActionType.ACTION_UPDATE_GROUP_MEMBER;
        case 10:
        case "ACTION_DELETE_GROUP":
            return ActionType.ACTION_DELETE_GROUP;
        case 11:
        case "ACTION_UPDATE_OBJECT_INFO":
            return ActionType.ACTION_UPDATE_OBJECT_INFO;
        case 99:
        case "ACTION_TYPE_ALL":
            return ActionType.ACTION_TYPE_ALL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ActionType.UNRECOGNIZED;
    }
}
exports.actionTypeFromJSON = actionTypeFromJSON;
function actionTypeToJSON(object) {
    switch (object) {
        case ActionType.ACTION_UNSPECIFIED:
            return "ACTION_UNSPECIFIED";
        case ActionType.ACTION_UPDATE_BUCKET_INFO:
            return "ACTION_UPDATE_BUCKET_INFO";
        case ActionType.ACTION_DELETE_BUCKET:
            return "ACTION_DELETE_BUCKET";
        case ActionType.ACTION_CREATE_OBJECT:
            return "ACTION_CREATE_OBJECT";
        case ActionType.ACTION_DELETE_OBJECT:
            return "ACTION_DELETE_OBJECT";
        case ActionType.ACTION_COPY_OBJECT:
            return "ACTION_COPY_OBJECT";
        case ActionType.ACTION_GET_OBJECT:
            return "ACTION_GET_OBJECT";
        case ActionType.ACTION_EXECUTE_OBJECT:
            return "ACTION_EXECUTE_OBJECT";
        case ActionType.ACTION_LIST_OBJECT:
            return "ACTION_LIST_OBJECT";
        case ActionType.ACTION_UPDATE_GROUP_MEMBER:
            return "ACTION_UPDATE_GROUP_MEMBER";
        case ActionType.ACTION_DELETE_GROUP:
            return "ACTION_DELETE_GROUP";
        case ActionType.ACTION_UPDATE_OBJECT_INFO:
            return "ACTION_UPDATE_OBJECT_INFO";
        case ActionType.ACTION_TYPE_ALL:
            return "ACTION_TYPE_ALL";
        case ActionType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.actionTypeToJSON = actionTypeToJSON;
/** Effect define the effect of the operation permission, include Allow or deny */
var Effect;
(function (Effect) {
    Effect[Effect["EFFECT_UNSPECIFIED"] = 0] = "EFFECT_UNSPECIFIED";
    Effect[Effect["EFFECT_ALLOW"] = 1] = "EFFECT_ALLOW";
    Effect[Effect["EFFECT_DENY"] = 2] = "EFFECT_DENY";
    Effect[Effect["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Effect = exports.Effect || (exports.Effect = {}));
exports.EffectSDKType = Effect;
function effectFromJSON(object) {
    switch (object) {
        case 0:
        case "EFFECT_UNSPECIFIED":
            return Effect.EFFECT_UNSPECIFIED;
        case 1:
        case "EFFECT_ALLOW":
            return Effect.EFFECT_ALLOW;
        case 2:
        case "EFFECT_DENY":
            return Effect.EFFECT_DENY;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Effect.UNRECOGNIZED;
    }
}
exports.effectFromJSON = effectFromJSON;
function effectToJSON(object) {
    switch (object) {
        case Effect.EFFECT_UNSPECIFIED:
            return "EFFECT_UNSPECIFIED";
        case Effect.EFFECT_ALLOW:
            return "EFFECT_ALLOW";
        case Effect.EFFECT_DENY:
            return "EFFECT_DENY";
        case Effect.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.effectToJSON = effectToJSON;
/**
 * PrincipalType refers to the identity type of system users or entities.
 * In Greenfield, it usually refers to accounts or groups.
 */
var PrincipalType;
(function (PrincipalType) {
    PrincipalType[PrincipalType["PRINCIPAL_TYPE_UNSPECIFIED"] = 0] = "PRINCIPAL_TYPE_UNSPECIFIED";
    PrincipalType[PrincipalType["PRINCIPAL_TYPE_GNFD_ACCOUNT"] = 1] = "PRINCIPAL_TYPE_GNFD_ACCOUNT";
    PrincipalType[PrincipalType["PRINCIPAL_TYPE_GNFD_GROUP"] = 2] = "PRINCIPAL_TYPE_GNFD_GROUP";
    PrincipalType[PrincipalType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PrincipalType = exports.PrincipalType || (exports.PrincipalType = {}));
exports.PrincipalTypeSDKType = PrincipalType;
function principalTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "PRINCIPAL_TYPE_UNSPECIFIED":
            return PrincipalType.PRINCIPAL_TYPE_UNSPECIFIED;
        case 1:
        case "PRINCIPAL_TYPE_GNFD_ACCOUNT":
            return PrincipalType.PRINCIPAL_TYPE_GNFD_ACCOUNT;
        case 2:
        case "PRINCIPAL_TYPE_GNFD_GROUP":
            return PrincipalType.PRINCIPAL_TYPE_GNFD_GROUP;
        case -1:
        case "UNRECOGNIZED":
        default:
            return PrincipalType.UNRECOGNIZED;
    }
}
exports.principalTypeFromJSON = principalTypeFromJSON;
function principalTypeToJSON(object) {
    switch (object) {
        case PrincipalType.PRINCIPAL_TYPE_UNSPECIFIED:
            return "PRINCIPAL_TYPE_UNSPECIFIED";
        case PrincipalType.PRINCIPAL_TYPE_GNFD_ACCOUNT:
            return "PRINCIPAL_TYPE_GNFD_ACCOUNT";
        case PrincipalType.PRINCIPAL_TYPE_GNFD_GROUP:
            return "PRINCIPAL_TYPE_GNFD_GROUP";
        case PrincipalType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.principalTypeToJSON = principalTypeToJSON;
function createBaseStatement() {
    return {
        effect: 0,
        actions: [],
        resources: [],
        expirationTime: undefined,
        limitSize: undefined
    };
}
exports.Statement = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.effect !== 0) {
            writer.uint32(8).int32(message.effect);
        }
        writer.uint32(18).fork();
        for (const v of message.actions) {
            writer.int32(v);
        }
        writer.ldelim();
        for (const v of message.resources) {
            writer.uint32(26).string(v);
        }
        if (message.expirationTime !== undefined) {
            timestamp_1.Timestamp.encode(message.expirationTime, writer.uint32(34).fork()).ldelim();
        }
        if (message.limitSize !== undefined) {
            wrapper_1.UInt64Value.encode(message.limitSize, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStatement();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.effect = reader.int32();
                    break;
                case 2:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.actions.push(reader.int32());
                        }
                    }
                    else {
                        message.actions.push(reader.int32());
                    }
                    break;
                case 3:
                    message.resources.push(reader.string());
                    break;
                case 4:
                    message.expirationTime = timestamp_1.Timestamp.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.limitSize = wrapper_1.UInt64Value.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            effect: (0, helpers_1.isSet)(object.effect) ? effectFromJSON(object.effect) : 0,
            actions: Array.isArray(object?.actions) ? object.actions.map((e) => actionTypeFromJSON(e)) : [],
            resources: Array.isArray(object?.resources) ? object.resources.map((e) => String(e)) : [],
            expirationTime: (0, helpers_1.isSet)(object.expirationTime) ? (0, helpers_1.fromJsonTimestamp)(object.expirationTime) : undefined,
            limitSize: (0, helpers_1.isSet)(object.limitSize) ? wrapper_1.UInt64Value.fromJSON(object.limitSize) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.effect !== undefined && (obj.effect = effectToJSON(message.effect));
        if (message.actions) {
            obj.actions = message.actions.map(e => actionTypeToJSON(e));
        }
        else {
            obj.actions = [];
        }
        if (message.resources) {
            obj.resources = message.resources.map(e => e);
        }
        else {
            obj.resources = [];
        }
        message.expirationTime !== undefined && (obj.expirationTime = (0, helpers_1.fromTimestamp)(message.expirationTime).toISOString());
        message.limitSize !== undefined && (obj.limitSize = message.limitSize ? wrapper_1.UInt64Value.toJSON(message.limitSize) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseStatement();
        message.effect = object.effect ?? 0;
        message.actions = object.actions?.map(e => e) || [];
        message.resources = object.resources?.map(e => e) || [];
        message.expirationTime = object.expirationTime !== undefined && object.expirationTime !== null ? timestamp_1.Timestamp.fromPartial(object.expirationTime) : undefined;
        message.limitSize = object.limitSize !== undefined && object.limitSize !== null ? wrapper_1.UInt64Value.fromPartial(object.limitSize) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            effect: (0, helpers_1.isSet)(object.effect) ? effectFromJSON(object.effect) : 0,
            actions: Array.isArray(object?.actions) ? object.actions.map((e) => actionTypeFromJSON(e)) : [],
            resources: Array.isArray(object?.resources) ? object.resources.map((e) => e) : [],
            expirationTime: object.expiration_time ? timestamp_1.Timestamp.fromSDK(object.expiration_time) : undefined,
            limitSize: object.limit_size ? wrapper_1.UInt64Value.fromSDK(object.limit_size) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.effect !== undefined && (obj.effect = effectToJSON(message.effect));
        if (message.actions) {
            obj.actions = message.actions.map(e => actionTypeToJSON(e));
        }
        else {
            obj.actions = [];
        }
        if (message.resources) {
            obj.resources = message.resources.map(e => e);
        }
        else {
            obj.resources = [];
        }
        message.expirationTime !== undefined && (obj.expiration_time = message.expirationTime ? timestamp_1.Timestamp.toSDK(message.expirationTime) : undefined);
        message.limitSize !== undefined && (obj.limit_size = message.limitSize ? wrapper_1.UInt64Value.toSDK(message.limitSize) : undefined);
        return obj;
    }
};
function createBasePrincipal() {
    return {
        type: 0,
        value: ""
    };
}
exports.Principal = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePrincipal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.type = reader.int32();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: (0, helpers_1.isSet)(object.type) ? principalTypeFromJSON(object.type) : 0,
            value: (0, helpers_1.isSet)(object.value) ? String(object.value) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.type !== undefined && (obj.type = principalTypeToJSON(message.type));
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        const message = createBasePrincipal();
        message.type = object.type ?? 0;
        message.value = object.value ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            type: (0, helpers_1.isSet)(object.type) ? principalTypeFromJSON(object.type) : 0,
            value: object?.value
        };
    },
    toSDK(message) {
        const obj = {};
        message.type !== undefined && (obj.type = principalTypeToJSON(message.type));
        obj.value = message.value;
        return obj;
    }
};
//# sourceMappingURL=common.js.map