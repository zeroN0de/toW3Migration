import { Principal, PrincipalSDKType, Statement, StatementSDKType } from "./common";
import { ResourceType } from "../resource/types";
import { Timestamp, TimestampSDKType } from "../../google/protobuf/timestamp";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "greenfield.permission";
export interface EventPutPolicy {
    /** policy_id is an unique u256 sequence for each policy. It also be used as NFT tokenID */
    policyId: string;
    /** principal defines the accounts/group which the permission grants to */
    principal?: Principal;
    /** resource_type defines the type of resource that grants permission for */
    resourceType: ResourceType;
    /** resource_id defines the bucket/object/group id of the resource that grants permission for */
    resourceId: string;
    /** statements defines the details content of the permission, include effect/actions/sub-resources */
    statements: Statement[];
    /**
     * expiration_time defines the whole expiration time of all the statements.
     * Notices: Its priority is higher than the expiration time inside the Statement
     */
    expirationTime?: Timestamp;
}
export interface EventPutPolicySDKType {
    policy_id: string;
    principal?: PrincipalSDKType;
    resource_type: ResourceType;
    resource_id: string;
    statements: StatementSDKType[];
    expiration_time?: TimestampSDKType;
}
export interface EventDeletePolicy {
    /** policy_id is an unique u256 sequence for each policy. It also be used as NFT tokenID */
    policyId: string;
}
export interface EventDeletePolicySDKType {
    policy_id: string;
}
export declare const EventPutPolicy: {
    encode(message: EventPutPolicy, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventPutPolicy;
    fromJSON(object: any): EventPutPolicy;
    toJSON(message: EventPutPolicy): unknown;
    fromPartial<I extends {
        policyId?: string | undefined;
        principal?: {
            type?: import("./common").PrincipalType | undefined;
            value?: string | undefined;
        } | undefined;
        resourceType?: ResourceType | undefined;
        resourceId?: string | undefined;
        statements?: {
            effect?: import("./common").Effect | undefined;
            actions?: import("./common").ActionType[] | undefined;
            resources?: string[] | undefined;
            expirationTime?: {
                seconds?: string | number | import("long").Long | undefined;
                nanos?: number | undefined;
            } | undefined;
            limitSize?: {
                value?: string | number | import("long").Long | undefined;
            } | undefined;
        }[] | undefined;
        expirationTime?: {
            seconds?: string | number | import("long").Long | undefined;
            nanos?: number | undefined;
        } | undefined;
    } & {
        policyId?: string | undefined;
        principal?: ({
            type?: import("./common").PrincipalType | undefined;
            value?: string | undefined;
        } & {
            type?: import("./common").PrincipalType | undefined;
            value?: string | undefined;
        } & Record<Exclude<keyof I["principal"], keyof Principal>, never>) | undefined;
        resourceType?: ResourceType | undefined;
        resourceId?: string | undefined;
        statements?: ({
            effect?: import("./common").Effect | undefined;
            actions?: import("./common").ActionType[] | undefined;
            resources?: string[] | undefined;
            expirationTime?: {
                seconds?: string | number | import("long").Long | undefined;
                nanos?: number | undefined;
            } | undefined;
            limitSize?: {
                value?: string | number | import("long").Long | undefined;
            } | undefined;
        }[] & ({
            effect?: import("./common").Effect | undefined;
            actions?: import("./common").ActionType[] | undefined;
            resources?: string[] | undefined;
            expirationTime?: {
                seconds?: string | number | import("long").Long | undefined;
                nanos?: number | undefined;
            } | undefined;
            limitSize?: {
                value?: string | number | import("long").Long | undefined;
            } | undefined;
        } & {
            effect?: import("./common").Effect | undefined;
            actions?: (import("./common").ActionType[] & import("./common").ActionType[] & Record<Exclude<keyof I["statements"][number]["actions"], keyof import("./common").ActionType[]>, never>) | undefined;
            resources?: (string[] & string[] & Record<Exclude<keyof I["statements"][number]["resources"], keyof string[]>, never>) | undefined;
            expirationTime?: ({
                seconds?: string | number | import("long").Long | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: string | number | (import("long").Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | import("long").Long) => import("long").Long;
                    and: (other: string | number | import("long").Long) => import("long").Long;
                    compare: (other: string | number | import("long").Long) => number;
                    comp: (other: string | number | import("long").Long) => number;
                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                    equals: (other: string | number | import("long").Long) => boolean;
                    eq: (other: string | number | import("long").Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | import("long").Long) => boolean;
                    gt: (other: string | number | import("long").Long) => boolean;
                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                    gte: (other: string | number | import("long").Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | import("long").Long) => boolean;
                    lt: (other: string | number | import("long").Long) => boolean;
                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                    lte: (other: string | number | import("long").Long) => boolean;
                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                    mod: (other: string | number | import("long").Long) => import("long").Long;
                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                    negate: () => import("long").Long;
                    neg: () => import("long").Long;
                    not: () => import("long").Long;
                    notEquals: (other: string | number | import("long").Long) => boolean;
                    neq: (other: string | number | import("long").Long) => boolean;
                    or: (other: string | number | import("long").Long) => import("long").Long;
                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                    shl: (numBits: number | import("long").Long) => import("long").Long;
                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                    shr: (numBits: number | import("long").Long) => import("long").Long;
                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                    shru: (numBits: number | import("long").Long) => import("long").Long;
                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => import("long").Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => import("long").Long;
                    xor: (other: string | number | import("long").Long) => import("long").Long;
                } & Record<Exclude<keyof I["statements"][number]["expirationTime"]["seconds"], keyof import("long").Long>, never>) | undefined;
                nanos?: number | undefined;
            } & Record<Exclude<keyof I["statements"][number]["expirationTime"], keyof Timestamp>, never>) | undefined;
            limitSize?: ({
                value?: string | number | import("long").Long | undefined;
            } & {
                value?: string | number | (import("long").Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | import("long").Long) => import("long").Long;
                    and: (other: string | number | import("long").Long) => import("long").Long;
                    compare: (other: string | number | import("long").Long) => number;
                    comp: (other: string | number | import("long").Long) => number;
                    divide: (divisor: string | number | import("long").Long) => import("long").Long;
                    div: (divisor: string | number | import("long").Long) => import("long").Long;
                    equals: (other: string | number | import("long").Long) => boolean;
                    eq: (other: string | number | import("long").Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | import("long").Long) => boolean;
                    gt: (other: string | number | import("long").Long) => boolean;
                    greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                    gte: (other: string | number | import("long").Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | import("long").Long) => boolean;
                    lt: (other: string | number | import("long").Long) => boolean;
                    lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                    lte: (other: string | number | import("long").Long) => boolean;
                    modulo: (other: string | number | import("long").Long) => import("long").Long;
                    mod: (other: string | number | import("long").Long) => import("long").Long;
                    multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                    mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                    negate: () => import("long").Long;
                    neg: () => import("long").Long;
                    not: () => import("long").Long;
                    notEquals: (other: string | number | import("long").Long) => boolean;
                    neq: (other: string | number | import("long").Long) => boolean;
                    or: (other: string | number | import("long").Long) => import("long").Long;
                    shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                    shl: (numBits: number | import("long").Long) => import("long").Long;
                    shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                    shr: (numBits: number | import("long").Long) => import("long").Long;
                    shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                    shru: (numBits: number | import("long").Long) => import("long").Long;
                    subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                    sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => import("long").Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => import("long").Long;
                    xor: (other: string | number | import("long").Long) => import("long").Long;
                } & Record<Exclude<keyof I["statements"][number]["limitSize"]["value"], keyof import("long").Long>, never>) | undefined;
            } & Record<Exclude<keyof I["statements"][number]["limitSize"], "value">, never>) | undefined;
        } & Record<Exclude<keyof I["statements"][number], keyof Statement>, never>)[] & Record<Exclude<keyof I["statements"], keyof {
            effect?: import("./common").Effect | undefined;
            actions?: import("./common").ActionType[] | undefined;
            resources?: string[] | undefined;
            expirationTime?: {
                seconds?: string | number | import("long").Long | undefined;
                nanos?: number | undefined;
            } | undefined;
            limitSize?: {
                value?: string | number | import("long").Long | undefined;
            } | undefined;
        }[]>, never>) | undefined;
        expirationTime?: ({
            seconds?: string | number | import("long").Long | undefined;
            nanos?: number | undefined;
        } & {
            seconds?: string | number | (import("long").Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | import("long").Long) => import("long").Long;
                and: (other: string | number | import("long").Long) => import("long").Long;
                compare: (other: string | number | import("long").Long) => number;
                comp: (other: string | number | import("long").Long) => number;
                divide: (divisor: string | number | import("long").Long) => import("long").Long;
                div: (divisor: string | number | import("long").Long) => import("long").Long;
                equals: (other: string | number | import("long").Long) => boolean;
                eq: (other: string | number | import("long").Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | import("long").Long) => boolean;
                gt: (other: string | number | import("long").Long) => boolean;
                greaterThanOrEqual: (other: string | number | import("long").Long) => boolean;
                gte: (other: string | number | import("long").Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | import("long").Long) => boolean;
                lt: (other: string | number | import("long").Long) => boolean;
                lessThanOrEqual: (other: string | number | import("long").Long) => boolean;
                lte: (other: string | number | import("long").Long) => boolean;
                modulo: (other: string | number | import("long").Long) => import("long").Long;
                mod: (other: string | number | import("long").Long) => import("long").Long;
                multiply: (multiplier: string | number | import("long").Long) => import("long").Long;
                mul: (multiplier: string | number | import("long").Long) => import("long").Long;
                negate: () => import("long").Long;
                neg: () => import("long").Long;
                not: () => import("long").Long;
                notEquals: (other: string | number | import("long").Long) => boolean;
                neq: (other: string | number | import("long").Long) => boolean;
                or: (other: string | number | import("long").Long) => import("long").Long;
                shiftLeft: (numBits: number | import("long").Long) => import("long").Long;
                shl: (numBits: number | import("long").Long) => import("long").Long;
                shiftRight: (numBits: number | import("long").Long) => import("long").Long;
                shr: (numBits: number | import("long").Long) => import("long").Long;
                shiftRightUnsigned: (numBits: number | import("long").Long) => import("long").Long;
                shru: (numBits: number | import("long").Long) => import("long").Long;
                subtract: (subtrahend: string | number | import("long").Long) => import("long").Long;
                sub: (subtrahend: string | number | import("long").Long) => import("long").Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => import("long").Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => import("long").Long;
                xor: (other: string | number | import("long").Long) => import("long").Long;
            } & Record<Exclude<keyof I["expirationTime"]["seconds"], keyof import("long").Long>, never>) | undefined;
            nanos?: number | undefined;
        } & Record<Exclude<keyof I["expirationTime"], keyof Timestamp>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof EventPutPolicy>, never>>(object: I): EventPutPolicy;
    fromSDK(object: EventPutPolicySDKType): EventPutPolicy;
    toSDK(message: EventPutPolicy): EventPutPolicySDKType;
};
export declare const EventDeletePolicy: {
    encode(message: EventDeletePolicy, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventDeletePolicy;
    fromJSON(object: any): EventDeletePolicy;
    toJSON(message: EventDeletePolicy): unknown;
    fromPartial<I extends {
        policyId?: string | undefined;
    } & {
        policyId?: string | undefined;
    } & Record<Exclude<keyof I, "policyId">, never>>(object: I): EventDeletePolicy;
    fromSDK(object: EventDeletePolicySDKType): EventDeletePolicy;
    toSDK(message: EventDeletePolicy): EventDeletePolicySDKType;
};
