"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupMember = exports.PolicyGroup_Item = exports.PolicyGroup = exports.Policy = exports.protobufPackage = void 0;
/* eslint-disable */
const common_1 = require("./common");
const types_1 = require("../resource/types");
const timestamp_1 = require("../../google/protobuf/timestamp");
const _m0 = __importStar(require("protobufjs/minimal"));
const helpers_1 = require("../../helpers");
exports.protobufPackage = "greenfield.permission";
function createBasePolicy() {
    return {
        id: "",
        principal: undefined,
        resourceType: 0,
        resourceId: "",
        statements: [],
        expirationTime: undefined
    };
}
exports.Policy = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.principal !== undefined) {
            common_1.Principal.encode(message.principal, writer.uint32(18).fork()).ldelim();
        }
        if (message.resourceType !== 0) {
            writer.uint32(24).int32(message.resourceType);
        }
        if (message.resourceId !== "") {
            writer.uint32(34).string(message.resourceId);
        }
        for (const v of message.statements) {
            common_1.Statement.encode(v, writer.uint32(42).fork()).ldelim();
        }
        if (message.expirationTime !== undefined) {
            timestamp_1.Timestamp.encode(message.expirationTime, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePolicy();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.principal = common_1.Principal.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.resourceType = reader.int32();
                    break;
                case 4:
                    message.resourceId = reader.string();
                    break;
                case 5:
                    message.statements.push(common_1.Statement.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.expirationTime = timestamp_1.Timestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: (0, helpers_1.isSet)(object.id) ? String(object.id) : "",
            principal: (0, helpers_1.isSet)(object.principal) ? common_1.Principal.fromJSON(object.principal) : undefined,
            resourceType: (0, helpers_1.isSet)(object.resourceType) ? (0, types_1.resourceTypeFromJSON)(object.resourceType) : 0,
            resourceId: (0, helpers_1.isSet)(object.resourceId) ? String(object.resourceId) : "",
            statements: Array.isArray(object?.statements) ? object.statements.map((e) => common_1.Statement.fromJSON(e)) : [],
            expirationTime: (0, helpers_1.isSet)(object.expirationTime) ? (0, helpers_1.fromJsonTimestamp)(object.expirationTime) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.principal !== undefined && (obj.principal = message.principal ? common_1.Principal.toJSON(message.principal) : undefined);
        message.resourceType !== undefined && (obj.resourceType = (0, types_1.resourceTypeToJSON)(message.resourceType));
        message.resourceId !== undefined && (obj.resourceId = message.resourceId);
        if (message.statements) {
            obj.statements = message.statements.map(e => e ? common_1.Statement.toJSON(e) : undefined);
        }
        else {
            obj.statements = [];
        }
        message.expirationTime !== undefined && (obj.expirationTime = (0, helpers_1.fromTimestamp)(message.expirationTime).toISOString());
        return obj;
    },
    fromPartial(object) {
        const message = createBasePolicy();
        message.id = object.id ?? "";
        message.principal = object.principal !== undefined && object.principal !== null ? common_1.Principal.fromPartial(object.principal) : undefined;
        message.resourceType = object.resourceType ?? 0;
        message.resourceId = object.resourceId ?? "";
        message.statements = object.statements?.map(e => common_1.Statement.fromPartial(e)) || [];
        message.expirationTime = object.expirationTime !== undefined && object.expirationTime !== null ? timestamp_1.Timestamp.fromPartial(object.expirationTime) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            id: object?.id,
            principal: object.principal ? common_1.Principal.fromSDK(object.principal) : undefined,
            resourceType: (0, helpers_1.isSet)(object.resource_type) ? (0, types_1.resourceTypeFromJSON)(object.resource_type) : 0,
            resourceId: object?.resource_id,
            statements: Array.isArray(object?.statements) ? object.statements.map((e) => common_1.Statement.fromSDK(e)) : [],
            expirationTime: object.expiration_time ? timestamp_1.Timestamp.fromSDK(object.expiration_time) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        obj.id = message.id;
        message.principal !== undefined && (obj.principal = message.principal ? common_1.Principal.toSDK(message.principal) : undefined);
        message.resourceType !== undefined && (obj.resource_type = (0, types_1.resourceTypeToJSON)(message.resourceType));
        obj.resource_id = message.resourceId;
        if (message.statements) {
            obj.statements = message.statements.map(e => e ? common_1.Statement.toSDK(e) : undefined);
        }
        else {
            obj.statements = [];
        }
        message.expirationTime !== undefined && (obj.expiration_time = message.expirationTime ? timestamp_1.Timestamp.toSDK(message.expirationTime) : undefined);
        return obj;
    }
};
function createBasePolicyGroup() {
    return {
        items: []
    };
}
exports.PolicyGroup = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.items) {
            exports.PolicyGroup_Item.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePolicyGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.items.push(exports.PolicyGroup_Item.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            items: Array.isArray(object?.items) ? object.items.map((e) => exports.PolicyGroup_Item.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.items) {
            obj.items = message.items.map(e => e ? exports.PolicyGroup_Item.toJSON(e) : undefined);
        }
        else {
            obj.items = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBasePolicyGroup();
        message.items = object.items?.map(e => exports.PolicyGroup_Item.fromPartial(e)) || [];
        return message;
    },
    fromSDK(object) {
        return {
            items: Array.isArray(object?.items) ? object.items.map((e) => exports.PolicyGroup_Item.fromSDK(e)) : []
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.items) {
            obj.items = message.items.map(e => e ? exports.PolicyGroup_Item.toSDK(e) : undefined);
        }
        else {
            obj.items = [];
        }
        return obj;
    }
};
function createBasePolicyGroup_Item() {
    return {
        policyId: "",
        groupId: ""
    };
}
exports.PolicyGroup_Item = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.policyId !== "") {
            writer.uint32(10).string(message.policyId);
        }
        if (message.groupId !== "") {
            writer.uint32(18).string(message.groupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePolicyGroup_Item();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.policyId = reader.string();
                    break;
                case 2:
                    message.groupId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            policyId: (0, helpers_1.isSet)(object.policyId) ? String(object.policyId) : "",
            groupId: (0, helpers_1.isSet)(object.groupId) ? String(object.groupId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.policyId !== undefined && (obj.policyId = message.policyId);
        message.groupId !== undefined && (obj.groupId = message.groupId);
        return obj;
    },
    fromPartial(object) {
        const message = createBasePolicyGroup_Item();
        message.policyId = object.policyId ?? "";
        message.groupId = object.groupId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            policyId: object?.policy_id,
            groupId: object?.group_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.policy_id = message.policyId;
        obj.group_id = message.groupId;
        return obj;
    }
};
function createBaseGroupMember() {
    return {
        id: "",
        groupId: "",
        member: ""
    };
}
exports.GroupMember = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.groupId !== "") {
            writer.uint32(18).string(message.groupId);
        }
        if (message.member !== "") {
            writer.uint32(26).string(message.member);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupMember();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.groupId = reader.string();
                    break;
                case 3:
                    message.member = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: (0, helpers_1.isSet)(object.id) ? String(object.id) : "",
            groupId: (0, helpers_1.isSet)(object.groupId) ? String(object.groupId) : "",
            member: (0, helpers_1.isSet)(object.member) ? String(object.member) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.groupId !== undefined && (obj.groupId = message.groupId);
        message.member !== undefined && (obj.member = message.member);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGroupMember();
        message.id = object.id ?? "";
        message.groupId = object.groupId ?? "";
        message.member = object.member ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            id: object?.id,
            groupId: object?.group_id,
            member: object?.member
        };
    },
    toSDK(message) {
        const obj = {};
        obj.id = message.id;
        obj.group_id = message.groupId;
        obj.member = message.member;
        return obj;
    }
};
//# sourceMappingURL=types.js.map