"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgUpdateParamsResponse = exports.MsgUpdateParams = exports.MsgMirrorGroupResponse = exports.MsgMirrorGroup = exports.MsgMirrorBucketResponse = exports.MsgUpdateObjectInfo = exports.MsgUpdateObjectInfoResponse = exports.MsgMirrorBucket = exports.MsgMirrorObjectResponse = exports.MsgMirrorObject = exports.MsgDeletePolicyResponse = exports.MsgDeletePolicy = exports.MsgPutPolicyResponse = exports.MsgPutPolicy = exports.MsgCancelCreateObjectResponse = exports.MsgCancelCreateObject = exports.MsgUpdateBucketInfoResponse = exports.MsgUpdateBucketInfo = exports.MsgLeaveGroupResponse = exports.MsgLeaveGroup = exports.MsgUpdateGroupMemberResponse = exports.MsgUpdateGroupMember = exports.MsgDeleteGroupResponse = exports.MsgDeleteGroup = exports.MsgCreateGroupResponse = exports.MsgCreateGroup = exports.MsgDiscontinueObjectResponse = exports.MsgDiscontinueObject = exports.MsgDeleteObjectResponse = exports.MsgDeleteObject = exports.MsgCopyObjectResponse = exports.MsgCopyObject = exports.MsgRejectSealObjectResponse = exports.MsgRejectSealObject = exports.MsgSealObjectResponse = exports.MsgSealObject = exports.MsgCreateObjectResponse = exports.MsgCreateObject = exports.MsgDiscontinueBucketResponse = exports.MsgDiscontinueBucket = exports.MsgDeleteBucketResponse = exports.MsgDeleteBucket = exports.MsgCreateBucketResponse = exports.MsgCreateBucket = exports.protobufPackage = void 0;
/* eslint-disable */
const common_1 = require("./common");
const wrapper_1 = require("../common/wrapper");
const common_2 = require("../permission/common");
const timestamp_1 = require("../../google/protobuf/timestamp");
const params_1 = require("./params");
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "greenfield.storage";
function createBaseMsgCreateBucket() {
    return {
        creator: "",
        bucketName: "",
        visibility: 0,
        paymentAddress: "",
        primarySpAddress: "",
        primarySpApproval: undefined,
        chargedReadQuota: helpers_1.Long.UZERO
    };
}
exports.MsgCreateBucket = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.creator !== "") {
            writer.uint32(10).string(message.creator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.visibility !== 0) {
            writer.uint32(24).int32(message.visibility);
        }
        if (message.paymentAddress !== "") {
            writer.uint32(34).string(message.paymentAddress);
        }
        if (message.primarySpAddress !== "") {
            writer.uint32(50).string(message.primarySpAddress);
        }
        if (message.primarySpApproval !== undefined) {
            common_1.Approval.encode(message.primarySpApproval, writer.uint32(58).fork()).ldelim();
        }
        if (!message.chargedReadQuota.isZero()) {
            writer.uint32(64).uint64(message.chargedReadQuota);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateBucket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.creator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.visibility = reader.int32();
                    break;
                case 4:
                    message.paymentAddress = reader.string();
                    break;
                case 6:
                    message.primarySpAddress = reader.string();
                    break;
                case 7:
                    message.primarySpApproval = common_1.Approval.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.chargedReadQuota = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator: (0, helpers_1.isSet)(object.creator) ? String(object.creator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : 0,
            paymentAddress: (0, helpers_1.isSet)(object.paymentAddress) ? String(object.paymentAddress) : "",
            primarySpAddress: (0, helpers_1.isSet)(object.primarySpAddress) ? String(object.primarySpAddress) : "",
            primarySpApproval: (0, helpers_1.isSet)(object.primarySpApproval) ? common_1.Approval.fromJSON(object.primarySpApproval) : undefined,
            chargedReadQuota: (0, helpers_1.isSet)(object.chargedReadQuota) ? helpers_1.Long.fromValue(object.chargedReadQuota) : helpers_1.Long.UZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.creator !== undefined && (obj.creator = message.creator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        message.paymentAddress !== undefined && (obj.paymentAddress = message.paymentAddress);
        message.primarySpAddress !== undefined && (obj.primarySpAddress = message.primarySpAddress);
        message.primarySpApproval !== undefined && (obj.primarySpApproval = message.primarySpApproval ? common_1.Approval.toJSON(message.primarySpApproval) : undefined);
        message.chargedReadQuota !== undefined && (obj.chargedReadQuota = (message.chargedReadQuota || helpers_1.Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgCreateBucket();
        message.creator = object.creator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.visibility = object.visibility ?? 0;
        message.paymentAddress = object.paymentAddress ?? "";
        message.primarySpAddress = object.primarySpAddress ?? "";
        message.primarySpApproval = object.primarySpApproval !== undefined && object.primarySpApproval !== null ? common_1.Approval.fromPartial(object.primarySpApproval) : undefined;
        message.chargedReadQuota = object.chargedReadQuota !== undefined && object.chargedReadQuota !== null ? helpers_1.Long.fromValue(object.chargedReadQuota) : helpers_1.Long.UZERO;
        return message;
    },
    fromSDK(object) {
        return {
            creator: object?.creator,
            bucketName: object?.bucket_name,
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : 0,
            paymentAddress: object?.payment_address,
            primarySpAddress: object?.primary_sp_address,
            primarySpApproval: object.primary_sp_approval ? common_1.Approval.fromSDK(object.primary_sp_approval) : undefined,
            chargedReadQuota: object?.charged_read_quota
        };
    },
    toSDK(message) {
        const obj = {};
        obj.creator = message.creator;
        obj.bucket_name = message.bucketName;
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        obj.payment_address = message.paymentAddress;
        obj.primary_sp_address = message.primarySpAddress;
        message.primarySpApproval !== undefined && (obj.primary_sp_approval = message.primarySpApproval ? common_1.Approval.toSDK(message.primarySpApproval) : undefined);
        obj.charged_read_quota = message.chargedReadQuota;
        return obj;
    }
};
function createBaseMsgCreateBucketResponse() {
    return {
        bucketId: ""
    };
}
exports.MsgCreateBucketResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.bucketId !== "") {
            writer.uint32(10).string(message.bucketId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateBucketResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bucketId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgCreateBucketResponse();
        message.bucketId = object.bucketId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            bucketId: object?.bucket_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.bucket_id = message.bucketId;
        return obj;
    }
};
function createBaseMsgDeleteBucket() {
    return {
        operator: "",
        bucketName: ""
    };
}
exports.MsgDeleteBucket = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeleteBucket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgDeleteBucket();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        return obj;
    }
};
function createBaseMsgDeleteBucketResponse() {
    return {};
}
exports.MsgDeleteBucketResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeleteBucketResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgDeleteBucketResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgDiscontinueBucket() {
    return {
        operator: "",
        bucketName: "",
        reason: ""
    };
}
exports.MsgDiscontinueBucket = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.reason !== "") {
            writer.uint32(26).string(message.reason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDiscontinueBucket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            reason: (0, helpers_1.isSet)(object.reason) ? String(object.reason) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.reason !== undefined && (obj.reason = message.reason);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgDiscontinueBucket();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.reason = object.reason ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            reason: object?.reason
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.reason = message.reason;
        return obj;
    }
};
function createBaseMsgDiscontinueBucketResponse() {
    return {};
}
exports.MsgDiscontinueBucketResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDiscontinueBucketResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgDiscontinueBucketResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgCreateObject() {
    return {
        creator: "",
        bucketName: "",
        objectName: "",
        payloadSize: helpers_1.Long.UZERO,
        visibility: 0,
        contentType: "",
        primarySpApproval: undefined,
        expectChecksums: [],
        redundancyType: 0,
        expectSecondarySpAddresses: []
    };
}
exports.MsgCreateObject = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.creator !== "") {
            writer.uint32(10).string(message.creator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        if (!message.payloadSize.isZero()) {
            writer.uint32(32).uint64(message.payloadSize);
        }
        if (message.visibility !== 0) {
            writer.uint32(40).int32(message.visibility);
        }
        if (message.contentType !== "") {
            writer.uint32(50).string(message.contentType);
        }
        if (message.primarySpApproval !== undefined) {
            common_1.Approval.encode(message.primarySpApproval, writer.uint32(58).fork()).ldelim();
        }
        for (const v of message.expectChecksums) {
            writer.uint32(66).bytes(v);
        }
        if (message.redundancyType !== 0) {
            writer.uint32(72).int32(message.redundancyType);
        }
        for (const v of message.expectSecondarySpAddresses) {
            writer.uint32(82).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.creator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                case 4:
                    message.payloadSize = reader.uint64();
                    break;
                case 5:
                    message.visibility = reader.int32();
                    break;
                case 6:
                    message.contentType = reader.string();
                    break;
                case 7:
                    message.primarySpApproval = common_1.Approval.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.expectChecksums.push(reader.bytes());
                    break;
                case 9:
                    message.redundancyType = reader.int32();
                    break;
                case 10:
                    message.expectSecondarySpAddresses.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator: (0, helpers_1.isSet)(object.creator) ? String(object.creator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            payloadSize: (0, helpers_1.isSet)(object.payloadSize) ? helpers_1.Long.fromValue(object.payloadSize) : helpers_1.Long.UZERO,
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : 0,
            contentType: (0, helpers_1.isSet)(object.contentType) ? String(object.contentType) : "",
            primarySpApproval: (0, helpers_1.isSet)(object.primarySpApproval) ? common_1.Approval.fromJSON(object.primarySpApproval) : undefined,
            expectChecksums: Array.isArray(object?.expectChecksums) ? object.expectChecksums.map((e) => (0, helpers_1.bytesFromBase64)(e)) : [],
            redundancyType: (0, helpers_1.isSet)(object.redundancyType) ? (0, common_1.redundancyTypeFromJSON)(object.redundancyType) : 0,
            expectSecondarySpAddresses: Array.isArray(object?.expectSecondarySpAddresses) ? object.expectSecondarySpAddresses.map((e) => String(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.creator !== undefined && (obj.creator = message.creator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.payloadSize !== undefined && (obj.payloadSize = (message.payloadSize || helpers_1.Long.UZERO).toString());
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        message.contentType !== undefined && (obj.contentType = message.contentType);
        message.primarySpApproval !== undefined && (obj.primarySpApproval = message.primarySpApproval ? common_1.Approval.toJSON(message.primarySpApproval) : undefined);
        if (message.expectChecksums) {
            obj.expectChecksums = message.expectChecksums.map(e => (0, helpers_1.base64FromBytes)(e !== undefined ? e : new Uint8Array()));
        }
        else {
            obj.expectChecksums = [];
        }
        message.redundancyType !== undefined && (obj.redundancyType = (0, common_1.redundancyTypeToJSON)(message.redundancyType));
        if (message.expectSecondarySpAddresses) {
            obj.expectSecondarySpAddresses = message.expectSecondarySpAddresses.map(e => e);
        }
        else {
            obj.expectSecondarySpAddresses = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgCreateObject();
        message.creator = object.creator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.payloadSize = object.payloadSize !== undefined && object.payloadSize !== null ? helpers_1.Long.fromValue(object.payloadSize) : helpers_1.Long.UZERO;
        message.visibility = object.visibility ?? 0;
        message.contentType = object.contentType ?? "";
        message.primarySpApproval = object.primarySpApproval !== undefined && object.primarySpApproval !== null ? common_1.Approval.fromPartial(object.primarySpApproval) : undefined;
        message.expectChecksums = object.expectChecksums?.map(e => e) || [];
        message.redundancyType = object.redundancyType ?? 0;
        message.expectSecondarySpAddresses = object.expectSecondarySpAddresses?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            creator: object?.creator,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            payloadSize: object?.payload_size,
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : 0,
            contentType: object?.content_type,
            primarySpApproval: object.primary_sp_approval ? common_1.Approval.fromSDK(object.primary_sp_approval) : undefined,
            expectChecksums: Array.isArray(object?.expect_checksums) ? object.expect_checksums.map((e) => e) : [],
            redundancyType: (0, helpers_1.isSet)(object.redundancy_type) ? (0, common_1.redundancyTypeFromJSON)(object.redundancy_type) : 0,
            expectSecondarySpAddresses: Array.isArray(object?.expect_secondary_sp_addresses) ? object.expect_secondary_sp_addresses.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.creator = message.creator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.payload_size = message.payloadSize;
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        obj.content_type = message.contentType;
        message.primarySpApproval !== undefined && (obj.primary_sp_approval = message.primarySpApproval ? common_1.Approval.toSDK(message.primarySpApproval) : undefined);
        if (message.expectChecksums) {
            obj.expect_checksums = message.expectChecksums.map(e => e);
        }
        else {
            obj.expect_checksums = [];
        }
        message.redundancyType !== undefined && (obj.redundancy_type = (0, common_1.redundancyTypeToJSON)(message.redundancyType));
        if (message.expectSecondarySpAddresses) {
            obj.expect_secondary_sp_addresses = message.expectSecondarySpAddresses.map(e => e);
        }
        else {
            obj.expect_secondary_sp_addresses = [];
        }
        return obj;
    }
};
function createBaseMsgCreateObjectResponse() {
    return {
        objectId: ""
    };
}
exports.MsgCreateObjectResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.objectId !== "") {
            writer.uint32(10).string(message.objectId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateObjectResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.objectId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.objectId !== undefined && (obj.objectId = message.objectId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgCreateObjectResponse();
        message.objectId = object.objectId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            objectId: object?.object_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.object_id = message.objectId;
        return obj;
    }
};
function createBaseMsgSealObject() {
    return {
        operator: "",
        bucketName: "",
        objectName: "",
        secondarySpAddresses: [],
        secondarySpSignatures: []
    };
}
exports.MsgSealObject = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        for (const v of message.secondarySpAddresses) {
            writer.uint32(34).string(v);
        }
        for (const v of message.secondarySpSignatures) {
            writer.uint32(42).bytes(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSealObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                case 4:
                    message.secondarySpAddresses.push(reader.string());
                    break;
                case 5:
                    message.secondarySpSignatures.push(reader.bytes());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            secondarySpAddresses: Array.isArray(object?.secondarySpAddresses) ? object.secondarySpAddresses.map((e) => String(e)) : [],
            secondarySpSignatures: Array.isArray(object?.secondarySpSignatures) ? object.secondarySpSignatures.map((e) => (0, helpers_1.bytesFromBase64)(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        if (message.secondarySpAddresses) {
            obj.secondarySpAddresses = message.secondarySpAddresses.map(e => e);
        }
        else {
            obj.secondarySpAddresses = [];
        }
        if (message.secondarySpSignatures) {
            obj.secondarySpSignatures = message.secondarySpSignatures.map(e => (0, helpers_1.base64FromBytes)(e !== undefined ? e : new Uint8Array()));
        }
        else {
            obj.secondarySpSignatures = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgSealObject();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.secondarySpAddresses = object.secondarySpAddresses?.map(e => e) || [];
        message.secondarySpSignatures = object.secondarySpSignatures?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            secondarySpAddresses: Array.isArray(object?.secondary_sp_addresses) ? object.secondary_sp_addresses.map((e) => e) : [],
            secondarySpSignatures: Array.isArray(object?.secondary_sp_signatures) ? object.secondary_sp_signatures.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        if (message.secondarySpAddresses) {
            obj.secondary_sp_addresses = message.secondarySpAddresses.map(e => e);
        }
        else {
            obj.secondary_sp_addresses = [];
        }
        if (message.secondarySpSignatures) {
            obj.secondary_sp_signatures = message.secondarySpSignatures.map(e => e);
        }
        else {
            obj.secondary_sp_signatures = [];
        }
        return obj;
    }
};
function createBaseMsgSealObjectResponse() {
    return {};
}
exports.MsgSealObjectResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSealObjectResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgSealObjectResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgRejectSealObject() {
    return {
        operator: "",
        bucketName: "",
        objectName: ""
    };
}
exports.MsgRejectSealObject = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRejectSealObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgRejectSealObject();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            objectName: object?.object_name
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        return obj;
    }
};
function createBaseMsgRejectSealObjectResponse() {
    return {};
}
exports.MsgRejectSealObjectResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRejectSealObjectResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgRejectSealObjectResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgCopyObject() {
    return {
        operator: "",
        srcBucketName: "",
        dstBucketName: "",
        srcObjectName: "",
        dstObjectName: "",
        dstPrimarySpApproval: undefined
    };
}
exports.MsgCopyObject = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.srcBucketName !== "") {
            writer.uint32(18).string(message.srcBucketName);
        }
        if (message.dstBucketName !== "") {
            writer.uint32(26).string(message.dstBucketName);
        }
        if (message.srcObjectName !== "") {
            writer.uint32(34).string(message.srcObjectName);
        }
        if (message.dstObjectName !== "") {
            writer.uint32(42).string(message.dstObjectName);
        }
        if (message.dstPrimarySpApproval !== undefined) {
            common_1.Approval.encode(message.dstPrimarySpApproval, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCopyObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.srcBucketName = reader.string();
                    break;
                case 3:
                    message.dstBucketName = reader.string();
                    break;
                case 4:
                    message.srcObjectName = reader.string();
                    break;
                case 5:
                    message.dstObjectName = reader.string();
                    break;
                case 6:
                    message.dstPrimarySpApproval = common_1.Approval.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            srcBucketName: (0, helpers_1.isSet)(object.srcBucketName) ? String(object.srcBucketName) : "",
            dstBucketName: (0, helpers_1.isSet)(object.dstBucketName) ? String(object.dstBucketName) : "",
            srcObjectName: (0, helpers_1.isSet)(object.srcObjectName) ? String(object.srcObjectName) : "",
            dstObjectName: (0, helpers_1.isSet)(object.dstObjectName) ? String(object.dstObjectName) : "",
            dstPrimarySpApproval: (0, helpers_1.isSet)(object.dstPrimarySpApproval) ? common_1.Approval.fromJSON(object.dstPrimarySpApproval) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.srcBucketName !== undefined && (obj.srcBucketName = message.srcBucketName);
        message.dstBucketName !== undefined && (obj.dstBucketName = message.dstBucketName);
        message.srcObjectName !== undefined && (obj.srcObjectName = message.srcObjectName);
        message.dstObjectName !== undefined && (obj.dstObjectName = message.dstObjectName);
        message.dstPrimarySpApproval !== undefined && (obj.dstPrimarySpApproval = message.dstPrimarySpApproval ? common_1.Approval.toJSON(message.dstPrimarySpApproval) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgCopyObject();
        message.operator = object.operator ?? "";
        message.srcBucketName = object.srcBucketName ?? "";
        message.dstBucketName = object.dstBucketName ?? "";
        message.srcObjectName = object.srcObjectName ?? "";
        message.dstObjectName = object.dstObjectName ?? "";
        message.dstPrimarySpApproval = object.dstPrimarySpApproval !== undefined && object.dstPrimarySpApproval !== null ? common_1.Approval.fromPartial(object.dstPrimarySpApproval) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            srcBucketName: object?.src_bucket_name,
            dstBucketName: object?.dst_bucket_name,
            srcObjectName: object?.src_object_name,
            dstObjectName: object?.dst_object_name,
            dstPrimarySpApproval: object.dst_primary_sp_approval ? common_1.Approval.fromSDK(object.dst_primary_sp_approval) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.src_bucket_name = message.srcBucketName;
        obj.dst_bucket_name = message.dstBucketName;
        obj.src_object_name = message.srcObjectName;
        obj.dst_object_name = message.dstObjectName;
        message.dstPrimarySpApproval !== undefined && (obj.dst_primary_sp_approval = message.dstPrimarySpApproval ? common_1.Approval.toSDK(message.dstPrimarySpApproval) : undefined);
        return obj;
    }
};
function createBaseMsgCopyObjectResponse() {
    return {
        objectId: ""
    };
}
exports.MsgCopyObjectResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.objectId !== "") {
            writer.uint32(10).string(message.objectId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCopyObjectResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.objectId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.objectId !== undefined && (obj.objectId = message.objectId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgCopyObjectResponse();
        message.objectId = object.objectId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            objectId: object?.object_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.object_id = message.objectId;
        return obj;
    }
};
function createBaseMsgDeleteObject() {
    return {
        operator: "",
        bucketName: "",
        objectName: ""
    };
}
exports.MsgDeleteObject = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeleteObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgDeleteObject();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            objectName: object?.object_name
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        return obj;
    }
};
function createBaseMsgDeleteObjectResponse() {
    return {};
}
exports.MsgDeleteObjectResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeleteObjectResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgDeleteObjectResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgDiscontinueObject() {
    return {
        operator: "",
        bucketName: "",
        objectIds: [],
        reason: ""
    };
}
exports.MsgDiscontinueObject = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        for (const v of message.objectIds) {
            writer.uint32(26).string(v);
        }
        if (message.reason !== "") {
            writer.uint32(34).string(message.reason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDiscontinueObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectIds.push(reader.string());
                    break;
                case 4:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectIds: Array.isArray(object?.objectIds) ? object.objectIds.map((e) => String(e)) : [],
            reason: (0, helpers_1.isSet)(object.reason) ? String(object.reason) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        if (message.objectIds) {
            obj.objectIds = message.objectIds.map(e => e);
        }
        else {
            obj.objectIds = [];
        }
        message.reason !== undefined && (obj.reason = message.reason);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgDiscontinueObject();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectIds = object.objectIds?.map(e => e) || [];
        message.reason = object.reason ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            objectIds: Array.isArray(object?.object_ids) ? object.object_ids.map((e) => e) : [],
            reason: object?.reason
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        if (message.objectIds) {
            obj.object_ids = message.objectIds.map(e => e);
        }
        else {
            obj.object_ids = [];
        }
        obj.reason = message.reason;
        return obj;
    }
};
function createBaseMsgDiscontinueObjectResponse() {
    return {};
}
exports.MsgDiscontinueObjectResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDiscontinueObjectResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgDiscontinueObjectResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgCreateGroup() {
    return {
        creator: "",
        groupName: "",
        members: []
    };
}
exports.MsgCreateGroup = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.creator !== "") {
            writer.uint32(10).string(message.creator);
        }
        if (message.groupName !== "") {
            writer.uint32(18).string(message.groupName);
        }
        for (const v of message.members) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.creator = reader.string();
                    break;
                case 2:
                    message.groupName = reader.string();
                    break;
                case 3:
                    message.members.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator: (0, helpers_1.isSet)(object.creator) ? String(object.creator) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : "",
            members: Array.isArray(object?.members) ? object.members.map((e) => String(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.creator !== undefined && (obj.creator = message.creator);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        if (message.members) {
            obj.members = message.members.map(e => e);
        }
        else {
            obj.members = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgCreateGroup();
        message.creator = object.creator ?? "";
        message.groupName = object.groupName ?? "";
        message.members = object.members?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            creator: object?.creator,
            groupName: object?.group_name,
            members: Array.isArray(object?.members) ? object.members.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.creator = message.creator;
        obj.group_name = message.groupName;
        if (message.members) {
            obj.members = message.members.map(e => e);
        }
        else {
            obj.members = [];
        }
        return obj;
    }
};
function createBaseMsgCreateGroupResponse() {
    return {
        groupId: ""
    };
}
exports.MsgCreateGroupResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.groupId !== "") {
            writer.uint32(10).string(message.groupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateGroupResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.groupId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            groupId: (0, helpers_1.isSet)(object.groupId) ? String(object.groupId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.groupId !== undefined && (obj.groupId = message.groupId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgCreateGroupResponse();
        message.groupId = object.groupId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            groupId: object?.group_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.group_id = message.groupId;
        return obj;
    }
};
function createBaseMsgDeleteGroup() {
    return {
        operator: "",
        groupName: ""
    };
}
exports.MsgDeleteGroup = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.groupName !== "") {
            writer.uint32(18).string(message.groupName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeleteGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.groupName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgDeleteGroup();
        message.operator = object.operator ?? "";
        message.groupName = object.groupName ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            groupName: object?.group_name
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.group_name = message.groupName;
        return obj;
    }
};
function createBaseMsgDeleteGroupResponse() {
    return {};
}
exports.MsgDeleteGroupResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeleteGroupResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgDeleteGroupResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgUpdateGroupMember() {
    return {
        operator: "",
        groupOwner: "",
        groupName: "",
        membersToAdd: [],
        membersToDelete: []
    };
}
exports.MsgUpdateGroupMember = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.groupOwner !== "") {
            writer.uint32(18).string(message.groupOwner);
        }
        if (message.groupName !== "") {
            writer.uint32(26).string(message.groupName);
        }
        for (const v of message.membersToAdd) {
            writer.uint32(34).string(v);
        }
        for (const v of message.membersToDelete) {
            writer.uint32(42).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateGroupMember();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.groupOwner = reader.string();
                    break;
                case 3:
                    message.groupName = reader.string();
                    break;
                case 4:
                    message.membersToAdd.push(reader.string());
                    break;
                case 5:
                    message.membersToDelete.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            groupOwner: (0, helpers_1.isSet)(object.groupOwner) ? String(object.groupOwner) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : "",
            membersToAdd: Array.isArray(object?.membersToAdd) ? object.membersToAdd.map((e) => String(e)) : [],
            membersToDelete: Array.isArray(object?.membersToDelete) ? object.membersToDelete.map((e) => String(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.groupOwner !== undefined && (obj.groupOwner = message.groupOwner);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        if (message.membersToAdd) {
            obj.membersToAdd = message.membersToAdd.map(e => e);
        }
        else {
            obj.membersToAdd = [];
        }
        if (message.membersToDelete) {
            obj.membersToDelete = message.membersToDelete.map(e => e);
        }
        else {
            obj.membersToDelete = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateGroupMember();
        message.operator = object.operator ?? "";
        message.groupOwner = object.groupOwner ?? "";
        message.groupName = object.groupName ?? "";
        message.membersToAdd = object.membersToAdd?.map(e => e) || [];
        message.membersToDelete = object.membersToDelete?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            groupOwner: object?.group_owner,
            groupName: object?.group_name,
            membersToAdd: Array.isArray(object?.members_to_add) ? object.members_to_add.map((e) => e) : [],
            membersToDelete: Array.isArray(object?.members_to_delete) ? object.members_to_delete.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.group_owner = message.groupOwner;
        obj.group_name = message.groupName;
        if (message.membersToAdd) {
            obj.members_to_add = message.membersToAdd.map(e => e);
        }
        else {
            obj.members_to_add = [];
        }
        if (message.membersToDelete) {
            obj.members_to_delete = message.membersToDelete.map(e => e);
        }
        else {
            obj.members_to_delete = [];
        }
        return obj;
    }
};
function createBaseMsgUpdateGroupMemberResponse() {
    return {};
}
exports.MsgUpdateGroupMemberResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateGroupMemberResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateGroupMemberResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgLeaveGroup() {
    return {
        member: "",
        groupOwner: "",
        groupName: ""
    };
}
exports.MsgLeaveGroup = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.member !== "") {
            writer.uint32(10).string(message.member);
        }
        if (message.groupOwner !== "") {
            writer.uint32(18).string(message.groupOwner);
        }
        if (message.groupName !== "") {
            writer.uint32(26).string(message.groupName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgLeaveGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.member = reader.string();
                    break;
                case 2:
                    message.groupOwner = reader.string();
                    break;
                case 3:
                    message.groupName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            member: (0, helpers_1.isSet)(object.member) ? String(object.member) : "",
            groupOwner: (0, helpers_1.isSet)(object.groupOwner) ? String(object.groupOwner) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.member !== undefined && (obj.member = message.member);
        message.groupOwner !== undefined && (obj.groupOwner = message.groupOwner);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgLeaveGroup();
        message.member = object.member ?? "";
        message.groupOwner = object.groupOwner ?? "";
        message.groupName = object.groupName ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            member: object?.member,
            groupOwner: object?.group_owner,
            groupName: object?.group_name
        };
    },
    toSDK(message) {
        const obj = {};
        obj.member = message.member;
        obj.group_owner = message.groupOwner;
        obj.group_name = message.groupName;
        return obj;
    }
};
function createBaseMsgLeaveGroupResponse() {
    return {};
}
exports.MsgLeaveGroupResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgLeaveGroupResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgLeaveGroupResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgUpdateBucketInfo() {
    return {
        operator: "",
        bucketName: "",
        chargedReadQuota: undefined,
        paymentAddress: "",
        visibility: 0
    };
}
exports.MsgUpdateBucketInfo = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.chargedReadQuota !== undefined) {
            wrapper_1.UInt64Value.encode(message.chargedReadQuota, writer.uint32(26).fork()).ldelim();
        }
        if (message.paymentAddress !== "") {
            writer.uint32(34).string(message.paymentAddress);
        }
        if (message.visibility !== 0) {
            writer.uint32(40).int32(message.visibility);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateBucketInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.chargedReadQuota = wrapper_1.UInt64Value.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.paymentAddress = reader.string();
                    break;
                case 5:
                    message.visibility = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            chargedReadQuota: (0, helpers_1.isSet)(object.chargedReadQuota) ? wrapper_1.UInt64Value.fromJSON(object.chargedReadQuota) : undefined,
            paymentAddress: (0, helpers_1.isSet)(object.paymentAddress) ? String(object.paymentAddress) : "",
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.chargedReadQuota !== undefined && (obj.chargedReadQuota = message.chargedReadQuota ? wrapper_1.UInt64Value.toJSON(message.chargedReadQuota) : undefined);
        message.paymentAddress !== undefined && (obj.paymentAddress = message.paymentAddress);
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateBucketInfo();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.chargedReadQuota = object.chargedReadQuota !== undefined && object.chargedReadQuota !== null ? wrapper_1.UInt64Value.fromPartial(object.chargedReadQuota) : undefined;
        message.paymentAddress = object.paymentAddress ?? "";
        message.visibility = object.visibility ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            chargedReadQuota: object.charged_read_quota ? wrapper_1.UInt64Value.fromSDK(object.charged_read_quota) : undefined,
            paymentAddress: object?.payment_address,
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : 0
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        message.chargedReadQuota !== undefined && (obj.charged_read_quota = message.chargedReadQuota ? wrapper_1.UInt64Value.toSDK(message.chargedReadQuota) : undefined);
        obj.payment_address = message.paymentAddress;
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        return obj;
    }
};
function createBaseMsgUpdateBucketInfoResponse() {
    return {};
}
exports.MsgUpdateBucketInfoResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateBucketInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateBucketInfoResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgCancelCreateObject() {
    return {
        operator: "",
        bucketName: "",
        objectName: ""
    };
}
exports.MsgCancelCreateObject = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCancelCreateObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgCancelCreateObject();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            objectName: object?.object_name
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        return obj;
    }
};
function createBaseMsgCancelCreateObjectResponse() {
    return {};
}
exports.MsgCancelCreateObjectResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCancelCreateObjectResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgCancelCreateObjectResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgPutPolicy() {
    return {
        operator: "",
        principal: undefined,
        resource: "",
        statements: [],
        expirationTime: undefined
    };
}
exports.MsgPutPolicy = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.principal !== undefined) {
            common_2.Principal.encode(message.principal, writer.uint32(18).fork()).ldelim();
        }
        if (message.resource !== "") {
            writer.uint32(26).string(message.resource);
        }
        for (const v of message.statements) {
            common_2.Statement.encode(v, writer.uint32(34).fork()).ldelim();
        }
        if (message.expirationTime !== undefined) {
            timestamp_1.Timestamp.encode(message.expirationTime, writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgPutPolicy();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.principal = common_2.Principal.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.resource = reader.string();
                    break;
                case 4:
                    message.statements.push(common_2.Statement.decode(reader, reader.uint32()));
                    break;
                case 7:
                    message.expirationTime = timestamp_1.Timestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            principal: (0, helpers_1.isSet)(object.principal) ? common_2.Principal.fromJSON(object.principal) : undefined,
            resource: (0, helpers_1.isSet)(object.resource) ? String(object.resource) : "",
            statements: Array.isArray(object?.statements) ? object.statements.map((e) => common_2.Statement.fromJSON(e)) : [],
            expirationTime: (0, helpers_1.isSet)(object.expirationTime) ? (0, helpers_1.fromJsonTimestamp)(object.expirationTime) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.principal !== undefined && (obj.principal = message.principal ? common_2.Principal.toJSON(message.principal) : undefined);
        message.resource !== undefined && (obj.resource = message.resource);
        if (message.statements) {
            obj.statements = message.statements.map(e => e ? common_2.Statement.toJSON(e) : undefined);
        }
        else {
            obj.statements = [];
        }
        message.expirationTime !== undefined && (obj.expirationTime = (0, helpers_1.fromTimestamp)(message.expirationTime).toISOString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgPutPolicy();
        message.operator = object.operator ?? "";
        message.principal = object.principal !== undefined && object.principal !== null ? common_2.Principal.fromPartial(object.principal) : undefined;
        message.resource = object.resource ?? "";
        message.statements = object.statements?.map(e => common_2.Statement.fromPartial(e)) || [];
        message.expirationTime = object.expirationTime !== undefined && object.expirationTime !== null ? timestamp_1.Timestamp.fromPartial(object.expirationTime) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            principal: object.principal ? common_2.Principal.fromSDK(object.principal) : undefined,
            resource: object?.resource,
            statements: Array.isArray(object?.statements) ? object.statements.map((e) => common_2.Statement.fromSDK(e)) : [],
            expirationTime: object.expiration_time ? timestamp_1.Timestamp.fromSDK(object.expiration_time) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        message.principal !== undefined && (obj.principal = message.principal ? common_2.Principal.toSDK(message.principal) : undefined);
        obj.resource = message.resource;
        if (message.statements) {
            obj.statements = message.statements.map(e => e ? common_2.Statement.toSDK(e) : undefined);
        }
        else {
            obj.statements = [];
        }
        message.expirationTime !== undefined && (obj.expiration_time = message.expirationTime ? timestamp_1.Timestamp.toSDK(message.expirationTime) : undefined);
        return obj;
    }
};
function createBaseMsgPutPolicyResponse() {
    return {
        policyId: ""
    };
}
exports.MsgPutPolicyResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.policyId !== "") {
            writer.uint32(34).string(message.policyId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgPutPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 4:
                    message.policyId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            policyId: (0, helpers_1.isSet)(object.policyId) ? String(object.policyId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.policyId !== undefined && (obj.policyId = message.policyId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgPutPolicyResponse();
        message.policyId = object.policyId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            policyId: object?.policy_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.policy_id = message.policyId;
        return obj;
    }
};
function createBaseMsgDeletePolicy() {
    return {
        operator: "",
        principal: undefined,
        resource: ""
    };
}
exports.MsgDeletePolicy = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.principal !== undefined) {
            common_2.Principal.encode(message.principal, writer.uint32(18).fork()).ldelim();
        }
        if (message.resource !== "") {
            writer.uint32(26).string(message.resource);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeletePolicy();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.principal = common_2.Principal.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.resource = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            principal: (0, helpers_1.isSet)(object.principal) ? common_2.Principal.fromJSON(object.principal) : undefined,
            resource: (0, helpers_1.isSet)(object.resource) ? String(object.resource) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.principal !== undefined && (obj.principal = message.principal ? common_2.Principal.toJSON(message.principal) : undefined);
        message.resource !== undefined && (obj.resource = message.resource);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgDeletePolicy();
        message.operator = object.operator ?? "";
        message.principal = object.principal !== undefined && object.principal !== null ? common_2.Principal.fromPartial(object.principal) : undefined;
        message.resource = object.resource ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            principal: object.principal ? common_2.Principal.fromSDK(object.principal) : undefined,
            resource: object?.resource
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        message.principal !== undefined && (obj.principal = message.principal ? common_2.Principal.toSDK(message.principal) : undefined);
        obj.resource = message.resource;
        return obj;
    }
};
function createBaseMsgDeletePolicyResponse() {
    return {
        policyId: ""
    };
}
exports.MsgDeletePolicyResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.policyId !== "") {
            writer.uint32(34).string(message.policyId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeletePolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 4:
                    message.policyId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            policyId: (0, helpers_1.isSet)(object.policyId) ? String(object.policyId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.policyId !== undefined && (obj.policyId = message.policyId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgDeletePolicyResponse();
        message.policyId = object.policyId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            policyId: object?.policy_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.policy_id = message.policyId;
        return obj;
    }
};
function createBaseMsgMirrorObject() {
    return {
        operator: "",
        id: ""
    };
}
exports.MsgMirrorObject = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgMirrorObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            id: (0, helpers_1.isSet)(object.id) ? String(object.id) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgMirrorObject();
        message.operator = object.operator ?? "";
        message.id = object.id ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            id: object?.id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.id = message.id;
        return obj;
    }
};
function createBaseMsgMirrorObjectResponse() {
    return {};
}
exports.MsgMirrorObjectResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgMirrorObjectResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgMirrorObjectResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgMirrorBucket() {
    return {
        operator: "",
        id: ""
    };
}
exports.MsgMirrorBucket = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgMirrorBucket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            id: (0, helpers_1.isSet)(object.id) ? String(object.id) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgMirrorBucket();
        message.operator = object.operator ?? "";
        message.id = object.id ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            id: object?.id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.id = message.id;
        return obj;
    }
};
function createBaseMsgUpdateObjectInfoResponse() {
    return {};
}
exports.MsgUpdateObjectInfoResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateObjectInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateObjectInfoResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgUpdateObjectInfo() {
    return {
        operator: "",
        bucketName: "",
        objectName: "",
        visibility: 0
    };
}
exports.MsgUpdateObjectInfo = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        if (message.visibility !== 0) {
            writer.uint32(32).int32(message.visibility);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateObjectInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                case 4:
                    message.visibility = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateObjectInfo();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.visibility = object.visibility ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : 0
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        return obj;
    }
};
function createBaseMsgMirrorBucketResponse() {
    return {};
}
exports.MsgMirrorBucketResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgMirrorBucketResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgMirrorBucketResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgMirrorGroup() {
    return {
        operator: "",
        id: ""
    };
}
exports.MsgMirrorGroup = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgMirrorGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            id: (0, helpers_1.isSet)(object.id) ? String(object.id) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgMirrorGroup();
        message.operator = object.operator ?? "";
        message.id = object.id ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            id: object?.id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.id = message.id;
        return obj;
    }
};
function createBaseMsgMirrorGroupResponse() {
    return {};
}
exports.MsgMirrorGroupResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgMirrorGroupResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgMirrorGroupResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseMsgUpdateParams() {
    return {
        authority: "",
        params: undefined
    };
}
exports.MsgUpdateParams = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.authority = reader.string();
                    break;
                case 2:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: (0, helpers_1.isSet)(object.authority) ? String(object.authority) : "",
            params: (0, helpers_1.isSet)(object.params) ? params_1.Params.fromJSON(object.params) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.authority !== undefined && (obj.authority = message.authority);
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateParams();
        message.authority = object.authority ?? "";
        message.params = object.params !== undefined && object.params !== null ? params_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            authority: object?.authority,
            params: object.params ? params_1.Params.fromSDK(object.params) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        obj.authority = message.authority;
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toSDK(message.params) : undefined);
        return obj;
    }
};
function createBaseMsgUpdateParamsResponse() {
    return {};
}
exports.MsgUpdateParamsResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateParamsResponse();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
class MsgClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.CreateBucket = this.CreateBucket.bind(this);
        this.DeleteBucket = this.DeleteBucket.bind(this);
        this.UpdateBucketInfo = this.UpdateBucketInfo.bind(this);
        this.MirrorBucket = this.MirrorBucket.bind(this);
        this.DiscontinueBucket = this.DiscontinueBucket.bind(this);
        this.CreateObject = this.CreateObject.bind(this);
        this.SealObject = this.SealObject.bind(this);
        this.RejectSealObject = this.RejectSealObject.bind(this);
        this.CopyObject = this.CopyObject.bind(this);
        this.DeleteObject = this.DeleteObject.bind(this);
        this.CancelCreateObject = this.CancelCreateObject.bind(this);
        this.MirrorObject = this.MirrorObject.bind(this);
        this.DiscontinueObject = this.DiscontinueObject.bind(this);
        this.UpdateObjectInfo = this.UpdateObjectInfo.bind(this);
        this.CreateGroup = this.CreateGroup.bind(this);
        this.DeleteGroup = this.DeleteGroup.bind(this);
        this.UpdateGroupMember = this.UpdateGroupMember.bind(this);
        this.LeaveGroup = this.LeaveGroup.bind(this);
        this.MirrorGroup = this.MirrorGroup.bind(this);
        this.PutPolicy = this.PutPolicy.bind(this);
        this.DeletePolicy = this.DeletePolicy.bind(this);
        this.UpdateParams = this.UpdateParams.bind(this);
    }
    CreateBucket(request) {
        const data = exports.MsgCreateBucket.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "CreateBucket", data);
        return promise.then(data => exports.MsgCreateBucketResponse.decode(new _m0.Reader(data)));
    }
    DeleteBucket(request) {
        const data = exports.MsgDeleteBucket.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "DeleteBucket", data);
        return promise.then(data => exports.MsgDeleteBucketResponse.decode(new _m0.Reader(data)));
    }
    UpdateBucketInfo(request) {
        const data = exports.MsgUpdateBucketInfo.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "UpdateBucketInfo", data);
        return promise.then(data => exports.MsgUpdateBucketInfoResponse.decode(new _m0.Reader(data)));
    }
    MirrorBucket(request) {
        const data = exports.MsgMirrorBucket.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "MirrorBucket", data);
        return promise.then(data => exports.MsgMirrorBucketResponse.decode(new _m0.Reader(data)));
    }
    DiscontinueBucket(request) {
        const data = exports.MsgDiscontinueBucket.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "DiscontinueBucket", data);
        return promise.then(data => exports.MsgDiscontinueBucketResponse.decode(new _m0.Reader(data)));
    }
    CreateObject(request) {
        const data = exports.MsgCreateObject.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "CreateObject", data);
        return promise.then(data => exports.MsgCreateObjectResponse.decode(new _m0.Reader(data)));
    }
    SealObject(request) {
        const data = exports.MsgSealObject.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "SealObject", data);
        return promise.then(data => exports.MsgSealObjectResponse.decode(new _m0.Reader(data)));
    }
    RejectSealObject(request) {
        const data = exports.MsgRejectSealObject.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "RejectSealObject", data);
        return promise.then(data => exports.MsgRejectSealObjectResponse.decode(new _m0.Reader(data)));
    }
    CopyObject(request) {
        const data = exports.MsgCopyObject.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "CopyObject", data);
        return promise.then(data => exports.MsgCopyObjectResponse.decode(new _m0.Reader(data)));
    }
    DeleteObject(request) {
        const data = exports.MsgDeleteObject.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "DeleteObject", data);
        return promise.then(data => exports.MsgDeleteObjectResponse.decode(new _m0.Reader(data)));
    }
    CancelCreateObject(request) {
        const data = exports.MsgCancelCreateObject.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "CancelCreateObject", data);
        return promise.then(data => exports.MsgCancelCreateObjectResponse.decode(new _m0.Reader(data)));
    }
    MirrorObject(request) {
        const data = exports.MsgMirrorObject.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "MirrorObject", data);
        return promise.then(data => exports.MsgMirrorObjectResponse.decode(new _m0.Reader(data)));
    }
    DiscontinueObject(request) {
        const data = exports.MsgDiscontinueObject.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "DiscontinueObject", data);
        return promise.then(data => exports.MsgDiscontinueObjectResponse.decode(new _m0.Reader(data)));
    }
    UpdateObjectInfo(request) {
        const data = exports.MsgUpdateObjectInfo.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "UpdateObjectInfo", data);
        return promise.then(data => exports.MsgUpdateObjectInfoResponse.decode(new _m0.Reader(data)));
    }
    CreateGroup(request) {
        const data = exports.MsgCreateGroup.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "CreateGroup", data);
        return promise.then(data => exports.MsgCreateGroupResponse.decode(new _m0.Reader(data)));
    }
    DeleteGroup(request) {
        const data = exports.MsgDeleteGroup.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "DeleteGroup", data);
        return promise.then(data => exports.MsgDeleteGroupResponse.decode(new _m0.Reader(data)));
    }
    UpdateGroupMember(request) {
        const data = exports.MsgUpdateGroupMember.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "UpdateGroupMember", data);
        return promise.then(data => exports.MsgUpdateGroupMemberResponse.decode(new _m0.Reader(data)));
    }
    LeaveGroup(request) {
        const data = exports.MsgLeaveGroup.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "LeaveGroup", data);
        return promise.then(data => exports.MsgLeaveGroupResponse.decode(new _m0.Reader(data)));
    }
    MirrorGroup(request) {
        const data = exports.MsgMirrorGroup.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "MirrorGroup", data);
        return promise.then(data => exports.MsgMirrorGroupResponse.decode(new _m0.Reader(data)));
    }
    PutPolicy(request) {
        const data = exports.MsgPutPolicy.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "PutPolicy", data);
        return promise.then(data => exports.MsgPutPolicyResponse.decode(new _m0.Reader(data)));
    }
    DeletePolicy(request) {
        const data = exports.MsgDeletePolicy.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "DeletePolicy", data);
        return promise.then(data => exports.MsgDeletePolicyResponse.decode(new _m0.Reader(data)));
    }
    UpdateParams(request) {
        const data = exports.MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Msg", "UpdateParams", data);
        return promise.then(data => exports.MsgUpdateParamsResponse.decode(new _m0.Reader(data)));
    }
}
exports.MsgClientImpl = MsgClientImpl;
//# sourceMappingURL=tx.js.map