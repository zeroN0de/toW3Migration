"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventStalePolicyCleanup = exports.EventMirrorGroupResult = exports.EventMirrorGroup = exports.EventMirrorObjectResult = exports.EventMirrorObject = exports.EventMirrorBucketResult = exports.EventMirrorBucket = exports.EventUpdateGroupMember = exports.EventLeaveGroup = exports.EventDeleteGroup = exports.EventCreateGroup = exports.EventUpdateObjectInfo = exports.EventDiscontinueObject = exports.EventRejectSealObject = exports.EventDeleteObject = exports.EventCopyObject = exports.EventSealObject = exports.EventCancelCreateObject = exports.EventCreateObject = exports.EventDiscontinueBucket = exports.EventUpdateBucketInfo = exports.EventDeleteBucket = exports.EventCreateBucket = exports.protobufPackage = void 0;
/* eslint-disable */
const common_1 = require("./common");
const types_1 = require("./types");
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "greenfield.storage";
function createBaseEventCreateBucket() {
    return {
        owner: "",
        bucketName: "",
        visibility: 0,
        createAt: helpers_1.Long.ZERO,
        bucketId: "",
        sourceType: 0,
        chargedReadQuota: helpers_1.Long.UZERO,
        paymentAddress: "",
        primarySpAddress: "",
        status: 0
    };
}
exports.EventCreateBucket = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.owner !== "") {
            writer.uint32(10).string(message.owner);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.visibility !== 0) {
            writer.uint32(24).int32(message.visibility);
        }
        if (!message.createAt.isZero()) {
            writer.uint32(32).int64(message.createAt);
        }
        if (message.bucketId !== "") {
            writer.uint32(42).string(message.bucketId);
        }
        if (message.sourceType !== 0) {
            writer.uint32(48).int32(message.sourceType);
        }
        if (!message.chargedReadQuota.isZero()) {
            writer.uint32(56).uint64(message.chargedReadQuota);
        }
        if (message.paymentAddress !== "") {
            writer.uint32(66).string(message.paymentAddress);
        }
        if (message.primarySpAddress !== "") {
            writer.uint32(74).string(message.primarySpAddress);
        }
        if (message.status !== 0) {
            writer.uint32(80).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCreateBucket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.owner = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.visibility = reader.int32();
                    break;
                case 4:
                    message.createAt = reader.int64();
                    break;
                case 5:
                    message.bucketId = reader.string();
                    break;
                case 6:
                    message.sourceType = reader.int32();
                    break;
                case 7:
                    message.chargedReadQuota = reader.uint64();
                    break;
                case 8:
                    message.paymentAddress = reader.string();
                    break;
                case 9:
                    message.primarySpAddress = reader.string();
                    break;
                case 10:
                    message.status = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : 0,
            createAt: (0, helpers_1.isSet)(object.createAt) ? helpers_1.Long.fromValue(object.createAt) : helpers_1.Long.ZERO,
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : "",
            sourceType: (0, helpers_1.isSet)(object.sourceType) ? (0, common_1.sourceTypeFromJSON)(object.sourceType) : 0,
            chargedReadQuota: (0, helpers_1.isSet)(object.chargedReadQuota) ? helpers_1.Long.fromValue(object.chargedReadQuota) : helpers_1.Long.UZERO,
            paymentAddress: (0, helpers_1.isSet)(object.paymentAddress) ? String(object.paymentAddress) : "",
            primarySpAddress: (0, helpers_1.isSet)(object.primarySpAddress) ? String(object.primarySpAddress) : "",
            status: (0, helpers_1.isSet)(object.status) ? (0, common_1.bucketStatusFromJSON)(object.status) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.owner !== undefined && (obj.owner = message.owner);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        message.createAt !== undefined && (obj.createAt = (message.createAt || helpers_1.Long.ZERO).toString());
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        message.sourceType !== undefined && (obj.sourceType = (0, common_1.sourceTypeToJSON)(message.sourceType));
        message.chargedReadQuota !== undefined && (obj.chargedReadQuota = (message.chargedReadQuota || helpers_1.Long.UZERO).toString());
        message.paymentAddress !== undefined && (obj.paymentAddress = message.paymentAddress);
        message.primarySpAddress !== undefined && (obj.primarySpAddress = message.primarySpAddress);
        message.status !== undefined && (obj.status = (0, common_1.bucketStatusToJSON)(message.status));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCreateBucket();
        message.owner = object.owner ?? "";
        message.bucketName = object.bucketName ?? "";
        message.visibility = object.visibility ?? 0;
        message.createAt = object.createAt !== undefined && object.createAt !== null ? helpers_1.Long.fromValue(object.createAt) : helpers_1.Long.ZERO;
        message.bucketId = object.bucketId ?? "";
        message.sourceType = object.sourceType ?? 0;
        message.chargedReadQuota = object.chargedReadQuota !== undefined && object.chargedReadQuota !== null ? helpers_1.Long.fromValue(object.chargedReadQuota) : helpers_1.Long.UZERO;
        message.paymentAddress = object.paymentAddress ?? "";
        message.primarySpAddress = object.primarySpAddress ?? "";
        message.status = object.status ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            owner: object?.owner,
            bucketName: object?.bucket_name,
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : 0,
            createAt: object?.create_at,
            bucketId: object?.bucket_id,
            sourceType: (0, helpers_1.isSet)(object.source_type) ? (0, common_1.sourceTypeFromJSON)(object.source_type) : 0,
            chargedReadQuota: object?.charged_read_quota,
            paymentAddress: object?.payment_address,
            primarySpAddress: object?.primary_sp_address,
            status: (0, helpers_1.isSet)(object.status) ? (0, common_1.bucketStatusFromJSON)(object.status) : 0
        };
    },
    toSDK(message) {
        const obj = {};
        obj.owner = message.owner;
        obj.bucket_name = message.bucketName;
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        obj.create_at = message.createAt;
        obj.bucket_id = message.bucketId;
        message.sourceType !== undefined && (obj.source_type = (0, common_1.sourceTypeToJSON)(message.sourceType));
        obj.charged_read_quota = message.chargedReadQuota;
        obj.payment_address = message.paymentAddress;
        obj.primary_sp_address = message.primarySpAddress;
        message.status !== undefined && (obj.status = (0, common_1.bucketStatusToJSON)(message.status));
        return obj;
    }
};
function createBaseEventDeleteBucket() {
    return {
        operator: "",
        owner: "",
        bucketName: "",
        bucketId: "",
        primarySpAddress: ""
    };
}
exports.EventDeleteBucket = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.owner !== "") {
            writer.uint32(18).string(message.owner);
        }
        if (message.bucketName !== "") {
            writer.uint32(26).string(message.bucketName);
        }
        if (message.bucketId !== "") {
            writer.uint32(34).string(message.bucketId);
        }
        if (message.primarySpAddress !== "") {
            writer.uint32(42).string(message.primarySpAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventDeleteBucket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.owner = reader.string();
                    break;
                case 3:
                    message.bucketName = reader.string();
                    break;
                case 4:
                    message.bucketId = reader.string();
                    break;
                case 5:
                    message.primarySpAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : "",
            primarySpAddress: (0, helpers_1.isSet)(object.primarySpAddress) ? String(object.primarySpAddress) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.owner !== undefined && (obj.owner = message.owner);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        message.primarySpAddress !== undefined && (obj.primarySpAddress = message.primarySpAddress);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventDeleteBucket();
        message.operator = object.operator ?? "";
        message.owner = object.owner ?? "";
        message.bucketName = object.bucketName ?? "";
        message.bucketId = object.bucketId ?? "";
        message.primarySpAddress = object.primarySpAddress ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            owner: object?.owner,
            bucketName: object?.bucket_name,
            bucketId: object?.bucket_id,
            primarySpAddress: object?.primary_sp_address
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.owner = message.owner;
        obj.bucket_name = message.bucketName;
        obj.bucket_id = message.bucketId;
        obj.primary_sp_address = message.primarySpAddress;
        return obj;
    }
};
function createBaseEventUpdateBucketInfo() {
    return {
        operator: "",
        bucketName: "",
        bucketId: "",
        chargedReadQuotaBefore: helpers_1.Long.UZERO,
        chargedReadQuotaAfter: helpers_1.Long.UZERO,
        paymentAddressBefore: "",
        paymentAddressAfter: "",
        visibility: 0
    };
}
exports.EventUpdateBucketInfo = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.bucketId !== "") {
            writer.uint32(26).string(message.bucketId);
        }
        if (!message.chargedReadQuotaBefore.isZero()) {
            writer.uint32(32).uint64(message.chargedReadQuotaBefore);
        }
        if (!message.chargedReadQuotaAfter.isZero()) {
            writer.uint32(40).uint64(message.chargedReadQuotaAfter);
        }
        if (message.paymentAddressBefore !== "") {
            writer.uint32(50).string(message.paymentAddressBefore);
        }
        if (message.paymentAddressAfter !== "") {
            writer.uint32(58).string(message.paymentAddressAfter);
        }
        if (message.visibility !== 0) {
            writer.uint32(64).int32(message.visibility);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventUpdateBucketInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.bucketId = reader.string();
                    break;
                case 4:
                    message.chargedReadQuotaBefore = reader.uint64();
                    break;
                case 5:
                    message.chargedReadQuotaAfter = reader.uint64();
                    break;
                case 6:
                    message.paymentAddressBefore = reader.string();
                    break;
                case 7:
                    message.paymentAddressAfter = reader.string();
                    break;
                case 8:
                    message.visibility = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : "",
            chargedReadQuotaBefore: (0, helpers_1.isSet)(object.chargedReadQuotaBefore) ? helpers_1.Long.fromValue(object.chargedReadQuotaBefore) : helpers_1.Long.UZERO,
            chargedReadQuotaAfter: (0, helpers_1.isSet)(object.chargedReadQuotaAfter) ? helpers_1.Long.fromValue(object.chargedReadQuotaAfter) : helpers_1.Long.UZERO,
            paymentAddressBefore: (0, helpers_1.isSet)(object.paymentAddressBefore) ? String(object.paymentAddressBefore) : "",
            paymentAddressAfter: (0, helpers_1.isSet)(object.paymentAddressAfter) ? String(object.paymentAddressAfter) : "",
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        message.chargedReadQuotaBefore !== undefined && (obj.chargedReadQuotaBefore = (message.chargedReadQuotaBefore || helpers_1.Long.UZERO).toString());
        message.chargedReadQuotaAfter !== undefined && (obj.chargedReadQuotaAfter = (message.chargedReadQuotaAfter || helpers_1.Long.UZERO).toString());
        message.paymentAddressBefore !== undefined && (obj.paymentAddressBefore = message.paymentAddressBefore);
        message.paymentAddressAfter !== undefined && (obj.paymentAddressAfter = message.paymentAddressAfter);
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventUpdateBucketInfo();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.bucketId = object.bucketId ?? "";
        message.chargedReadQuotaBefore = object.chargedReadQuotaBefore !== undefined && object.chargedReadQuotaBefore !== null ? helpers_1.Long.fromValue(object.chargedReadQuotaBefore) : helpers_1.Long.UZERO;
        message.chargedReadQuotaAfter = object.chargedReadQuotaAfter !== undefined && object.chargedReadQuotaAfter !== null ? helpers_1.Long.fromValue(object.chargedReadQuotaAfter) : helpers_1.Long.UZERO;
        message.paymentAddressBefore = object.paymentAddressBefore ?? "";
        message.paymentAddressAfter = object.paymentAddressAfter ?? "";
        message.visibility = object.visibility ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            bucketId: object?.bucket_id,
            chargedReadQuotaBefore: object?.charged_read_quota_before,
            chargedReadQuotaAfter: object?.charged_read_quota_after,
            paymentAddressBefore: object?.payment_address_before,
            paymentAddressAfter: object?.payment_address_after,
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : 0
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.bucket_id = message.bucketId;
        obj.charged_read_quota_before = message.chargedReadQuotaBefore;
        obj.charged_read_quota_after = message.chargedReadQuotaAfter;
        obj.payment_address_before = message.paymentAddressBefore;
        obj.payment_address_after = message.paymentAddressAfter;
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        return obj;
    }
};
function createBaseEventDiscontinueBucket() {
    return {
        bucketId: "",
        bucketName: "",
        reason: "",
        deleteAt: helpers_1.Long.ZERO
    };
}
exports.EventDiscontinueBucket = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.bucketId !== "") {
            writer.uint32(10).string(message.bucketId);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.reason !== "") {
            writer.uint32(26).string(message.reason);
        }
        if (!message.deleteAt.isZero()) {
            writer.uint32(32).int64(message.deleteAt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventDiscontinueBucket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bucketId = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.reason = reader.string();
                    break;
                case 4:
                    message.deleteAt = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            reason: (0, helpers_1.isSet)(object.reason) ? String(object.reason) : "",
            deleteAt: (0, helpers_1.isSet)(object.deleteAt) ? helpers_1.Long.fromValue(object.deleteAt) : helpers_1.Long.ZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.reason !== undefined && (obj.reason = message.reason);
        message.deleteAt !== undefined && (obj.deleteAt = (message.deleteAt || helpers_1.Long.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventDiscontinueBucket();
        message.bucketId = object.bucketId ?? "";
        message.bucketName = object.bucketName ?? "";
        message.reason = object.reason ?? "";
        message.deleteAt = object.deleteAt !== undefined && object.deleteAt !== null ? helpers_1.Long.fromValue(object.deleteAt) : helpers_1.Long.ZERO;
        return message;
    },
    fromSDK(object) {
        return {
            bucketId: object?.bucket_id,
            bucketName: object?.bucket_name,
            reason: object?.reason,
            deleteAt: object?.delete_at
        };
    },
    toSDK(message) {
        const obj = {};
        obj.bucket_id = message.bucketId;
        obj.bucket_name = message.bucketName;
        obj.reason = message.reason;
        obj.delete_at = message.deleteAt;
        return obj;
    }
};
function createBaseEventCreateObject() {
    return {
        creator: "",
        owner: "",
        bucketName: "",
        objectName: "",
        bucketId: "",
        objectId: "",
        primarySpAddress: "",
        payloadSize: helpers_1.Long.UZERO,
        visibility: 0,
        contentType: "",
        createAt: helpers_1.Long.ZERO,
        status: 0,
        redundancyType: 0,
        sourceType: 0,
        checksums: []
    };
}
exports.EventCreateObject = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.creator !== "") {
            writer.uint32(10).string(message.creator);
        }
        if (message.owner !== "") {
            writer.uint32(18).string(message.owner);
        }
        if (message.bucketName !== "") {
            writer.uint32(26).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(34).string(message.objectName);
        }
        if (message.bucketId !== "") {
            writer.uint32(50).string(message.bucketId);
        }
        if (message.objectId !== "") {
            writer.uint32(58).string(message.objectId);
        }
        if (message.primarySpAddress !== "") {
            writer.uint32(66).string(message.primarySpAddress);
        }
        if (!message.payloadSize.isZero()) {
            writer.uint32(72).uint64(message.payloadSize);
        }
        if (message.visibility !== 0) {
            writer.uint32(80).int32(message.visibility);
        }
        if (message.contentType !== "") {
            writer.uint32(90).string(message.contentType);
        }
        if (!message.createAt.isZero()) {
            writer.uint32(96).int64(message.createAt);
        }
        if (message.status !== 0) {
            writer.uint32(104).int32(message.status);
        }
        if (message.redundancyType !== 0) {
            writer.uint32(112).int32(message.redundancyType);
        }
        if (message.sourceType !== 0) {
            writer.uint32(120).int32(message.sourceType);
        }
        for (const v of message.checksums) {
            writer.uint32(130).bytes(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCreateObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.creator = reader.string();
                    break;
                case 2:
                    message.owner = reader.string();
                    break;
                case 3:
                    message.bucketName = reader.string();
                    break;
                case 4:
                    message.objectName = reader.string();
                    break;
                case 6:
                    message.bucketId = reader.string();
                    break;
                case 7:
                    message.objectId = reader.string();
                    break;
                case 8:
                    message.primarySpAddress = reader.string();
                    break;
                case 9:
                    message.payloadSize = reader.uint64();
                    break;
                case 10:
                    message.visibility = reader.int32();
                    break;
                case 11:
                    message.contentType = reader.string();
                    break;
                case 12:
                    message.createAt = reader.int64();
                    break;
                case 13:
                    message.status = reader.int32();
                    break;
                case 14:
                    message.redundancyType = reader.int32();
                    break;
                case 15:
                    message.sourceType = reader.int32();
                    break;
                case 16:
                    message.checksums.push(reader.bytes());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator: (0, helpers_1.isSet)(object.creator) ? String(object.creator) : "",
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : "",
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : "",
            primarySpAddress: (0, helpers_1.isSet)(object.primarySpAddress) ? String(object.primarySpAddress) : "",
            payloadSize: (0, helpers_1.isSet)(object.payloadSize) ? helpers_1.Long.fromValue(object.payloadSize) : helpers_1.Long.UZERO,
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : 0,
            contentType: (0, helpers_1.isSet)(object.contentType) ? String(object.contentType) : "",
            createAt: (0, helpers_1.isSet)(object.createAt) ? helpers_1.Long.fromValue(object.createAt) : helpers_1.Long.ZERO,
            status: (0, helpers_1.isSet)(object.status) ? (0, common_1.objectStatusFromJSON)(object.status) : 0,
            redundancyType: (0, helpers_1.isSet)(object.redundancyType) ? (0, common_1.redundancyTypeFromJSON)(object.redundancyType) : 0,
            sourceType: (0, helpers_1.isSet)(object.sourceType) ? (0, common_1.sourceTypeFromJSON)(object.sourceType) : 0,
            checksums: Array.isArray(object?.checksums) ? object.checksums.map((e) => (0, helpers_1.bytesFromBase64)(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.creator !== undefined && (obj.creator = message.creator);
        message.owner !== undefined && (obj.owner = message.owner);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        message.primarySpAddress !== undefined && (obj.primarySpAddress = message.primarySpAddress);
        message.payloadSize !== undefined && (obj.payloadSize = (message.payloadSize || helpers_1.Long.UZERO).toString());
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        message.contentType !== undefined && (obj.contentType = message.contentType);
        message.createAt !== undefined && (obj.createAt = (message.createAt || helpers_1.Long.ZERO).toString());
        message.status !== undefined && (obj.status = (0, common_1.objectStatusToJSON)(message.status));
        message.redundancyType !== undefined && (obj.redundancyType = (0, common_1.redundancyTypeToJSON)(message.redundancyType));
        message.sourceType !== undefined && (obj.sourceType = (0, common_1.sourceTypeToJSON)(message.sourceType));
        if (message.checksums) {
            obj.checksums = message.checksums.map(e => (0, helpers_1.base64FromBytes)(e !== undefined ? e : new Uint8Array()));
        }
        else {
            obj.checksums = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCreateObject();
        message.creator = object.creator ?? "";
        message.owner = object.owner ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.bucketId = object.bucketId ?? "";
        message.objectId = object.objectId ?? "";
        message.primarySpAddress = object.primarySpAddress ?? "";
        message.payloadSize = object.payloadSize !== undefined && object.payloadSize !== null ? helpers_1.Long.fromValue(object.payloadSize) : helpers_1.Long.UZERO;
        message.visibility = object.visibility ?? 0;
        message.contentType = object.contentType ?? "";
        message.createAt = object.createAt !== undefined && object.createAt !== null ? helpers_1.Long.fromValue(object.createAt) : helpers_1.Long.ZERO;
        message.status = object.status ?? 0;
        message.redundancyType = object.redundancyType ?? 0;
        message.sourceType = object.sourceType ?? 0;
        message.checksums = object.checksums?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            creator: object?.creator,
            owner: object?.owner,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            bucketId: object?.bucket_id,
            objectId: object?.object_id,
            primarySpAddress: object?.primary_sp_address,
            payloadSize: object?.payload_size,
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : 0,
            contentType: object?.content_type,
            createAt: object?.create_at,
            status: (0, helpers_1.isSet)(object.status) ? (0, common_1.objectStatusFromJSON)(object.status) : 0,
            redundancyType: (0, helpers_1.isSet)(object.redundancy_type) ? (0, common_1.redundancyTypeFromJSON)(object.redundancy_type) : 0,
            sourceType: (0, helpers_1.isSet)(object.source_type) ? (0, common_1.sourceTypeFromJSON)(object.source_type) : 0,
            checksums: Array.isArray(object?.checksums) ? object.checksums.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.creator = message.creator;
        obj.owner = message.owner;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.bucket_id = message.bucketId;
        obj.object_id = message.objectId;
        obj.primary_sp_address = message.primarySpAddress;
        obj.payload_size = message.payloadSize;
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        obj.content_type = message.contentType;
        obj.create_at = message.createAt;
        message.status !== undefined && (obj.status = (0, common_1.objectStatusToJSON)(message.status));
        message.redundancyType !== undefined && (obj.redundancy_type = (0, common_1.redundancyTypeToJSON)(message.redundancyType));
        message.sourceType !== undefined && (obj.source_type = (0, common_1.sourceTypeToJSON)(message.sourceType));
        if (message.checksums) {
            obj.checksums = message.checksums.map(e => e);
        }
        else {
            obj.checksums = [];
        }
        return obj;
    }
};
function createBaseEventCancelCreateObject() {
    return {
        operator: "",
        bucketName: "",
        objectName: "",
        primarySpAddress: "",
        objectId: ""
    };
}
exports.EventCancelCreateObject = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        if (message.primarySpAddress !== "") {
            writer.uint32(34).string(message.primarySpAddress);
        }
        if (message.objectId !== "") {
            writer.uint32(50).string(message.objectId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCancelCreateObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                case 4:
                    message.primarySpAddress = reader.string();
                    break;
                case 6:
                    message.objectId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            primarySpAddress: (0, helpers_1.isSet)(object.primarySpAddress) ? String(object.primarySpAddress) : "",
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.primarySpAddress !== undefined && (obj.primarySpAddress = message.primarySpAddress);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCancelCreateObject();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.primarySpAddress = object.primarySpAddress ?? "";
        message.objectId = object.objectId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            primarySpAddress: object?.primary_sp_address,
            objectId: object?.object_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.primary_sp_address = message.primarySpAddress;
        obj.object_id = message.objectId;
        return obj;
    }
};
function createBaseEventSealObject() {
    return {
        operator: "",
        bucketName: "",
        objectName: "",
        objectId: "",
        status: 0,
        secondarySpAddresses: []
    };
}
exports.EventSealObject = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        if (message.objectId !== "") {
            writer.uint32(42).string(message.objectId);
        }
        if (message.status !== 0) {
            writer.uint32(48).int32(message.status);
        }
        for (const v of message.secondarySpAddresses) {
            writer.uint32(58).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventSealObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                case 5:
                    message.objectId = reader.string();
                    break;
                case 6:
                    message.status = reader.int32();
                    break;
                case 7:
                    message.secondarySpAddresses.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : "",
            status: (0, helpers_1.isSet)(object.status) ? (0, common_1.objectStatusFromJSON)(object.status) : 0,
            secondarySpAddresses: Array.isArray(object?.secondarySpAddresses) ? object.secondarySpAddresses.map((e) => String(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        message.status !== undefined && (obj.status = (0, common_1.objectStatusToJSON)(message.status));
        if (message.secondarySpAddresses) {
            obj.secondarySpAddresses = message.secondarySpAddresses.map(e => e);
        }
        else {
            obj.secondarySpAddresses = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventSealObject();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.objectId = object.objectId ?? "";
        message.status = object.status ?? 0;
        message.secondarySpAddresses = object.secondarySpAddresses?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            objectId: object?.object_id,
            status: (0, helpers_1.isSet)(object.status) ? (0, common_1.objectStatusFromJSON)(object.status) : 0,
            secondarySpAddresses: Array.isArray(object?.secondary_sp_addresses) ? object.secondary_sp_addresses.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.object_id = message.objectId;
        message.status !== undefined && (obj.status = (0, common_1.objectStatusToJSON)(message.status));
        if (message.secondarySpAddresses) {
            obj.secondary_sp_addresses = message.secondarySpAddresses.map(e => e);
        }
        else {
            obj.secondary_sp_addresses = [];
        }
        return obj;
    }
};
function createBaseEventCopyObject() {
    return {
        operator: "",
        srcBucketName: "",
        srcObjectName: "",
        dstBucketName: "",
        dstObjectName: "",
        srcObjectId: "",
        dstObjectId: ""
    };
}
exports.EventCopyObject = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.srcBucketName !== "") {
            writer.uint32(18).string(message.srcBucketName);
        }
        if (message.srcObjectName !== "") {
            writer.uint32(26).string(message.srcObjectName);
        }
        if (message.dstBucketName !== "") {
            writer.uint32(34).string(message.dstBucketName);
        }
        if (message.dstObjectName !== "") {
            writer.uint32(42).string(message.dstObjectName);
        }
        if (message.srcObjectId !== "") {
            writer.uint32(50).string(message.srcObjectId);
        }
        if (message.dstObjectId !== "") {
            writer.uint32(58).string(message.dstObjectId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCopyObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.srcBucketName = reader.string();
                    break;
                case 3:
                    message.srcObjectName = reader.string();
                    break;
                case 4:
                    message.dstBucketName = reader.string();
                    break;
                case 5:
                    message.dstObjectName = reader.string();
                    break;
                case 6:
                    message.srcObjectId = reader.string();
                    break;
                case 7:
                    message.dstObjectId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            srcBucketName: (0, helpers_1.isSet)(object.srcBucketName) ? String(object.srcBucketName) : "",
            srcObjectName: (0, helpers_1.isSet)(object.srcObjectName) ? String(object.srcObjectName) : "",
            dstBucketName: (0, helpers_1.isSet)(object.dstBucketName) ? String(object.dstBucketName) : "",
            dstObjectName: (0, helpers_1.isSet)(object.dstObjectName) ? String(object.dstObjectName) : "",
            srcObjectId: (0, helpers_1.isSet)(object.srcObjectId) ? String(object.srcObjectId) : "",
            dstObjectId: (0, helpers_1.isSet)(object.dstObjectId) ? String(object.dstObjectId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.srcBucketName !== undefined && (obj.srcBucketName = message.srcBucketName);
        message.srcObjectName !== undefined && (obj.srcObjectName = message.srcObjectName);
        message.dstBucketName !== undefined && (obj.dstBucketName = message.dstBucketName);
        message.dstObjectName !== undefined && (obj.dstObjectName = message.dstObjectName);
        message.srcObjectId !== undefined && (obj.srcObjectId = message.srcObjectId);
        message.dstObjectId !== undefined && (obj.dstObjectId = message.dstObjectId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCopyObject();
        message.operator = object.operator ?? "";
        message.srcBucketName = object.srcBucketName ?? "";
        message.srcObjectName = object.srcObjectName ?? "";
        message.dstBucketName = object.dstBucketName ?? "";
        message.dstObjectName = object.dstObjectName ?? "";
        message.srcObjectId = object.srcObjectId ?? "";
        message.dstObjectId = object.dstObjectId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            srcBucketName: object?.src_bucket_name,
            srcObjectName: object?.src_object_name,
            dstBucketName: object?.dst_bucket_name,
            dstObjectName: object?.dst_object_name,
            srcObjectId: object?.src_object_id,
            dstObjectId: object?.dst_object_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.src_bucket_name = message.srcBucketName;
        obj.src_object_name = message.srcObjectName;
        obj.dst_bucket_name = message.dstBucketName;
        obj.dst_object_name = message.dstObjectName;
        obj.src_object_id = message.srcObjectId;
        obj.dst_object_id = message.dstObjectId;
        return obj;
    }
};
function createBaseEventDeleteObject() {
    return {
        operator: "",
        bucketName: "",
        objectName: "",
        objectId: "",
        primarySpAddress: "",
        secondarySpAddresses: []
    };
}
exports.EventDeleteObject = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        if (message.objectId !== "") {
            writer.uint32(34).string(message.objectId);
        }
        if (message.primarySpAddress !== "") {
            writer.uint32(42).string(message.primarySpAddress);
        }
        for (const v of message.secondarySpAddresses) {
            writer.uint32(50).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventDeleteObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                case 4:
                    message.objectId = reader.string();
                    break;
                case 5:
                    message.primarySpAddress = reader.string();
                    break;
                case 6:
                    message.secondarySpAddresses.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : "",
            primarySpAddress: (0, helpers_1.isSet)(object.primarySpAddress) ? String(object.primarySpAddress) : "",
            secondarySpAddresses: Array.isArray(object?.secondarySpAddresses) ? object.secondarySpAddresses.map((e) => String(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        message.primarySpAddress !== undefined && (obj.primarySpAddress = message.primarySpAddress);
        if (message.secondarySpAddresses) {
            obj.secondarySpAddresses = message.secondarySpAddresses.map(e => e);
        }
        else {
            obj.secondarySpAddresses = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventDeleteObject();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.objectId = object.objectId ?? "";
        message.primarySpAddress = object.primarySpAddress ?? "";
        message.secondarySpAddresses = object.secondarySpAddresses?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            objectId: object?.object_id,
            primarySpAddress: object?.primary_sp_address,
            secondarySpAddresses: Array.isArray(object?.secondary_sp_addresses) ? object.secondary_sp_addresses.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.object_id = message.objectId;
        obj.primary_sp_address = message.primarySpAddress;
        if (message.secondarySpAddresses) {
            obj.secondary_sp_addresses = message.secondarySpAddresses.map(e => e);
        }
        else {
            obj.secondary_sp_addresses = [];
        }
        return obj;
    }
};
function createBaseEventRejectSealObject() {
    return {
        operator: "",
        bucketName: "",
        objectName: "",
        objectId: ""
    };
}
exports.EventRejectSealObject = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        if (message.objectId !== "") {
            writer.uint32(34).string(message.objectId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventRejectSealObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                case 4:
                    message.objectId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventRejectSealObject();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.objectId = object.objectId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            objectId: object?.object_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.object_id = message.objectId;
        return obj;
    }
};
function createBaseEventDiscontinueObject() {
    return {
        bucketName: "",
        objectId: "",
        reason: "",
        deleteAt: helpers_1.Long.ZERO
    };
}
exports.EventDiscontinueObject = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.bucketName !== "") {
            writer.uint32(10).string(message.bucketName);
        }
        if (message.objectId !== "") {
            writer.uint32(18).string(message.objectId);
        }
        if (message.reason !== "") {
            writer.uint32(26).string(message.reason);
        }
        if (!message.deleteAt.isZero()) {
            writer.uint32(32).int64(message.deleteAt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventDiscontinueObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bucketName = reader.string();
                    break;
                case 2:
                    message.objectId = reader.string();
                    break;
                case 3:
                    message.reason = reader.string();
                    break;
                case 4:
                    message.deleteAt = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : "",
            reason: (0, helpers_1.isSet)(object.reason) ? String(object.reason) : "",
            deleteAt: (0, helpers_1.isSet)(object.deleteAt) ? helpers_1.Long.fromValue(object.deleteAt) : helpers_1.Long.ZERO
        };
    },
    toJSON(message) {
        const obj = {};
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        message.reason !== undefined && (obj.reason = message.reason);
        message.deleteAt !== undefined && (obj.deleteAt = (message.deleteAt || helpers_1.Long.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventDiscontinueObject();
        message.bucketName = object.bucketName ?? "";
        message.objectId = object.objectId ?? "";
        message.reason = object.reason ?? "";
        message.deleteAt = object.deleteAt !== undefined && object.deleteAt !== null ? helpers_1.Long.fromValue(object.deleteAt) : helpers_1.Long.ZERO;
        return message;
    },
    fromSDK(object) {
        return {
            bucketName: object?.bucket_name,
            objectId: object?.object_id,
            reason: object?.reason,
            deleteAt: object?.delete_at
        };
    },
    toSDK(message) {
        const obj = {};
        obj.bucket_name = message.bucketName;
        obj.object_id = message.objectId;
        obj.reason = message.reason;
        obj.delete_at = message.deleteAt;
        return obj;
    }
};
function createBaseEventUpdateObjectInfo() {
    return {
        operator: "",
        bucketName: "",
        objectName: "",
        objectId: "",
        visibility: 0
    };
}
exports.EventUpdateObjectInfo = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        if (message.objectId !== "") {
            writer.uint32(34).string(message.objectId);
        }
        if (message.visibility !== 0) {
            writer.uint32(40).int32(message.visibility);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventUpdateObjectInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                case 4:
                    message.objectId = reader.string();
                    break;
                case 5:
                    message.visibility = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : "",
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventUpdateObjectInfo();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.objectId = object.objectId ?? "";
        message.visibility = object.visibility ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            objectId: object?.object_id,
            visibility: (0, helpers_1.isSet)(object.visibility) ? (0, common_1.visibilityTypeFromJSON)(object.visibility) : 0
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.object_id = message.objectId;
        message.visibility !== undefined && (obj.visibility = (0, common_1.visibilityTypeToJSON)(message.visibility));
        return obj;
    }
};
function createBaseEventCreateGroup() {
    return {
        owner: "",
        groupName: "",
        groupId: "",
        sourceType: 0,
        members: []
    };
}
exports.EventCreateGroup = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.owner !== "") {
            writer.uint32(10).string(message.owner);
        }
        if (message.groupName !== "") {
            writer.uint32(18).string(message.groupName);
        }
        if (message.groupId !== "") {
            writer.uint32(26).string(message.groupId);
        }
        if (message.sourceType !== 0) {
            writer.uint32(32).int32(message.sourceType);
        }
        for (const v of message.members) {
            writer.uint32(42).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCreateGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.owner = reader.string();
                    break;
                case 2:
                    message.groupName = reader.string();
                    break;
                case 3:
                    message.groupId = reader.string();
                    break;
                case 4:
                    message.sourceType = reader.int32();
                    break;
                case 5:
                    message.members.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : "",
            groupId: (0, helpers_1.isSet)(object.groupId) ? String(object.groupId) : "",
            sourceType: (0, helpers_1.isSet)(object.sourceType) ? (0, common_1.sourceTypeFromJSON)(object.sourceType) : 0,
            members: Array.isArray(object?.members) ? object.members.map((e) => String(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.owner !== undefined && (obj.owner = message.owner);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        message.groupId !== undefined && (obj.groupId = message.groupId);
        message.sourceType !== undefined && (obj.sourceType = (0, common_1.sourceTypeToJSON)(message.sourceType));
        if (message.members) {
            obj.members = message.members.map(e => e);
        }
        else {
            obj.members = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventCreateGroup();
        message.owner = object.owner ?? "";
        message.groupName = object.groupName ?? "";
        message.groupId = object.groupId ?? "";
        message.sourceType = object.sourceType ?? 0;
        message.members = object.members?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            owner: object?.owner,
            groupName: object?.group_name,
            groupId: object?.group_id,
            sourceType: (0, helpers_1.isSet)(object.source_type) ? (0, common_1.sourceTypeFromJSON)(object.source_type) : 0,
            members: Array.isArray(object?.members) ? object.members.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.owner = message.owner;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        message.sourceType !== undefined && (obj.source_type = (0, common_1.sourceTypeToJSON)(message.sourceType));
        if (message.members) {
            obj.members = message.members.map(e => e);
        }
        else {
            obj.members = [];
        }
        return obj;
    }
};
function createBaseEventDeleteGroup() {
    return {
        owner: "",
        groupName: "",
        groupId: ""
    };
}
exports.EventDeleteGroup = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.owner !== "") {
            writer.uint32(18).string(message.owner);
        }
        if (message.groupName !== "") {
            writer.uint32(26).string(message.groupName);
        }
        if (message.groupId !== "") {
            writer.uint32(34).string(message.groupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventDeleteGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    message.owner = reader.string();
                    break;
                case 3:
                    message.groupName = reader.string();
                    break;
                case 4:
                    message.groupId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : "",
            groupId: (0, helpers_1.isSet)(object.groupId) ? String(object.groupId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.owner !== undefined && (obj.owner = message.owner);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        message.groupId !== undefined && (obj.groupId = message.groupId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventDeleteGroup();
        message.owner = object.owner ?? "";
        message.groupName = object.groupName ?? "";
        message.groupId = object.groupId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            owner: object?.owner,
            groupName: object?.group_name,
            groupId: object?.group_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.owner = message.owner;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        return obj;
    }
};
function createBaseEventLeaveGroup() {
    return {
        memberAddress: "",
        owner: "",
        groupName: "",
        groupId: ""
    };
}
exports.EventLeaveGroup = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.memberAddress !== "") {
            writer.uint32(10).string(message.memberAddress);
        }
        if (message.owner !== "") {
            writer.uint32(18).string(message.owner);
        }
        if (message.groupName !== "") {
            writer.uint32(26).string(message.groupName);
        }
        if (message.groupId !== "") {
            writer.uint32(34).string(message.groupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventLeaveGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.memberAddress = reader.string();
                    break;
                case 2:
                    message.owner = reader.string();
                    break;
                case 3:
                    message.groupName = reader.string();
                    break;
                case 4:
                    message.groupId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            memberAddress: (0, helpers_1.isSet)(object.memberAddress) ? String(object.memberAddress) : "",
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : "",
            groupId: (0, helpers_1.isSet)(object.groupId) ? String(object.groupId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.memberAddress !== undefined && (obj.memberAddress = message.memberAddress);
        message.owner !== undefined && (obj.owner = message.owner);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        message.groupId !== undefined && (obj.groupId = message.groupId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventLeaveGroup();
        message.memberAddress = object.memberAddress ?? "";
        message.owner = object.owner ?? "";
        message.groupName = object.groupName ?? "";
        message.groupId = object.groupId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            memberAddress: object?.member_address,
            owner: object?.owner,
            groupName: object?.group_name,
            groupId: object?.group_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.member_address = message.memberAddress;
        obj.owner = message.owner;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        return obj;
    }
};
function createBaseEventUpdateGroupMember() {
    return {
        operator: "",
        owner: "",
        groupName: "",
        groupId: "",
        membersToAdd: [],
        membersToDelete: []
    };
}
exports.EventUpdateGroupMember = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.owner !== "") {
            writer.uint32(18).string(message.owner);
        }
        if (message.groupName !== "") {
            writer.uint32(26).string(message.groupName);
        }
        if (message.groupId !== "") {
            writer.uint32(34).string(message.groupId);
        }
        for (const v of message.membersToAdd) {
            writer.uint32(42).string(v);
        }
        for (const v of message.membersToDelete) {
            writer.uint32(50).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventUpdateGroupMember();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.owner = reader.string();
                    break;
                case 3:
                    message.groupName = reader.string();
                    break;
                case 4:
                    message.groupId = reader.string();
                    break;
                case 5:
                    message.membersToAdd.push(reader.string());
                    break;
                case 6:
                    message.membersToDelete.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : "",
            groupId: (0, helpers_1.isSet)(object.groupId) ? String(object.groupId) : "",
            membersToAdd: Array.isArray(object?.membersToAdd) ? object.membersToAdd.map((e) => String(e)) : [],
            membersToDelete: Array.isArray(object?.membersToDelete) ? object.membersToDelete.map((e) => String(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.owner !== undefined && (obj.owner = message.owner);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        message.groupId !== undefined && (obj.groupId = message.groupId);
        if (message.membersToAdd) {
            obj.membersToAdd = message.membersToAdd.map(e => e);
        }
        else {
            obj.membersToAdd = [];
        }
        if (message.membersToDelete) {
            obj.membersToDelete = message.membersToDelete.map(e => e);
        }
        else {
            obj.membersToDelete = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventUpdateGroupMember();
        message.operator = object.operator ?? "";
        message.owner = object.owner ?? "";
        message.groupName = object.groupName ?? "";
        message.groupId = object.groupId ?? "";
        message.membersToAdd = object.membersToAdd?.map(e => e) || [];
        message.membersToDelete = object.membersToDelete?.map(e => e) || [];
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            owner: object?.owner,
            groupName: object?.group_name,
            groupId: object?.group_id,
            membersToAdd: Array.isArray(object?.members_to_add) ? object.members_to_add.map((e) => e) : [],
            membersToDelete: Array.isArray(object?.members_to_delete) ? object.members_to_delete.map((e) => e) : []
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.owner = message.owner;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        if (message.membersToAdd) {
            obj.members_to_add = message.membersToAdd.map(e => e);
        }
        else {
            obj.members_to_add = [];
        }
        if (message.membersToDelete) {
            obj.members_to_delete = message.membersToDelete.map(e => e);
        }
        else {
            obj.members_to_delete = [];
        }
        return obj;
    }
};
function createBaseEventMirrorBucket() {
    return {
        operator: "",
        bucketName: "",
        bucketId: ""
    };
}
exports.EventMirrorBucket = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.bucketId !== "") {
            writer.uint32(34).string(message.bucketId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventMirrorBucket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 4:
                    message.bucketId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventMirrorBucket();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.bucketId = object.bucketId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            bucketId: object?.bucket_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.bucket_id = message.bucketId;
        return obj;
    }
};
function createBaseEventMirrorBucketResult() {
    return {
        status: 0,
        bucketName: "",
        bucketId: ""
    };
}
exports.EventMirrorBucketResult = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.status !== 0) {
            writer.uint32(8).uint32(message.status);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.bucketId !== "") {
            writer.uint32(34).string(message.bucketId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventMirrorBucketResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.status = reader.uint32();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 4:
                    message.bucketId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: (0, helpers_1.isSet)(object.status) ? Number(object.status) : 0,
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.status !== undefined && (obj.status = Math.round(message.status));
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventMirrorBucketResult();
        message.status = object.status ?? 0;
        message.bucketName = object.bucketName ?? "";
        message.bucketId = object.bucketId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            status: object?.status,
            bucketName: object?.bucket_name,
            bucketId: object?.bucket_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.status = message.status;
        obj.bucket_name = message.bucketName;
        obj.bucket_id = message.bucketId;
        return obj;
    }
};
function createBaseEventMirrorObject() {
    return {
        operator: "",
        bucketName: "",
        objectName: "",
        objectId: ""
    };
}
exports.EventMirrorObject = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        if (message.objectId !== "") {
            writer.uint32(34).string(message.objectId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventMirrorObject();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                case 4:
                    message.objectId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventMirrorObject();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.objectId = object.objectId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            objectId: object?.object_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.object_id = message.objectId;
        return obj;
    }
};
function createBaseEventMirrorObjectResult() {
    return {
        status: 0,
        bucketName: "",
        objectName: "",
        objectId: ""
    };
}
exports.EventMirrorObjectResult = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.status !== 0) {
            writer.uint32(8).uint32(message.status);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        if (message.objectId !== "") {
            writer.uint32(34).string(message.objectId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventMirrorObjectResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.status = reader.uint32();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                case 4:
                    message.objectId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: (0, helpers_1.isSet)(object.status) ? Number(object.status) : 0,
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.status !== undefined && (obj.status = Math.round(message.status));
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventMirrorObjectResult();
        message.status = object.status ?? 0;
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.objectId = object.objectId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            status: object?.status,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            objectId: object?.object_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.status = message.status;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        obj.object_id = message.objectId;
        return obj;
    }
};
function createBaseEventMirrorGroup() {
    return {
        owner: "",
        groupName: "",
        groupId: ""
    };
}
exports.EventMirrorGroup = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.owner !== "") {
            writer.uint32(10).string(message.owner);
        }
        if (message.groupName !== "") {
            writer.uint32(18).string(message.groupName);
        }
        if (message.groupId !== "") {
            writer.uint32(26).string(message.groupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventMirrorGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.owner = reader.string();
                    break;
                case 2:
                    message.groupName = reader.string();
                    break;
                case 3:
                    message.groupId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            owner: (0, helpers_1.isSet)(object.owner) ? String(object.owner) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : "",
            groupId: (0, helpers_1.isSet)(object.groupId) ? String(object.groupId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.owner !== undefined && (obj.owner = message.owner);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        message.groupId !== undefined && (obj.groupId = message.groupId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventMirrorGroup();
        message.owner = object.owner ?? "";
        message.groupName = object.groupName ?? "";
        message.groupId = object.groupId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            owner: object?.owner,
            groupName: object?.group_name,
            groupId: object?.group_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.owner = message.owner;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        return obj;
    }
};
function createBaseEventMirrorGroupResult() {
    return {
        status: 0,
        groupName: "",
        groupId: ""
    };
}
exports.EventMirrorGroupResult = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.status !== 0) {
            writer.uint32(8).uint32(message.status);
        }
        if (message.groupName !== "") {
            writer.uint32(18).string(message.groupName);
        }
        if (message.groupId !== "") {
            writer.uint32(26).string(message.groupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventMirrorGroupResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.status = reader.uint32();
                    break;
                case 2:
                    message.groupName = reader.string();
                    break;
                case 3:
                    message.groupId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: (0, helpers_1.isSet)(object.status) ? Number(object.status) : 0,
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : "",
            groupId: (0, helpers_1.isSet)(object.groupId) ? String(object.groupId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.status !== undefined && (obj.status = Math.round(message.status));
        message.groupName !== undefined && (obj.groupName = message.groupName);
        message.groupId !== undefined && (obj.groupId = message.groupId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventMirrorGroupResult();
        message.status = object.status ?? 0;
        message.groupName = object.groupName ?? "";
        message.groupId = object.groupId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            status: object?.status,
            groupName: object?.group_name,
            groupId: object?.group_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.status = message.status;
        obj.group_name = message.groupName;
        obj.group_id = message.groupId;
        return obj;
    }
};
function createBaseEventStalePolicyCleanup() {
    return {
        blockNum: helpers_1.Long.ZERO,
        deleteInfo: undefined
    };
}
exports.EventStalePolicyCleanup = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.blockNum.isZero()) {
            writer.uint32(8).int64(message.blockNum);
        }
        if (message.deleteInfo !== undefined) {
            types_1.DeleteInfo.encode(message.deleteInfo, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventStalePolicyCleanup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.blockNum = reader.int64();
                    break;
                case 2:
                    message.deleteInfo = types_1.DeleteInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            blockNum: (0, helpers_1.isSet)(object.blockNum) ? helpers_1.Long.fromValue(object.blockNum) : helpers_1.Long.ZERO,
            deleteInfo: (0, helpers_1.isSet)(object.deleteInfo) ? types_1.DeleteInfo.fromJSON(object.deleteInfo) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.blockNum !== undefined && (obj.blockNum = (message.blockNum || helpers_1.Long.ZERO).toString());
        message.deleteInfo !== undefined && (obj.deleteInfo = message.deleteInfo ? types_1.DeleteInfo.toJSON(message.deleteInfo) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseEventStalePolicyCleanup();
        message.blockNum = object.blockNum !== undefined && object.blockNum !== null ? helpers_1.Long.fromValue(object.blockNum) : helpers_1.Long.ZERO;
        message.deleteInfo = object.deleteInfo !== undefined && object.deleteInfo !== null ? types_1.DeleteInfo.fromPartial(object.deleteInfo) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            blockNum: object?.blockNum,
            deleteInfo: object.delete_info ? types_1.DeleteInfo.fromSDK(object.delete_info) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        obj.blockNum = message.blockNum;
        message.deleteInfo !== undefined && (obj.delete_info = message.deleteInfo ? types_1.DeleteInfo.toSDK(message.deleteInfo) : undefined);
        return obj;
    }
};
//# sourceMappingURL=events.js.map