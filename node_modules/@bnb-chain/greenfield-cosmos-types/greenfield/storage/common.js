"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecondarySpSignDoc = exports.Approval = exports.visibilityTypeToJSON = exports.visibilityTypeFromJSON = exports.VisibilityTypeSDKType = exports.VisibilityType = exports.objectStatusToJSON = exports.objectStatusFromJSON = exports.ObjectStatusSDKType = exports.ObjectStatus = exports.redundancyTypeToJSON = exports.redundancyTypeFromJSON = exports.RedundancyTypeSDKType = exports.RedundancyType = exports.bucketStatusToJSON = exports.bucketStatusFromJSON = exports.BucketStatusSDKType = exports.BucketStatus = exports.sourceTypeToJSON = exports.sourceTypeFromJSON = exports.SourceTypeSDKType = exports.SourceType = exports.protobufPackage = void 0;
/* eslint-disable */
const helpers_1 = require("../../helpers");
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "greenfield.storage";
/**
 * SourceType represents the source of resource creation, which can
 * from Greenfield native or from a cross-chain transfer from BSC
 */
var SourceType;
(function (SourceType) {
    SourceType[SourceType["SOURCE_TYPE_ORIGIN"] = 0] = "SOURCE_TYPE_ORIGIN";
    SourceType[SourceType["SOURCE_TYPE_BSC_CROSS_CHAIN"] = 1] = "SOURCE_TYPE_BSC_CROSS_CHAIN";
    SourceType[SourceType["SOURCE_TYPE_MIRROR_PENDING"] = 2] = "SOURCE_TYPE_MIRROR_PENDING";
    SourceType[SourceType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(SourceType = exports.SourceType || (exports.SourceType = {}));
exports.SourceTypeSDKType = SourceType;
function sourceTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "SOURCE_TYPE_ORIGIN":
            return SourceType.SOURCE_TYPE_ORIGIN;
        case 1:
        case "SOURCE_TYPE_BSC_CROSS_CHAIN":
            return SourceType.SOURCE_TYPE_BSC_CROSS_CHAIN;
        case 2:
        case "SOURCE_TYPE_MIRROR_PENDING":
            return SourceType.SOURCE_TYPE_MIRROR_PENDING;
        case -1:
        case "UNRECOGNIZED":
        default:
            return SourceType.UNRECOGNIZED;
    }
}
exports.sourceTypeFromJSON = sourceTypeFromJSON;
function sourceTypeToJSON(object) {
    switch (object) {
        case SourceType.SOURCE_TYPE_ORIGIN:
            return "SOURCE_TYPE_ORIGIN";
        case SourceType.SOURCE_TYPE_BSC_CROSS_CHAIN:
            return "SOURCE_TYPE_BSC_CROSS_CHAIN";
        case SourceType.SOURCE_TYPE_MIRROR_PENDING:
            return "SOURCE_TYPE_MIRROR_PENDING";
        case SourceType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.sourceTypeToJSON = sourceTypeToJSON;
/**
 * BucketStatus represents the status of a bucket. After a user successfully
 * sends a CreateBucket transaction onto the chain, the status is set to 'Created'.
 * When a Discontinue Object transaction is received on chain, the status is set to 'Discontinued'.
 */
var BucketStatus;
(function (BucketStatus) {
    BucketStatus[BucketStatus["BUCKET_STATUS_CREATED"] = 0] = "BUCKET_STATUS_CREATED";
    BucketStatus[BucketStatus["BUCKET_STATUS_DISCONTINUED"] = 1] = "BUCKET_STATUS_DISCONTINUED";
    BucketStatus[BucketStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BucketStatus = exports.BucketStatus || (exports.BucketStatus = {}));
exports.BucketStatusSDKType = BucketStatus;
function bucketStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "BUCKET_STATUS_CREATED":
            return BucketStatus.BUCKET_STATUS_CREATED;
        case 1:
        case "BUCKET_STATUS_DISCONTINUED":
            return BucketStatus.BUCKET_STATUS_DISCONTINUED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BucketStatus.UNRECOGNIZED;
    }
}
exports.bucketStatusFromJSON = bucketStatusFromJSON;
function bucketStatusToJSON(object) {
    switch (object) {
        case BucketStatus.BUCKET_STATUS_CREATED:
            return "BUCKET_STATUS_CREATED";
        case BucketStatus.BUCKET_STATUS_DISCONTINUED:
            return "BUCKET_STATUS_DISCONTINUED";
        case BucketStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.bucketStatusToJSON = bucketStatusToJSON;
/**
 * RedundancyType represents the redundancy algorithm type for object data,
 * which can be either multi-replica or erasure coding.
 */
var RedundancyType;
(function (RedundancyType) {
    RedundancyType[RedundancyType["REDUNDANCY_EC_TYPE"] = 0] = "REDUNDANCY_EC_TYPE";
    RedundancyType[RedundancyType["REDUNDANCY_REPLICA_TYPE"] = 1] = "REDUNDANCY_REPLICA_TYPE";
    RedundancyType[RedundancyType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(RedundancyType = exports.RedundancyType || (exports.RedundancyType = {}));
exports.RedundancyTypeSDKType = RedundancyType;
function redundancyTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "REDUNDANCY_EC_TYPE":
            return RedundancyType.REDUNDANCY_EC_TYPE;
        case 1:
        case "REDUNDANCY_REPLICA_TYPE":
            return RedundancyType.REDUNDANCY_REPLICA_TYPE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return RedundancyType.UNRECOGNIZED;
    }
}
exports.redundancyTypeFromJSON = redundancyTypeFromJSON;
function redundancyTypeToJSON(object) {
    switch (object) {
        case RedundancyType.REDUNDANCY_EC_TYPE:
            return "REDUNDANCY_EC_TYPE";
        case RedundancyType.REDUNDANCY_REPLICA_TYPE:
            return "REDUNDANCY_REPLICA_TYPE";
        case RedundancyType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.redundancyTypeToJSON = redundancyTypeToJSON;
/**
 * ObjectStatus represents the creation status of an object. After a user successfully
 * sends a CreateObject transaction onto the chain, the status is set to 'Created'.
 * After the Primary Service Provider successfully sends a Seal Object transaction onto
 * the chain, the status is set to 'Sealed'. When a Discontinue Object transaction is
 * received on chain, the status is set to 'Discontinued'.
 */
var ObjectStatus;
(function (ObjectStatus) {
    ObjectStatus[ObjectStatus["OBJECT_STATUS_CREATED"] = 0] = "OBJECT_STATUS_CREATED";
    ObjectStatus[ObjectStatus["OBJECT_STATUS_SEALED"] = 1] = "OBJECT_STATUS_SEALED";
    ObjectStatus[ObjectStatus["OBJECT_STATUS_DISCONTINUED"] = 2] = "OBJECT_STATUS_DISCONTINUED";
    ObjectStatus[ObjectStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ObjectStatus = exports.ObjectStatus || (exports.ObjectStatus = {}));
exports.ObjectStatusSDKType = ObjectStatus;
function objectStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "OBJECT_STATUS_CREATED":
            return ObjectStatus.OBJECT_STATUS_CREATED;
        case 1:
        case "OBJECT_STATUS_SEALED":
            return ObjectStatus.OBJECT_STATUS_SEALED;
        case 2:
        case "OBJECT_STATUS_DISCONTINUED":
            return ObjectStatus.OBJECT_STATUS_DISCONTINUED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ObjectStatus.UNRECOGNIZED;
    }
}
exports.objectStatusFromJSON = objectStatusFromJSON;
function objectStatusToJSON(object) {
    switch (object) {
        case ObjectStatus.OBJECT_STATUS_CREATED:
            return "OBJECT_STATUS_CREATED";
        case ObjectStatus.OBJECT_STATUS_SEALED:
            return "OBJECT_STATUS_SEALED";
        case ObjectStatus.OBJECT_STATUS_DISCONTINUED:
            return "OBJECT_STATUS_DISCONTINUED";
        case ObjectStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.objectStatusToJSON = objectStatusToJSON;
/** VisibilityType is the resources public status. */
var VisibilityType;
(function (VisibilityType) {
    VisibilityType[VisibilityType["VISIBILITY_TYPE_UNSPECIFIED"] = 0] = "VISIBILITY_TYPE_UNSPECIFIED";
    VisibilityType[VisibilityType["VISIBILITY_TYPE_PUBLIC_READ"] = 1] = "VISIBILITY_TYPE_PUBLIC_READ";
    VisibilityType[VisibilityType["VISIBILITY_TYPE_PRIVATE"] = 2] = "VISIBILITY_TYPE_PRIVATE";
    /** VISIBILITY_TYPE_INHERIT - If the bucket Visibility is inherit, it's finally set to private. If the object Visibility is inherit, it's the same as bucket. */
    VisibilityType[VisibilityType["VISIBILITY_TYPE_INHERIT"] = 3] = "VISIBILITY_TYPE_INHERIT";
    VisibilityType[VisibilityType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(VisibilityType = exports.VisibilityType || (exports.VisibilityType = {}));
exports.VisibilityTypeSDKType = VisibilityType;
function visibilityTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "VISIBILITY_TYPE_UNSPECIFIED":
            return VisibilityType.VISIBILITY_TYPE_UNSPECIFIED;
        case 1:
        case "VISIBILITY_TYPE_PUBLIC_READ":
            return VisibilityType.VISIBILITY_TYPE_PUBLIC_READ;
        case 2:
        case "VISIBILITY_TYPE_PRIVATE":
            return VisibilityType.VISIBILITY_TYPE_PRIVATE;
        case 3:
        case "VISIBILITY_TYPE_INHERIT":
            return VisibilityType.VISIBILITY_TYPE_INHERIT;
        case -1:
        case "UNRECOGNIZED":
        default:
            return VisibilityType.UNRECOGNIZED;
    }
}
exports.visibilityTypeFromJSON = visibilityTypeFromJSON;
function visibilityTypeToJSON(object) {
    switch (object) {
        case VisibilityType.VISIBILITY_TYPE_UNSPECIFIED:
            return "VISIBILITY_TYPE_UNSPECIFIED";
        case VisibilityType.VISIBILITY_TYPE_PUBLIC_READ:
            return "VISIBILITY_TYPE_PUBLIC_READ";
        case VisibilityType.VISIBILITY_TYPE_PRIVATE:
            return "VISIBILITY_TYPE_PRIVATE";
        case VisibilityType.VISIBILITY_TYPE_INHERIT:
            return "VISIBILITY_TYPE_INHERIT";
        case VisibilityType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.visibilityTypeToJSON = visibilityTypeToJSON;
function createBaseApproval() {
    return {
        expiredHeight: helpers_1.Long.UZERO,
        sig: new Uint8Array()
    };
}
exports.Approval = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.expiredHeight.isZero()) {
            writer.uint32(8).uint64(message.expiredHeight);
        }
        if (message.sig.length !== 0) {
            writer.uint32(18).bytes(message.sig);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseApproval();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.expiredHeight = reader.uint64();
                    break;
                case 2:
                    message.sig = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            expiredHeight: (0, helpers_1.isSet)(object.expiredHeight) ? helpers_1.Long.fromValue(object.expiredHeight) : helpers_1.Long.UZERO,
            sig: (0, helpers_1.isSet)(object.sig) ? (0, helpers_1.bytesFromBase64)(object.sig) : new Uint8Array()
        };
    },
    toJSON(message) {
        const obj = {};
        message.expiredHeight !== undefined && (obj.expiredHeight = (message.expiredHeight || helpers_1.Long.UZERO).toString());
        message.sig !== undefined && (obj.sig = (0, helpers_1.base64FromBytes)(message.sig !== undefined ? message.sig : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseApproval();
        message.expiredHeight = object.expiredHeight !== undefined && object.expiredHeight !== null ? helpers_1.Long.fromValue(object.expiredHeight) : helpers_1.Long.UZERO;
        message.sig = object.sig ?? new Uint8Array();
        return message;
    },
    fromSDK(object) {
        return {
            expiredHeight: object?.expired_height,
            sig: object?.sig
        };
    },
    toSDK(message) {
        const obj = {};
        obj.expired_height = message.expiredHeight;
        obj.sig = message.sig;
        return obj;
    }
};
function createBaseSecondarySpSignDoc() {
    return {
        spAddress: "",
        objectId: "",
        checksum: new Uint8Array()
    };
}
exports.SecondarySpSignDoc = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.spAddress !== "") {
            writer.uint32(10).string(message.spAddress);
        }
        if (message.objectId !== "") {
            writer.uint32(18).string(message.objectId);
        }
        if (message.checksum.length !== 0) {
            writer.uint32(26).bytes(message.checksum);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSecondarySpSignDoc();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.spAddress = reader.string();
                    break;
                case 2:
                    message.objectId = reader.string();
                    break;
                case 3:
                    message.checksum = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            spAddress: (0, helpers_1.isSet)(object.spAddress) ? String(object.spAddress) : "",
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : "",
            checksum: (0, helpers_1.isSet)(object.checksum) ? (0, helpers_1.bytesFromBase64)(object.checksum) : new Uint8Array()
        };
    },
    toJSON(message) {
        const obj = {};
        message.spAddress !== undefined && (obj.spAddress = message.spAddress);
        message.objectId !== undefined && (obj.objectId = message.objectId);
        message.checksum !== undefined && (obj.checksum = (0, helpers_1.base64FromBytes)(message.checksum !== undefined ? message.checksum : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSecondarySpSignDoc();
        message.spAddress = object.spAddress ?? "";
        message.objectId = object.objectId ?? "";
        message.checksum = object.checksum ?? new Uint8Array();
        return message;
    },
    fromSDK(object) {
        return {
            spAddress: object?.sp_address,
            objectId: object?.object_id,
            checksum: object?.checksum
        };
    },
    toSDK(message) {
        const obj = {};
        obj.sp_address = message.spAddress;
        obj.object_id = message.objectId;
        obj.checksum = message.checksum;
        return obj;
    }
};
//# sourceMappingURL=common.js.map