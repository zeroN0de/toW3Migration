"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryPolicyByIdResponse = exports.QueryPolicyByIdRequest = exports.QueryPolicyForGroupResponse = exports.QueryPolicyForGroupRequest = exports.QueryHeadGroupMemberResponse = exports.QueryHeadGroupMemberRequest = exports.QueryListGroupResponse = exports.QueryListGroupRequest = exports.QueryHeadGroupResponse = exports.QueryHeadGroupRequest = exports.QueryVerifyPermissionResponse = exports.QueryVerifyPermissionRequest = exports.QueryPolicyForAccountResponse = exports.QueryPolicyForAccountRequest = exports.QueryGroupNFTResponse = exports.QueryObjectNFTResponse = exports.QueryBucketNFTResponse = exports.QueryNFTRequest = exports.QueryListObjectsResponse = exports.QueryListObjectsByBucketIdRequest = exports.QueryListObjectsRequest = exports.QueryListBucketsResponse = exports.QueryListBucketsRequest = exports.QueryHeadObjectResponse = exports.QueryHeadObjectByIdRequest = exports.QueryHeadObjectRequest = exports.QueryHeadBucketResponse = exports.QueryHeadBucketByIdRequest = exports.QueryHeadBucketRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const pagination_1 = require("../../cosmos/base/query/v1beta1/pagination");
const common_1 = require("../permission/common");
const params_1 = require("./params");
const types_1 = require("./types");
const types_2 = require("../permission/types");
const _m0 = __importStar(require("protobufjs/minimal"));
const helpers_1 = require("../../helpers");
exports.protobufPackage = "greenfield.storage";
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
    fromSDK(_) {
        return {};
    },
    toSDK(_) {
        const obj = {};
        return obj;
    }
};
function createBaseQueryParamsResponse() {
    return {
        params: undefined
    };
}
exports.QueryParamsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: (0, helpers_1.isSet)(object.params) ? params_1.Params.fromJSON(object.params) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = object.params !== undefined && object.params !== null ? params_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            params: object.params ? params_1.Params.fromSDK(object.params) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toSDK(message.params) : undefined);
        return obj;
    }
};
function createBaseQueryHeadBucketRequest() {
    return {
        bucketName: ""
    };
}
exports.QueryHeadBucketRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.bucketName !== "") {
            writer.uint32(10).string(message.bucketName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadBucketRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bucketName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadBucketRequest();
        message.bucketName = object.bucketName ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            bucketName: object?.bucket_name
        };
    },
    toSDK(message) {
        const obj = {};
        obj.bucket_name = message.bucketName;
        return obj;
    }
};
function createBaseQueryHeadBucketByIdRequest() {
    return {
        bucketId: ""
    };
}
exports.QueryHeadBucketByIdRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.bucketId !== "") {
            writer.uint32(10).string(message.bucketId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadBucketByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bucketId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadBucketByIdRequest();
        message.bucketId = object.bucketId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            bucketId: object?.bucket_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.bucket_id = message.bucketId;
        return obj;
    }
};
function createBaseQueryHeadBucketResponse() {
    return {
        bucketInfo: undefined
    };
}
exports.QueryHeadBucketResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.bucketInfo !== undefined) {
            types_1.BucketInfo.encode(message.bucketInfo, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadBucketResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bucketInfo = types_1.BucketInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucketInfo: (0, helpers_1.isSet)(object.bucketInfo) ? types_1.BucketInfo.fromJSON(object.bucketInfo) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.bucketInfo !== undefined && (obj.bucketInfo = message.bucketInfo ? types_1.BucketInfo.toJSON(message.bucketInfo) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadBucketResponse();
        message.bucketInfo = object.bucketInfo !== undefined && object.bucketInfo !== null ? types_1.BucketInfo.fromPartial(object.bucketInfo) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            bucketInfo: object.bucket_info ? types_1.BucketInfo.fromSDK(object.bucket_info) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.bucketInfo !== undefined && (obj.bucket_info = message.bucketInfo ? types_1.BucketInfo.toSDK(message.bucketInfo) : undefined);
        return obj;
    }
};
function createBaseQueryHeadObjectRequest() {
    return {
        bucketName: "",
        objectName: ""
    };
}
exports.QueryHeadObjectRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.bucketName !== "") {
            writer.uint32(10).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(18).string(message.objectName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadObjectRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bucketName = reader.string();
                    break;
                case 2:
                    message.objectName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadObjectRequest();
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            bucketName: object?.bucket_name,
            objectName: object?.object_name
        };
    },
    toSDK(message) {
        const obj = {};
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        return obj;
    }
};
function createBaseQueryHeadObjectByIdRequest() {
    return {
        objectId: ""
    };
}
exports.QueryHeadObjectByIdRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.objectId !== "") {
            writer.uint32(10).string(message.objectId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadObjectByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.objectId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            objectId: (0, helpers_1.isSet)(object.objectId) ? String(object.objectId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.objectId !== undefined && (obj.objectId = message.objectId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadObjectByIdRequest();
        message.objectId = object.objectId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            objectId: object?.object_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.object_id = message.objectId;
        return obj;
    }
};
function createBaseQueryHeadObjectResponse() {
    return {
        objectInfo: undefined
    };
}
exports.QueryHeadObjectResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.objectInfo !== undefined) {
            types_1.ObjectInfo.encode(message.objectInfo, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadObjectResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.objectInfo = types_1.ObjectInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            objectInfo: (0, helpers_1.isSet)(object.objectInfo) ? types_1.ObjectInfo.fromJSON(object.objectInfo) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.objectInfo !== undefined && (obj.objectInfo = message.objectInfo ? types_1.ObjectInfo.toJSON(message.objectInfo) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadObjectResponse();
        message.objectInfo = object.objectInfo !== undefined && object.objectInfo !== null ? types_1.ObjectInfo.fromPartial(object.objectInfo) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            objectInfo: object.object_info ? types_1.ObjectInfo.fromSDK(object.object_info) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.objectInfo !== undefined && (obj.object_info = message.objectInfo ? types_1.ObjectInfo.toSDK(message.objectInfo) : undefined);
        return obj;
    }
};
function createBaseQueryListBucketsRequest() {
    return {
        pagination: undefined
    };
}
exports.QueryListBucketsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryListBucketsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryListBucketsRequest();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            pagination: object.pagination ? pagination_1.PageRequest.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryListBucketsResponse() {
    return {
        bucketInfos: [],
        pagination: undefined
    };
}
exports.QueryListBucketsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.bucketInfos) {
            types_1.BucketInfo.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryListBucketsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bucketInfos.push(types_1.BucketInfo.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucketInfos: Array.isArray(object?.bucketInfos) ? object.bucketInfos.map((e) => types_1.BucketInfo.fromJSON(e)) : [],
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.bucketInfos) {
            obj.bucketInfos = message.bucketInfos.map(e => e ? types_1.BucketInfo.toJSON(e) : undefined);
        }
        else {
            obj.bucketInfos = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryListBucketsResponse();
        message.bucketInfos = object.bucketInfos?.map(e => types_1.BucketInfo.fromPartial(e)) || [];
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            bucketInfos: Array.isArray(object?.bucket_infos) ? object.bucket_infos.map((e) => types_1.BucketInfo.fromSDK(e)) : [],
            pagination: object.pagination ? pagination_1.PageResponse.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.bucketInfos) {
            obj.bucket_infos = message.bucketInfos.map(e => e ? types_1.BucketInfo.toSDK(e) : undefined);
        }
        else {
            obj.bucket_infos = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryListObjectsRequest() {
    return {
        pagination: undefined,
        bucketName: ""
    };
}
exports.QueryListObjectsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryListObjectsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryListObjectsRequest();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        message.bucketName = object.bucketName ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            pagination: object.pagination ? pagination_1.PageRequest.fromSDK(object.pagination) : undefined,
            bucketName: object?.bucket_name
        };
    },
    toSDK(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toSDK(message.pagination) : undefined);
        obj.bucket_name = message.bucketName;
        return obj;
    }
};
function createBaseQueryListObjectsByBucketIdRequest() {
    return {
        pagination: undefined,
        bucketId: ""
    };
}
exports.QueryListObjectsByBucketIdRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.bucketId !== "") {
            writer.uint32(18).string(message.bucketId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryListObjectsByBucketIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.bucketId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
            bucketId: (0, helpers_1.isSet)(object.bucketId) ? String(object.bucketId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        message.bucketId !== undefined && (obj.bucketId = message.bucketId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryListObjectsByBucketIdRequest();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        message.bucketId = object.bucketId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            pagination: object.pagination ? pagination_1.PageRequest.fromSDK(object.pagination) : undefined,
            bucketId: object?.bucket_id
        };
    },
    toSDK(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toSDK(message.pagination) : undefined);
        obj.bucket_id = message.bucketId;
        return obj;
    }
};
function createBaseQueryListObjectsResponse() {
    return {
        objectInfos: [],
        pagination: undefined
    };
}
exports.QueryListObjectsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.objectInfos) {
            types_1.ObjectInfo.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryListObjectsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.objectInfos.push(types_1.ObjectInfo.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            objectInfos: Array.isArray(object?.objectInfos) ? object.objectInfos.map((e) => types_1.ObjectInfo.fromJSON(e)) : [],
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.objectInfos) {
            obj.objectInfos = message.objectInfos.map(e => e ? types_1.ObjectInfo.toJSON(e) : undefined);
        }
        else {
            obj.objectInfos = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryListObjectsResponse();
        message.objectInfos = object.objectInfos?.map(e => types_1.ObjectInfo.fromPartial(e)) || [];
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            objectInfos: Array.isArray(object?.object_infos) ? object.object_infos.map((e) => types_1.ObjectInfo.fromSDK(e)) : [],
            pagination: object.pagination ? pagination_1.PageResponse.fromSDK(object.pagination) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        if (message.objectInfos) {
            obj.object_infos = message.objectInfos.map(e => e ? types_1.ObjectInfo.toSDK(e) : undefined);
        }
        else {
            obj.object_infos = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toSDK(message.pagination) : undefined);
        return obj;
    }
};
function createBaseQueryNFTRequest() {
    return {
        tokenId: ""
    };
}
exports.QueryNFTRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.tokenId !== "") {
            writer.uint32(10).string(message.tokenId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryNFTRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tokenId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            tokenId: (0, helpers_1.isSet)(object.tokenId) ? String(object.tokenId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.tokenId !== undefined && (obj.tokenId = message.tokenId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryNFTRequest();
        message.tokenId = object.tokenId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            tokenId: object?.token_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.token_id = message.tokenId;
        return obj;
    }
};
function createBaseQueryBucketNFTResponse() {
    return {
        metaData: undefined
    };
}
exports.QueryBucketNFTResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.metaData !== undefined) {
            types_1.BucketMetaData.encode(message.metaData, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBucketNFTResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.metaData = types_1.BucketMetaData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            metaData: (0, helpers_1.isSet)(object.metaData) ? types_1.BucketMetaData.fromJSON(object.metaData) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.metaData !== undefined && (obj.metaData = message.metaData ? types_1.BucketMetaData.toJSON(message.metaData) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryBucketNFTResponse();
        message.metaData = object.metaData !== undefined && object.metaData !== null ? types_1.BucketMetaData.fromPartial(object.metaData) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            metaData: object.meta_data ? types_1.BucketMetaData.fromSDK(object.meta_data) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.metaData !== undefined && (obj.meta_data = message.metaData ? types_1.BucketMetaData.toSDK(message.metaData) : undefined);
        return obj;
    }
};
function createBaseQueryObjectNFTResponse() {
    return {
        metaData: undefined
    };
}
exports.QueryObjectNFTResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.metaData !== undefined) {
            types_1.ObjectMetaData.encode(message.metaData, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryObjectNFTResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.metaData = types_1.ObjectMetaData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            metaData: (0, helpers_1.isSet)(object.metaData) ? types_1.ObjectMetaData.fromJSON(object.metaData) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.metaData !== undefined && (obj.metaData = message.metaData ? types_1.ObjectMetaData.toJSON(message.metaData) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryObjectNFTResponse();
        message.metaData = object.metaData !== undefined && object.metaData !== null ? types_1.ObjectMetaData.fromPartial(object.metaData) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            metaData: object.meta_data ? types_1.ObjectMetaData.fromSDK(object.meta_data) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.metaData !== undefined && (obj.meta_data = message.metaData ? types_1.ObjectMetaData.toSDK(message.metaData) : undefined);
        return obj;
    }
};
function createBaseQueryGroupNFTResponse() {
    return {
        metaData: undefined
    };
}
exports.QueryGroupNFTResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.metaData !== undefined) {
            types_1.GroupMetaData.encode(message.metaData, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGroupNFTResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.metaData = types_1.GroupMetaData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            metaData: (0, helpers_1.isSet)(object.metaData) ? types_1.GroupMetaData.fromJSON(object.metaData) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.metaData !== undefined && (obj.metaData = message.metaData ? types_1.GroupMetaData.toJSON(message.metaData) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGroupNFTResponse();
        message.metaData = object.metaData !== undefined && object.metaData !== null ? types_1.GroupMetaData.fromPartial(object.metaData) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            metaData: object.meta_data ? types_1.GroupMetaData.fromSDK(object.meta_data) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.metaData !== undefined && (obj.meta_data = message.metaData ? types_1.GroupMetaData.toSDK(message.metaData) : undefined);
        return obj;
    }
};
function createBaseQueryPolicyForAccountRequest() {
    return {
        resource: "",
        principalAddress: ""
    };
}
exports.QueryPolicyForAccountRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.resource !== "") {
            writer.uint32(10).string(message.resource);
        }
        if (message.principalAddress !== "") {
            writer.uint32(18).string(message.principalAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPolicyForAccountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.resource = reader.string();
                    break;
                case 2:
                    message.principalAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            resource: (0, helpers_1.isSet)(object.resource) ? String(object.resource) : "",
            principalAddress: (0, helpers_1.isSet)(object.principalAddress) ? String(object.principalAddress) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.resource !== undefined && (obj.resource = message.resource);
        message.principalAddress !== undefined && (obj.principalAddress = message.principalAddress);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPolicyForAccountRequest();
        message.resource = object.resource ?? "";
        message.principalAddress = object.principalAddress ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            resource: object?.resource,
            principalAddress: object?.principal_address
        };
    },
    toSDK(message) {
        const obj = {};
        obj.resource = message.resource;
        obj.principal_address = message.principalAddress;
        return obj;
    }
};
function createBaseQueryPolicyForAccountResponse() {
    return {
        policy: undefined
    };
}
exports.QueryPolicyForAccountResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.policy !== undefined) {
            types_2.Policy.encode(message.policy, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPolicyForAccountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.policy = types_2.Policy.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            policy: (0, helpers_1.isSet)(object.policy) ? types_2.Policy.fromJSON(object.policy) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.policy !== undefined && (obj.policy = message.policy ? types_2.Policy.toJSON(message.policy) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPolicyForAccountResponse();
        message.policy = object.policy !== undefined && object.policy !== null ? types_2.Policy.fromPartial(object.policy) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            policy: object.policy ? types_2.Policy.fromSDK(object.policy) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.policy !== undefined && (obj.policy = message.policy ? types_2.Policy.toSDK(message.policy) : undefined);
        return obj;
    }
};
function createBaseQueryVerifyPermissionRequest() {
    return {
        operator: "",
        bucketName: "",
        objectName: "",
        actionType: 0
    };
}
exports.QueryVerifyPermissionRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.bucketName !== "") {
            writer.uint32(18).string(message.bucketName);
        }
        if (message.objectName !== "") {
            writer.uint32(26).string(message.objectName);
        }
        if (message.actionType !== 0) {
            writer.uint32(32).int32(message.actionType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryVerifyPermissionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.string();
                    break;
                case 2:
                    message.bucketName = reader.string();
                    break;
                case 3:
                    message.objectName = reader.string();
                    break;
                case 4:
                    message.actionType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: (0, helpers_1.isSet)(object.operator) ? String(object.operator) : "",
            bucketName: (0, helpers_1.isSet)(object.bucketName) ? String(object.bucketName) : "",
            objectName: (0, helpers_1.isSet)(object.objectName) ? String(object.objectName) : "",
            actionType: (0, helpers_1.isSet)(object.actionType) ? (0, common_1.actionTypeFromJSON)(object.actionType) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.bucketName !== undefined && (obj.bucketName = message.bucketName);
        message.objectName !== undefined && (obj.objectName = message.objectName);
        message.actionType !== undefined && (obj.actionType = (0, common_1.actionTypeToJSON)(message.actionType));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryVerifyPermissionRequest();
        message.operator = object.operator ?? "";
        message.bucketName = object.bucketName ?? "";
        message.objectName = object.objectName ?? "";
        message.actionType = object.actionType ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            operator: object?.operator,
            bucketName: object?.bucket_name,
            objectName: object?.object_name,
            actionType: (0, helpers_1.isSet)(object.action_type) ? (0, common_1.actionTypeFromJSON)(object.action_type) : 0
        };
    },
    toSDK(message) {
        const obj = {};
        obj.operator = message.operator;
        obj.bucket_name = message.bucketName;
        obj.object_name = message.objectName;
        message.actionType !== undefined && (obj.action_type = (0, common_1.actionTypeToJSON)(message.actionType));
        return obj;
    }
};
function createBaseQueryVerifyPermissionResponse() {
    return {
        effect: 0
    };
}
exports.QueryVerifyPermissionResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.effect !== 0) {
            writer.uint32(8).int32(message.effect);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryVerifyPermissionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.effect = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            effect: (0, helpers_1.isSet)(object.effect) ? (0, common_1.effectFromJSON)(object.effect) : 0
        };
    },
    toJSON(message) {
        const obj = {};
        message.effect !== undefined && (obj.effect = (0, common_1.effectToJSON)(message.effect));
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryVerifyPermissionResponse();
        message.effect = object.effect ?? 0;
        return message;
    },
    fromSDK(object) {
        return {
            effect: (0, helpers_1.isSet)(object.effect) ? (0, common_1.effectFromJSON)(object.effect) : 0
        };
    },
    toSDK(message) {
        const obj = {};
        message.effect !== undefined && (obj.effect = (0, common_1.effectToJSON)(message.effect));
        return obj;
    }
};
function createBaseQueryHeadGroupRequest() {
    return {
        groupOwner: "",
        groupName: ""
    };
}
exports.QueryHeadGroupRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.groupOwner !== "") {
            writer.uint32(10).string(message.groupOwner);
        }
        if (message.groupName !== "") {
            writer.uint32(18).string(message.groupName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadGroupRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.groupOwner = reader.string();
                    break;
                case 2:
                    message.groupName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            groupOwner: (0, helpers_1.isSet)(object.groupOwner) ? String(object.groupOwner) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.groupOwner !== undefined && (obj.groupOwner = message.groupOwner);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadGroupRequest();
        message.groupOwner = object.groupOwner ?? "";
        message.groupName = object.groupName ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            groupOwner: object?.group_owner,
            groupName: object?.group_name
        };
    },
    toSDK(message) {
        const obj = {};
        obj.group_owner = message.groupOwner;
        obj.group_name = message.groupName;
        return obj;
    }
};
function createBaseQueryHeadGroupResponse() {
    return {
        groupInfo: undefined
    };
}
exports.QueryHeadGroupResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.groupInfo !== undefined) {
            types_1.GroupInfo.encode(message.groupInfo, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadGroupResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.groupInfo = types_1.GroupInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            groupInfo: (0, helpers_1.isSet)(object.groupInfo) ? types_1.GroupInfo.fromJSON(object.groupInfo) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.groupInfo !== undefined && (obj.groupInfo = message.groupInfo ? types_1.GroupInfo.toJSON(message.groupInfo) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadGroupResponse();
        message.groupInfo = object.groupInfo !== undefined && object.groupInfo !== null ? types_1.GroupInfo.fromPartial(object.groupInfo) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            groupInfo: object.group_info ? types_1.GroupInfo.fromSDK(object.group_info) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.groupInfo !== undefined && (obj.group_info = message.groupInfo ? types_1.GroupInfo.toSDK(message.groupInfo) : undefined);
        return obj;
    }
};
function createBaseQueryListGroupRequest() {
    return {
        pagination: undefined,
        groupOwner: ""
    };
}
exports.QueryListGroupRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        if (message.groupOwner !== "") {
            writer.uint32(18).string(message.groupOwner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryListGroupRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.groupOwner = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined,
            groupOwner: (0, helpers_1.isSet)(object.groupOwner) ? String(object.groupOwner) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        message.groupOwner !== undefined && (obj.groupOwner = message.groupOwner);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryListGroupRequest();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        message.groupOwner = object.groupOwner ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            pagination: object.pagination ? pagination_1.PageRequest.fromSDK(object.pagination) : undefined,
            groupOwner: object?.group_owner
        };
    },
    toSDK(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toSDK(message.pagination) : undefined);
        obj.group_owner = message.groupOwner;
        return obj;
    }
};
function createBaseQueryListGroupResponse() {
    return {
        pagination: undefined,
        groupInfos: []
    };
}
exports.QueryListGroupResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.groupInfos) {
            types_1.GroupInfo.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryListGroupResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.groupInfos.push(types_1.GroupInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
            groupInfos: Array.isArray(object?.groupInfos) ? object.groupInfos.map((e) => types_1.GroupInfo.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        if (message.groupInfos) {
            obj.groupInfos = message.groupInfos.map(e => e ? types_1.GroupInfo.toJSON(e) : undefined);
        }
        else {
            obj.groupInfos = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryListGroupResponse();
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;
        message.groupInfos = object.groupInfos?.map(e => types_1.GroupInfo.fromPartial(e)) || [];
        return message;
    },
    fromSDK(object) {
        return {
            pagination: object.pagination ? pagination_1.PageResponse.fromSDK(object.pagination) : undefined,
            groupInfos: Array.isArray(object?.group_infos) ? object.group_infos.map((e) => types_1.GroupInfo.fromSDK(e)) : []
        };
    },
    toSDK(message) {
        const obj = {};
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toSDK(message.pagination) : undefined);
        if (message.groupInfos) {
            obj.group_infos = message.groupInfos.map(e => e ? types_1.GroupInfo.toSDK(e) : undefined);
        }
        else {
            obj.group_infos = [];
        }
        return obj;
    }
};
function createBaseQueryHeadGroupMemberRequest() {
    return {
        member: "",
        groupOwner: "",
        groupName: ""
    };
}
exports.QueryHeadGroupMemberRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.member !== "") {
            writer.uint32(10).string(message.member);
        }
        if (message.groupOwner !== "") {
            writer.uint32(18).string(message.groupOwner);
        }
        if (message.groupName !== "") {
            writer.uint32(26).string(message.groupName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadGroupMemberRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.member = reader.string();
                    break;
                case 2:
                    message.groupOwner = reader.string();
                    break;
                case 3:
                    message.groupName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            member: (0, helpers_1.isSet)(object.member) ? String(object.member) : "",
            groupOwner: (0, helpers_1.isSet)(object.groupOwner) ? String(object.groupOwner) : "",
            groupName: (0, helpers_1.isSet)(object.groupName) ? String(object.groupName) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.member !== undefined && (obj.member = message.member);
        message.groupOwner !== undefined && (obj.groupOwner = message.groupOwner);
        message.groupName !== undefined && (obj.groupName = message.groupName);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadGroupMemberRequest();
        message.member = object.member ?? "";
        message.groupOwner = object.groupOwner ?? "";
        message.groupName = object.groupName ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            member: object?.member,
            groupOwner: object?.group_owner,
            groupName: object?.group_name
        };
    },
    toSDK(message) {
        const obj = {};
        obj.member = message.member;
        obj.group_owner = message.groupOwner;
        obj.group_name = message.groupName;
        return obj;
    }
};
function createBaseQueryHeadGroupMemberResponse() {
    return {
        groupMember: undefined
    };
}
exports.QueryHeadGroupMemberResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.groupMember !== undefined) {
            types_2.GroupMember.encode(message.groupMember, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryHeadGroupMemberResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.groupMember = types_2.GroupMember.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            groupMember: (0, helpers_1.isSet)(object.groupMember) ? types_2.GroupMember.fromJSON(object.groupMember) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.groupMember !== undefined && (obj.groupMember = message.groupMember ? types_2.GroupMember.toJSON(message.groupMember) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryHeadGroupMemberResponse();
        message.groupMember = object.groupMember !== undefined && object.groupMember !== null ? types_2.GroupMember.fromPartial(object.groupMember) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            groupMember: object.group_member ? types_2.GroupMember.fromSDK(object.group_member) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.groupMember !== undefined && (obj.group_member = message.groupMember ? types_2.GroupMember.toSDK(message.groupMember) : undefined);
        return obj;
    }
};
function createBaseQueryPolicyForGroupRequest() {
    return {
        resource: "",
        principalGroupId: ""
    };
}
exports.QueryPolicyForGroupRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.resource !== "") {
            writer.uint32(10).string(message.resource);
        }
        if (message.principalGroupId !== "") {
            writer.uint32(18).string(message.principalGroupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPolicyForGroupRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.resource = reader.string();
                    break;
                case 2:
                    message.principalGroupId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            resource: (0, helpers_1.isSet)(object.resource) ? String(object.resource) : "",
            principalGroupId: (0, helpers_1.isSet)(object.principalGroupId) ? String(object.principalGroupId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.resource !== undefined && (obj.resource = message.resource);
        message.principalGroupId !== undefined && (obj.principalGroupId = message.principalGroupId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPolicyForGroupRequest();
        message.resource = object.resource ?? "";
        message.principalGroupId = object.principalGroupId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            resource: object?.resource,
            principalGroupId: object?.principal_group_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.resource = message.resource;
        obj.principal_group_id = message.principalGroupId;
        return obj;
    }
};
function createBaseQueryPolicyForGroupResponse() {
    return {
        policy: undefined
    };
}
exports.QueryPolicyForGroupResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.policy !== undefined) {
            types_2.Policy.encode(message.policy, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPolicyForGroupResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.policy = types_2.Policy.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            policy: (0, helpers_1.isSet)(object.policy) ? types_2.Policy.fromJSON(object.policy) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.policy !== undefined && (obj.policy = message.policy ? types_2.Policy.toJSON(message.policy) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPolicyForGroupResponse();
        message.policy = object.policy !== undefined && object.policy !== null ? types_2.Policy.fromPartial(object.policy) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            policy: object.policy ? types_2.Policy.fromSDK(object.policy) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.policy !== undefined && (obj.policy = message.policy ? types_2.Policy.toSDK(message.policy) : undefined);
        return obj;
    }
};
function createBaseQueryPolicyByIdRequest() {
    return {
        policyId: ""
    };
}
exports.QueryPolicyByIdRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.policyId !== "") {
            writer.uint32(10).string(message.policyId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPolicyByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.policyId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            policyId: (0, helpers_1.isSet)(object.policyId) ? String(object.policyId) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.policyId !== undefined && (obj.policyId = message.policyId);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPolicyByIdRequest();
        message.policyId = object.policyId ?? "";
        return message;
    },
    fromSDK(object) {
        return {
            policyId: object?.policy_id
        };
    },
    toSDK(message) {
        const obj = {};
        obj.policy_id = message.policyId;
        return obj;
    }
};
function createBaseQueryPolicyByIdResponse() {
    return {
        policy: undefined
    };
}
exports.QueryPolicyByIdResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.policy !== undefined) {
            types_2.Policy.encode(message.policy, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPolicyByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.policy = types_2.Policy.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            policy: (0, helpers_1.isSet)(object.policy) ? types_2.Policy.fromJSON(object.policy) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.policy !== undefined && (obj.policy = message.policy ? types_2.Policy.toJSON(message.policy) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryPolicyByIdResponse();
        message.policy = object.policy !== undefined && object.policy !== null ? types_2.Policy.fromPartial(object.policy) : undefined;
        return message;
    },
    fromSDK(object) {
        return {
            policy: object.policy ? types_2.Policy.fromSDK(object.policy) : undefined
        };
    },
    toSDK(message) {
        const obj = {};
        message.policy !== undefined && (obj.policy = message.policy ? types_2.Policy.toSDK(message.policy) : undefined);
        return obj;
    }
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.HeadBucket = this.HeadBucket.bind(this);
        this.HeadBucketById = this.HeadBucketById.bind(this);
        this.HeadBucketNFT = this.HeadBucketNFT.bind(this);
        this.HeadObject = this.HeadObject.bind(this);
        this.HeadObjectById = this.HeadObjectById.bind(this);
        this.HeadObjectNFT = this.HeadObjectNFT.bind(this);
        this.ListBuckets = this.ListBuckets.bind(this);
        this.ListObjects = this.ListObjects.bind(this);
        this.ListObjectsByBucketId = this.ListObjectsByBucketId.bind(this);
        this.HeadGroupNFT = this.HeadGroupNFT.bind(this);
        this.QueryPolicyForAccount = this.QueryPolicyForAccount.bind(this);
        this.VerifyPermission = this.VerifyPermission.bind(this);
        this.HeadGroup = this.HeadGroup.bind(this);
        this.ListGroup = this.ListGroup.bind(this);
        this.HeadGroupMember = this.HeadGroupMember.bind(this);
        this.QueryPolicyForGroup = this.QueryPolicyForGroup.bind(this);
        this.QueryPolicyById = this.QueryPolicyById.bind(this);
    }
    Params(request = {}) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "Params", data);
        return promise.then(data => exports.QueryParamsResponse.decode(new _m0.Reader(data)));
    }
    HeadBucket(request) {
        const data = exports.QueryHeadBucketRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "HeadBucket", data);
        return promise.then(data => exports.QueryHeadBucketResponse.decode(new _m0.Reader(data)));
    }
    HeadBucketById(request) {
        const data = exports.QueryHeadBucketByIdRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "HeadBucketById", data);
        return promise.then(data => exports.QueryHeadBucketResponse.decode(new _m0.Reader(data)));
    }
    HeadBucketNFT(request) {
        const data = exports.QueryNFTRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "HeadBucketNFT", data);
        return promise.then(data => exports.QueryBucketNFTResponse.decode(new _m0.Reader(data)));
    }
    HeadObject(request) {
        const data = exports.QueryHeadObjectRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "HeadObject", data);
        return promise.then(data => exports.QueryHeadObjectResponse.decode(new _m0.Reader(data)));
    }
    HeadObjectById(request) {
        const data = exports.QueryHeadObjectByIdRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "HeadObjectById", data);
        return promise.then(data => exports.QueryHeadObjectResponse.decode(new _m0.Reader(data)));
    }
    HeadObjectNFT(request) {
        const data = exports.QueryNFTRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "HeadObjectNFT", data);
        return promise.then(data => exports.QueryObjectNFTResponse.decode(new _m0.Reader(data)));
    }
    ListBuckets(request = {
        pagination: undefined
    }) {
        const data = exports.QueryListBucketsRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "ListBuckets", data);
        return promise.then(data => exports.QueryListBucketsResponse.decode(new _m0.Reader(data)));
    }
    ListObjects(request) {
        const data = exports.QueryListObjectsRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "ListObjects", data);
        return promise.then(data => exports.QueryListObjectsResponse.decode(new _m0.Reader(data)));
    }
    ListObjectsByBucketId(request) {
        const data = exports.QueryListObjectsByBucketIdRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "ListObjectsByBucketId", data);
        return promise.then(data => exports.QueryListObjectsResponse.decode(new _m0.Reader(data)));
    }
    HeadGroupNFT(request) {
        const data = exports.QueryNFTRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "HeadGroupNFT", data);
        return promise.then(data => exports.QueryGroupNFTResponse.decode(new _m0.Reader(data)));
    }
    QueryPolicyForAccount(request) {
        const data = exports.QueryPolicyForAccountRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "QueryPolicyForAccount", data);
        return promise.then(data => exports.QueryPolicyForAccountResponse.decode(new _m0.Reader(data)));
    }
    VerifyPermission(request) {
        const data = exports.QueryVerifyPermissionRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "VerifyPermission", data);
        return promise.then(data => exports.QueryVerifyPermissionResponse.decode(new _m0.Reader(data)));
    }
    HeadGroup(request) {
        const data = exports.QueryHeadGroupRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "HeadGroup", data);
        return promise.then(data => exports.QueryHeadGroupResponse.decode(new _m0.Reader(data)));
    }
    ListGroup(request) {
        const data = exports.QueryListGroupRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "ListGroup", data);
        return promise.then(data => exports.QueryListGroupResponse.decode(new _m0.Reader(data)));
    }
    HeadGroupMember(request) {
        const data = exports.QueryHeadGroupMemberRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "HeadGroupMember", data);
        return promise.then(data => exports.QueryHeadGroupMemberResponse.decode(new _m0.Reader(data)));
    }
    QueryPolicyForGroup(request) {
        const data = exports.QueryPolicyForGroupRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "QueryPolicyForGroup", data);
        return promise.then(data => exports.QueryPolicyForGroupResponse.decode(new _m0.Reader(data)));
    }
    QueryPolicyById(request) {
        const data = exports.QueryPolicyByIdRequest.encode(request).finish();
        const promise = this.rpc.request("greenfield.storage.Query", "QueryPolicyById", data);
        return promise.then(data => exports.QueryPolicyByIdResponse.decode(new _m0.Reader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
//# sourceMappingURL=query.js.map