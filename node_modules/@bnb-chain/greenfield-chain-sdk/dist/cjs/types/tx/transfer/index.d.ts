import { BaseAccount } from '@bnb-chain/greenfield-cosmos-types/cosmos/auth/v1beta1/auth';
import { BaseTx, IBaseMsg, IRawTxInfo, ISendMsg } from '../baseTx';
export interface ITransferTxInfo {
    from: string;
    to: string;
    amount: string;
}
export declare class TransferTx extends BaseTx {
    readonly rpcUrl: string;
    readonly chainId: string;
    readonly txType: string;
    constructor(rpcUrl: string, chainId: string);
    getRawTxInfo({ sequence, sign, pubKey, from, to, amount, gasLimit, denom, gasPrice, }: Pick<ITransferTxInfo & IBaseMsg, 'sequence' | 'from' | 'to' | 'amount' | 'gasLimit' | 'denom' | 'gasPrice'> & {
        sign: string;
    } & {
        pubKey: BaseAccount['pubKey'];
    }): Promise<IRawTxInfo>;
    getSimulateBytes({ from, to, amount, denom, }: Pick<ITransferTxInfo & IBaseMsg, 'from' | 'to' | 'amount' | 'denom'>): Uint8Array;
    signTx({ from, to, sequence, accountNumber, amount, denom, gasLimit, gasPrice, }: IBaseMsg & ISendMsg): Promise<import("../..").ISignature712>;
    getAuthInfoBytes({ sequence, pubKey, gasLimit, denom, gasPrice, }: Pick<IBaseMsg, 'denom' | 'sequence' | 'gasLimit' | 'gasPrice'> & {
        pubKey: BaseAccount['pubKey'];
    }): Uint8Array;
}
