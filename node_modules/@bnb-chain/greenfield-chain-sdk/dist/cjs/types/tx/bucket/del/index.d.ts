import { BaseAccount } from '@bnb-chain/greenfield-cosmos-types/cosmos/auth/v1beta1/auth';
import { type IDeleteBucketMsg } from '../../../messages/greenfield/storage/deleteBucket';
import { type IRawTxInfo } from '../../../tx';
import { BaseTx, type IBaseMsg } from '../../baseTx';
export declare class DelBucketTx extends BaseTx {
    readonly rpcUrl: string;
    readonly chainId: string;
    readonly txType: string;
    constructor(rpcUrl: string, chainId: string);
    signTx({ from, bucketName, accountNumber, sequence, gasLimit, denom, gasPrice, }: IBaseMsg & IDeleteBucketMsg): Promise<import("../../../sign").ISignature712>;
    getRawTxInfo({ bucketName, from, sequence, gasLimit, sign, pubKey, denom, gasPrice, }: IBaseMsg & IDeleteBucketMsg & {
        sign: string;
    } & {
        pubKey: BaseAccount['pubKey'];
    }): Promise<IRawTxInfo>;
    getSimulateBytes({ from, bucketName, }: Pick<IBaseMsg & IDeleteBucketMsg, 'from' | 'bucketName'>): Uint8Array;
    getAuthInfoBytes({ sequence, pubKey, denom, gasLimit, gasPrice, }: Pick<IBaseMsg & IDeleteBucketMsg, 'denom' | 'sequence' | 'gasLimit' | 'gasPrice'> & {
        pubKey: BaseAccount['pubKey'];
    }): Uint8Array;
}
