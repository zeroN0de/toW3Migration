import { BaseAccount } from '@bnb-chain/greenfield-cosmos-types/cosmos/auth/v1beta1/auth';
import { ICreateBucketMsg } from '../../../messages/greenfield/storage/createBucket';
import { IRawTxInfo } from '../../../tx';
import { BaseTx, IBaseMsg } from '../../baseTx';
export declare class CreateBucketTx extends BaseTx {
    readonly rpcUrl: string;
    readonly chainId: string;
    readonly txType: string;
    constructor(rpcUrl: string, chainId: string);
    signTx({ bucketName, from, sequence, primarySpAddress, denom, accountNumber, expiredHeight, chargedReadQuota, sig, visibility, gasLimit, gasPrice, paymentAddress, }: IBaseMsg & ICreateBucketMsg): Promise<import("../../../sign").ISignature712>;
    getRawTxInfo({ bucketName, from, sequence, primarySpAddress, denom, expiredHeight, sig, visibility, gasLimit, sign, pubKey, chargedReadQuota, gasPrice, paymentAddress, }: IBaseMsg & ICreateBucketMsg & {
        sign: string;
    } & {
        pubKey: BaseAccount['pubKey'];
    }): Promise<IRawTxInfo>;
    getAuthInfoBytes({ sequence, pubKey, denom, gasLimit, gasPrice, }: Pick<IBaseMsg & ICreateBucketMsg, 'sequence' | 'denom' | 'gasLimit' | 'gasPrice'> & {
        pubKey: BaseAccount['pubKey'];
    }): Uint8Array;
    getSimulateBytes({ from, bucketName, primarySpAddress, expiredHeight, sig, visibility, chargedReadQuota, paymentAddress, }: Pick<IBaseMsg & ICreateBucketMsg, 'from' | 'denom' | 'bucketName' | 'primarySpAddress' | 'sig' | 'expiredHeight' | 'visibility' | 'chargedReadQuota' | 'paymentAddress'>): Uint8Array;
}
