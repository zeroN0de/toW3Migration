import { QueryHeadObjectResponse } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/query';
import { MsgCancelCreateObject, MsgDeleteObject } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/tx';
import { ICreateObjectMsgType, IGetCreateObjectApproval, IGetObjectPropsType, IListObjectsByBucketNamePropsType, IObjectProps, IObjectResultType, IPutObjectPropsType, ITxOption, SimulateOrBroad, SimulateOrBroadResponse } from '../types';
import { Account } from './account';
import { IBucket } from './bucket';
export interface IObject {
    getCreateObjectApproval(getApprovalParams: IGetCreateObjectApproval): Promise<IObjectResultType<string>>;
    createObject<T extends ITxOption>(getApprovalParams: IGetCreateObjectApproval, txOption: T): Promise<SimulateOrBroad<T>>;
    createObject(getApprovalParams: IGetCreateObjectApproval, txOption: ITxOption): Promise<SimulateOrBroadResponse>;
    uploadObject(configParam: IPutObjectPropsType): Promise<IObjectResultType<null>>;
    cancelCreateObject<T extends ITxOption>(msg: MsgCancelCreateObject, txOption: T): Promise<SimulateOrBroad<T>>;
    cancelCreateObject(msg: MsgCancelCreateObject, txOption: ITxOption): Promise<SimulateOrBroadResponse>;
    deleteObject<T extends ITxOption>(msg: MsgDeleteObject, txOption: T): Promise<SimulateOrBroad<T>>;
    deleteObject(msg: MsgDeleteObject, txOption: ITxOption): Promise<SimulateOrBroadResponse>;
    headObject(bucketName: string, objectName: string): Promise<QueryHeadObjectResponse>;
    headObjectById(objectId: string): Promise<QueryHeadObjectResponse>;
    getObject(configParam: IGetObjectPropsType): Promise<IObjectResultType<Blob>>;
    downloadFile(configParam: IGetObjectPropsType): Promise<void>;
    listObjects(configParam: IListObjectsByBucketNamePropsType): Promise<IObjectResultType<Array<IObjectProps>>>;
    createFolder<T extends ITxOption>(getApprovalParams: IGetCreateObjectApproval, txOption: T): Promise<SimulateOrBroad<T>>;
    createFolder(getApprovalParams: IGetCreateObjectApproval, txOption: ITxOption): Promise<SimulateOrBroadResponse>;
}
export declare class Object extends Account implements IObject {
    private bucket;
    constructor(rpcUrl: string, chainId: string, bucket: IBucket);
    getCreateObjectApproval({ bucketName, creator, objectName, visibility, spInfo, duration, file, redundancyType, }: IGetCreateObjectApproval): Promise<{
        code: number;
        xml: Document;
        message: string;
        statusCode: number;
        body?: undefined;
        signedMsg?: undefined;
    } | {
        code: number;
        message: string;
        body: string;
        statusCode: number;
        signedMsg: ICreateObjectMsgType;
        xml?: undefined;
    } | {
        code: number;
        message: any;
        statusCode: number;
        xml?: undefined;
        body?: undefined;
        signedMsg?: undefined;
    }>;
    createObject(getApprovalParams: IGetCreateObjectApproval, txOption: ITxOption): Promise<any>;
    uploadObject(configParam: IPutObjectPropsType): Promise<IObjectResultType<null>>;
    cancelCreateObject(msg: MsgCancelCreateObject, txOption: ITxOption): Promise<any>;
    deleteObject(msg: MsgDeleteObject, txOption: ITxOption): Promise<any>;
    headObject(bucketName: string, objectName: string): Promise<QueryHeadObjectResponse>;
    headObjectById(objectId: string): Promise<QueryHeadObjectResponse>;
    getObject(configParam: IGetObjectPropsType): Promise<{
        code: number;
        xml: Document;
        message: string;
        statusCode: number;
        body?: undefined;
    } | {
        code: number;
        body: Blob;
        message: string;
        statusCode: number;
        xml?: undefined;
    } | {
        code: number;
        message: any;
        statusCode: number;
        xml?: undefined;
        body?: undefined;
    }>;
    downloadFile(configParam: IGetObjectPropsType): Promise<void>;
    listObjects(configParam: IListObjectsByBucketNamePropsType): Promise<{
        code: number;
        message: string;
        statusCode: number;
        body: any;
    } | {
        code: number;
        message: any;
        statusCode: number;
        body?: undefined;
    }>;
    createFolder(getApprovalParams: IGetCreateObjectApproval, txOption: ITxOption): Promise<any>;
}
