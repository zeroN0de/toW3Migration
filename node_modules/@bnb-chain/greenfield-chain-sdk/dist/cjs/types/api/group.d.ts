import { QueryHeadGroupMemberResponse, QueryHeadGroupResponse, QueryPolicyForGroupRequest, QueryPolicyForGroupResponse } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/query';
import { MsgCreateGroup, MsgDeleteGroup, MsgLeaveGroup, MsgUpdateGroupMember } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/tx';
import { ITxOption, SimulateOrBroad, SimulateOrBroadResponse } from '..';
import { Account } from './account';
export interface IGroup {
    /**
     * create a new group on greenfield chain the group members can be initialized  or not
     */
    createGroup<T extends ITxOption>(msg: MsgCreateGroup, txOption: T): Promise<SimulateOrBroad<T>>;
    createGroup(msg: MsgCreateGroup, txOption: ITxOption): Promise<SimulateOrBroadResponse>;
    /**
     * send DeleteGroup txn to greenfield chain and return txn hash
     */
    deleteGroup<T extends ITxOption>(msg: MsgDeleteGroup, txOption: T): Promise<SimulateOrBroad<T>>;
    deleteGroup(msg: MsgDeleteGroup, txOption: ITxOption): Promise<SimulateOrBroadResponse>;
    /**
     * support adding or removing members from the group and return the txn hash
     */
    updateGroupMember<T extends ITxOption>(msg: MsgUpdateGroupMember, txOption: T): Promise<SimulateOrBroad<T>>;
    updateGroupMember(msg: MsgUpdateGroupMember, txOption: ITxOption): Promise<SimulateOrBroadResponse>;
    /**
     * make the member leave the specific group
     */
    leaveGroup<T extends ITxOption>(address: string, msg: MsgLeaveGroup, txOption: T): Promise<SimulateOrBroad<T>>;
    leaveGroup(address: string, msg: MsgLeaveGroup, txOption: ITxOption): Promise<SimulateOrBroadResponse>;
    /**
     * query the groupInfo on chain, return the group info if exists
     */
    headGroup(groupName: string, groupOwner: string): Promise<QueryHeadGroupResponse>;
    /**
     * query the group member info on chain, return true if the member exists in group
     */
    headGroupMember(groupName: string, groupOwner: string, member: string): Promise<QueryHeadGroupMemberResponse>;
    /**
     * get the bucket policy info of the group specified by group id
     * it queries a bucket policy that grants permission to a group
     */
    getPolicyOfGroup(request: QueryPolicyForGroupRequest): Promise<QueryPolicyForGroupResponse>;
}
export declare class Group extends Account implements IGroup {
    createGroup(msg: MsgCreateGroup, txOption: ITxOption): Promise<any>;
    deleteGroup(msg: MsgDeleteGroup, txOption: ITxOption): Promise<any>;
    updateGroupMember(msg: MsgUpdateGroupMember, txOption: ITxOption): Promise<any>;
    leaveGroup(address: string, msg: MsgLeaveGroup, txOption: ITxOption): Promise<any>;
    headGroup(groupName: string, groupOwner: string): Promise<QueryHeadGroupResponse>;
    headGroupMember(groupName: string, groupOwner: string, member: string): Promise<QueryHeadGroupMemberResponse>;
    getPolicyOfGroup(request: QueryPolicyForGroupRequest): Promise<QueryPolicyForGroupResponse>;
}
