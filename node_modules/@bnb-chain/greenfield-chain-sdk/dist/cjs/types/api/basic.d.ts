/// <reference types="node" />
import { BaseAccount } from '@bnb-chain/greenfield-cosmos-types/cosmos/auth/v1beta1/auth';
import { GetBlockByHeightResponse, GetLatestBlockResponse, GetLatestValidatorSetRequest, GetNodeInfoResponse } from '@bnb-chain/greenfield-cosmos-types/cosmos/base/tendermint/v1beta1/query';
import { DeliverTxResponse, ProtobufRpcClient } from '@cosmjs/stargate';
import { AuthExtension, BankExtension, QueryClient, TxExtension } from '@cosmjs/stargate';
import { AuthzExtension } from '@cosmjs/stargate/build/modules/authz/queries';
import { Tendermint34Client } from '@cosmjs/tendermint-rpc';
import { ISimulateGasFee, ITxOption } from '..';
export declare const makeClientWithExtension: (rpcUrl: string) => Promise<[
    QueryClient & BankExtension & TxExtension & AuthExtension & AuthzExtension,
    Tendermint34Client
]>;
export declare const makeRpcClient: (rpcUrl: string) => Promise<ProtobufRpcClient>;
export interface IBasic {
    /**
     * returns the current node info of the greenfield that the client is connected to.
     */
    getNodeInfo(): Promise<GetNodeInfoResponse>;
    /**
     * retrieves the latest block from the chain.
     */
    getLatestBlock(): Promise<GetLatestBlockResponse>;
    /**
     * retrieves the height of the latest block from the chain.
     * returns the block height and any error that occurred during the operation.
     */
    getLatestBlockHeight(): Promise<number>;
    /**
     * retrieves the syncing status of the node. If true, means the node is catching up the latest block.
     * The function returns a boolean indicating whether the node is syncing and any error that occurred during the operation.
     */
    getSyncing(): Promise<boolean>;
    /**
     * GetBlockByHeight retrieves the block at the given height from the chain.
     * The function returns a pointer to a Block object and any error that occurred during the operation.
     */
    getBlockByHeight(height: number): Promise<GetBlockByHeightResponse>;
    /**
     * retrieves the latest validator set from the chain.
     * The function returns the block height of the validator set
     */
    GetLatestValidatorSet(request: GetLatestValidatorSetRequest): Promise<number>;
    /**
     * simulates a transaction containing the provided messages on the chain.
      The function returns a pointer to a ISimulateGasFee
     */
    simulateRawTx(txBodyBytes: Uint8Array, accountInfo: BaseAccount, txOption: Pick<ITxOption, 'denom'>): Promise<ISimulateGasFee>;
    /**
     * broadcasts a transaction containing the provided messages to the chain.
      The function returns a pointer to a BroadcastTxResponse and any error that occurred during the operation.
     */
    broadcastRawTx(txRawBytes: Uint8Array): Promise<DeliverTxResponse>;
}
export declare class Basic implements IBasic {
    protected readonly rpcUrl: string;
    protected readonly chainId: string;
    constructor(rpcUrl: string, chainId: string);
    getNodeInfo(): Promise<GetNodeInfoResponse>;
    getLatestBlock(): Promise<GetLatestBlockResponse>;
    getLatestBlockHeight(): Promise<number>;
    getSyncing(): Promise<boolean>;
    getBlockByHeight(height: number): Promise<GetBlockByHeightResponse>;
    GetLatestValidatorSet(request: GetLatestValidatorSetRequest): Promise<number>;
    private rpcClient;
    protected getRpcClient(): Promise<ProtobufRpcClient>;
    simulateRawTx(txBodyBytes: Uint8Array, accountInfo: BaseAccount, txOption: Pick<ITxOption, 'denom'>): Promise<ISimulateGasFee>;
    broadcastRawTx(txRawBytes: Uint8Array): Promise<DeliverTxResponse>;
    private queryClient;
    protected getQueryClient(): Promise<QueryClient & BankExtension & TxExtension & AuthExtension & AuthzExtension>;
    private getAuthInfoBytes;
    protected getRawTxBytes(typeUrl: string, msgEIP712Structor: object, msgEIP712: object, bodyBytes: Uint8Array, accountInfo: BaseAccount, txOption: Omit<ITxOption, 'simulate'>): Promise<Uint8Array>;
    protected getBodyBytes(typeUrl: string, msgBytes: Uint8Array): Uint8Array;
    protected getEIP712Struct(typeUrl: string, types: object, accountNumber: string, sequence: string, chainId: string, msg: object, txOption: Omit<ITxOption, 'simulate'>): {
        types: object;
        primaryType: string;
        domain: {
            name: string;
            version: string;
            chainId: string;
            verifyingContract: string;
            salt: string;
        };
        message: object;
    };
    protected signTx(addr: string, message: string): Promise<{
        signature: any;
        messageHash: Buffer;
        pubKey: {
            typeUrl: string;
            value: Uint8Array;
        };
    }>;
}
