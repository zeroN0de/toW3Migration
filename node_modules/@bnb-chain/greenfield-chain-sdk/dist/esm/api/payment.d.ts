import { QueryGetStreamRecordResponse, QueryParamsResponse } from '@bnb-chain/greenfield-cosmos-types/greenfield/payment/query';
import { MsgDeposit, MsgDisableRefund, MsgWithdraw } from '@bnb-chain/greenfield-cosmos-types/greenfield/payment/tx';
import { ITxOption, SimulateOrBroad, SimulateOrBroadResponse } from '..';
import { Account } from './account';
export interface IPayment {
    /**
     * retrieves stream record information for a given stream address.
     */
    getStreamRecord(account: string): Promise<QueryGetStreamRecordResponse>;
    /**
     * deposits BNB to a stream account.
     */
    deposit<T extends ITxOption>(msg: MsgDeposit, txOption: T): Promise<SimulateOrBroad<T>>;
    deposit(msg: MsgDeposit, txOption: ITxOption): Promise<SimulateOrBroadResponse>;
    /**
     * withdraws BNB from a stream account.
     */
    withdraw<T extends ITxOption>(msg: MsgWithdraw, txOption: T): Promise<SimulateOrBroad<T>>;
    withdraw(msg: MsgWithdraw, txOption: ITxOption): Promise<SimulateOrBroadResponse>;
    /**
     * disables refund for a stream account.
     */
    disableRefund<T extends ITxOption>(msg: MsgDisableRefund, txOption: T): Promise<SimulateOrBroad<T>>;
    disableRefund(msg: MsgDisableRefund, txOption: ITxOption): Promise<SimulateOrBroadResponse>;
    params(): Promise<QueryParamsResponse>;
}
export declare class Payment extends Account implements IPayment {
    getStreamRecord(account: string): Promise<QueryGetStreamRecordResponse>;
    params(): Promise<QueryParamsResponse>;
    deposit(msg: MsgDeposit, txOption: ITxOption): Promise<any>;
    withdraw(msg: MsgWithdraw, txOption: ITxOption): Promise<any>;
    disableRefund(msg: MsgDisableRefund, txOption: ITxOption): Promise<any>;
}
