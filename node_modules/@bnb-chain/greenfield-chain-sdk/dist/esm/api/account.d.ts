import { BaseAccount } from '@bnb-chain/greenfield-cosmos-types/cosmos/auth/v1beta1/auth';
import { QueryModuleAccountByNameResponse, QueryModuleAccountsResponse } from '@bnb-chain/greenfield-cosmos-types/cosmos/auth/v1beta1/query';
import { QueryBalanceRequest, QueryBalanceResponse } from '@bnb-chain/greenfield-cosmos-types/cosmos/bank/v1beta1/query';
import { MsgMultiSend, MsgSend } from '@bnb-chain/greenfield-cosmos-types/cosmos/bank/v1beta1/tx';
import { QueryGetPaymentAccountRequest, QueryGetPaymentAccountResponse, QueryGetPaymentAccountsByOwnerResponse } from '@bnb-chain/greenfield-cosmos-types/greenfield/payment/query';
import { MsgCreatePaymentAccount } from '@bnb-chain/greenfield-cosmos-types/greenfield/payment/tx';
import { Basic } from './basic';
import { ITxOption, SimulateOrBroad, SimulateOrBroadResponse } from '..';
export interface IAccount {
    /**
     * retrieves account information for a given address.
     */
    getAccount(address: string): Promise<BaseAccount>;
    /**
     * retrieves balance information of an account for a given address.
     */
    getAccountBalance(request: QueryBalanceRequest): Promise<QueryBalanceResponse>;
    /**
     * takes an address string as parameters and returns a pointer to a paymentTypes.
     */
    getPaymentAccount(request: QueryGetPaymentAccountRequest): Promise<QueryGetPaymentAccountResponse>;
    getModuleAccounts(): Promise<QueryModuleAccountsResponse>;
    getModuleAccountByName(name: string): Promise<QueryModuleAccountByNameResponse>;
    /**
     * retrieves all payment accounts owned by the given address
     */
    getPaymentAccountsByOwner(owner: string): Promise<QueryGetPaymentAccountsByOwnerResponse>;
    createPaymentAccount<T extends ITxOption>(msg: MsgCreatePaymentAccount, txOption: T): Promise<SimulateOrBroad<T>>;
    createPaymentAccount(msg: MsgCreatePaymentAccount, txOption: ITxOption): Promise<SimulateOrBroadResponse>;
    /**
     * Transfer function
     */
    transfer<T extends ITxOption>(msg: MsgSend, txOption: T): Promise<SimulateOrBroad<T>>;
    transfer(msg: MsgSend, txOption: ITxOption): Promise<SimulateOrBroadResponse>;
    /**
     * makes transfers from an account to multiple accounts with respect amounts
     */
    multiTransfer<T extends ITxOption>(address: string, msg: MsgMultiSend, txOption: T): Promise<SimulateOrBroad<T>>;
    multiTransfer(address: string, msg: MsgMultiSend, txOption: ITxOption): Promise<SimulateOrBroadResponse>;
}
export declare class Account extends Basic implements IAccount {
    multiTransfer(address: string, msg: MsgMultiSend, txOption: ITxOption): Promise<any>;
    createPaymentAccount(msg: MsgCreatePaymentAccount, txOption: ITxOption): Promise<any>;
    getPaymentAccountsByOwner(owner: string): Promise<QueryGetPaymentAccountsByOwnerResponse>;
    getModuleAccountByName(name: string): Promise<QueryModuleAccountByNameResponse>;
    getModuleAccounts(): Promise<QueryModuleAccountsResponse>;
    getPaymentAccount(request: QueryGetPaymentAccountRequest): Promise<QueryGetPaymentAccountResponse>;
    getAccountBalance(request: QueryBalanceRequest): Promise<QueryBalanceResponse>;
    getAccount(address: string): Promise<BaseAccount>;
    transfer(msg: MsgSend, txOption: ITxOption): Promise<any>;
}
