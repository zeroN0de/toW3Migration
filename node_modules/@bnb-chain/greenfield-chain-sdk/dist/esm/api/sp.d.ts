import { MsgUpdateSpStoragePrice } from '@bnb-chain/greenfield-cosmos-types/greenfield/sp/tx';
import { SecondarySpStorePrice, SpStoragePrice, StorageProvider } from '@bnb-chain/greenfield-cosmos-types/greenfield/sp/types';
import { Account } from './account';
import { ITxOption } from '..';
export interface ISp {
    /**
     * return the storage provider info on chain
        isInService indicates if only display the sp with STATUS_IN_SERVICE status
     */
    getStorageProviders(): Promise<StorageProvider[]>;
    /**
     * return the sp info with the sp chain address
     */
    getStorageProviderInfo(spAddress: string): Promise<StorageProvider | undefined>;
    /**
     * returns the storage price for a particular storage provider, including update time, read price, store price and .etc.
     */
    getStoragePriceByTime(spAddress: string): Promise<SpStoragePrice | undefined>;
    /**
     * returns the secondary storage price, including update time and store price
     */
    getSecondarySpStorePrice(): Promise<SecondarySpStorePrice | undefined>;
}
export declare class Sp extends Account implements ISp {
    getStorageProviders(): Promise<StorageProvider[]>;
    getStorageProviderInfo(spAddress: string): Promise<StorageProvider | undefined>;
    getStoragePriceByTime(spAddress: string): Promise<SpStoragePrice | undefined>;
    getSecondarySpStorePrice(): Promise<SecondarySpStorePrice | undefined>;
    updateSpStoragePrice(address: string, msg: MsgUpdateSpStoragePrice, txOption: ITxOption): Promise<any>;
}
