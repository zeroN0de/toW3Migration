import { ActionType } from '@bnb-chain/greenfield-cosmos-types/greenfield/permission/common';
import { QueryHeadBucketResponse, QueryVerifyPermissionResponse } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/query';
import { MsgDeleteBucket, MsgDeletePolicy, MsgPutPolicy, MsgUpdateBucketInfo } from '@bnb-chain/greenfield-cosmos-types/greenfield/storage/tx';
import { BucketProps, GetObjectPropsType, ICreateBucketMsgType, IGetCreateBucketApproval, IObjectResultType, IQuotaProps, getUserBucketsPropsType } from '../types/storage';
import { Account } from './account';
import { ITxOption, SimulateOrBroad, SimulateOrBroadResponse } from '..';
export interface IBucket {
    /**
     * returns the signature info for the approval of preCreating resources
     */
    getCreateBucketApproval(params: IGetCreateBucketApproval): Promise<IObjectResultType<string>>;
    /**
     * get approval of creating bucket and send createBucket txn to greenfield chain
     */
    createBucket<T extends ITxOption>(params: IGetCreateBucketApproval, txOption: T): Promise<SimulateOrBroad<T>>;
    createBucket(params: IGetCreateBucketApproval, txOption: ITxOption): Promise<SimulateOrBroadResponse>;
    /**
     * query the bucketInfo on chain, return the bucket info if exists
     */
    headBucket(bucketName: string): Promise<QueryHeadBucketResponse>;
    /**
     * query the bucketInfo on chain by bucketId, return the bucket info if exists
     */
    headBucketById(bucketId: string): Promise<QueryHeadBucketResponse>;
    /**
     * check if the permission of bucket is allowed to the user.
     */
    getVerifyPermission(bucketName: string, operator: string, actionType: ActionType): Promise<QueryVerifyPermissionResponse>;
    getUserBuckets(configParam: getUserBucketsPropsType): Promise<IObjectResultType<Array<BucketProps>>>;
    /**
     * return quota info of bucket of current month, include chain quota, free quota and consumed quota
     */
    getBucketReadQuota(configParam: GetObjectPropsType): Promise<IObjectResultType<IQuotaProps>>;
    deleteBucket<T extends ITxOption>(msg: MsgDeleteBucket, txOption: T): Promise<SimulateOrBroad<T>>;
    deleteBucket(msg: MsgDeleteBucket, txOption: ITxOption): Promise<SimulateOrBroadResponse>;
    updateBucketInfo<T extends ITxOption>(msg: MsgUpdateBucketInfo, txOption: T): Promise<SimulateOrBroad<T>>;
    updateBucketInfo(msg: MsgUpdateBucketInfo, txOption: ITxOption): Promise<SimulateOrBroadResponse>;
    putBucketPolicy<T extends ITxOption>(msg: MsgPutPolicy, txOption: T): Promise<SimulateOrBroad<T>>;
    putBucketPolicy(msg: MsgPutPolicy, txOption: ITxOption): Promise<SimulateOrBroadResponse>;
    deleteBucketPolicy<T extends ITxOption>(msg: MsgDeletePolicy, txOption: T): Promise<SimulateOrBroad<T>>;
    deleteBucketPolicy(msg: MsgDeletePolicy, txOption: ITxOption): Promise<SimulateOrBroadResponse>;
}
export declare class Bucket extends Account implements IBucket {
    getCreateBucketApproval({ bucketName, creator, visibility, chargedReadQuota, spInfo, duration, }: IGetCreateBucketApproval): Promise<{
        code: number;
        xml: Document;
        message: string;
        statusCode: number;
        body?: undefined;
        signedMsg?: undefined;
    } | {
        code: number;
        message: string;
        body: string;
        statusCode: number;
        signedMsg: ICreateBucketMsgType;
        xml?: undefined;
    } | {
        code: number;
        message: any;
        statusCode: number;
        xml?: undefined;
        body?: undefined;
        signedMsg?: undefined;
    }>;
    createBucket(params: IGetCreateBucketApproval, txOption: ITxOption): Promise<any>;
    deleteBucket(msg: MsgDeleteBucket, txOption: ITxOption): Promise<any>;
    headBucket(bucketName: string): Promise<QueryHeadBucketResponse>;
    headBucketById(bucketId: string): Promise<QueryHeadBucketResponse>;
    getVerifyPermission(bucketName: string, operator: string, actionType: ActionType): Promise<QueryVerifyPermissionResponse>;
    getUserBuckets(configParam: getUserBucketsPropsType): Promise<{
        code: number;
        message: string;
        statusCode: number;
        body: any;
    } | {
        code: number;
        message: any;
        statusCode: number;
        body?: undefined;
    }>;
    getBucketReadQuota(configParam: GetObjectPropsType): Promise<IObjectResultType<IQuotaProps>>;
    updateBucketInfo(msg: MsgUpdateBucketInfo, txOption: ITxOption): Promise<any>;
    putBucketPolicy(msg: MsgPutPolicy, txOption: ITxOption): Promise<any>;
    deleteBucketPolicy(msg: MsgDeletePolicy, txOption: ITxOption): Promise<any>;
}
