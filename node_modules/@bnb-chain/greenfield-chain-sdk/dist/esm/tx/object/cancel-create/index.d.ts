import { BaseAccount } from '@bnb-chain/greenfield-cosmos-types/cosmos/auth/v1beta1/auth';
import { ICancelCreateObjectMsg } from '../../../messages/greenfield/storage/cancelCreateObject';
import { IRawTxInfo } from '../../../tx';
import { BaseTx, IBaseMsg } from '../../baseTx';
export declare class CancelCreateObjectTx extends BaseTx {
    readonly rpcUrl: string;
    readonly chainId: string;
    readonly txType: string;
    constructor(rpcUrl: string, chainId: string);
    signTx(params: IBaseMsg & ICancelCreateObjectMsg): Promise<import("../../../sign").ISignature712>;
    getRawTxInfo({ bucketName, from, sequence, gasLimit, sign, pubKey, objectName, denom, gasPrice, }: IBaseMsg & ICancelCreateObjectMsg & {
        sign: string;
    } & {
        pubKey: BaseAccount['pubKey'];
    }): Promise<IRawTxInfo>;
    getSimulateBytes(params: ICancelCreateObjectMsg): Uint8Array;
    getAuthInfoBytes({ sequence, pubKey, gasLimit, denom, gasPrice, }: Pick<IBaseMsg & ICancelCreateObjectMsg, 'denom' | 'sequence' | 'gasLimit' | 'gasPrice'> & {
        pubKey: BaseAccount['pubKey'];
    }): Uint8Array;
}
