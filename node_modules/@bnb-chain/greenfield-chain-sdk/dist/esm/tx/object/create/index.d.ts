import { BaseAccount } from '@bnb-chain/greenfield-cosmos-types/cosmos/auth/v1beta1/auth';
import { ICreateObjectMsg } from '../../../messages/greenfield/storage/createObject';
import { IRawTxInfo } from '../../../tx';
import { BaseTx, IBaseMsg } from '../../baseTx';
export declare class CreateObjectTx extends BaseTx {
    readonly rpcUrl: string;
    readonly chainId: string;
    readonly txType: string;
    constructor(rpcUrl: string, chainId: string);
    signTx(params: IBaseMsg & ICreateObjectMsg): Promise<import("../../../sign").ISignature712>;
    getRawTxInfo({ bucketName, contentType, denom, expectChecksums, expectSecondarySpAddresses, expiredHeight, from, gasLimit, objectName, payloadSize, pubKey, redundancyType, sequence, sig, sign, visibility, gasPrice, }: IBaseMsg & ICreateObjectMsg & {
        sign: string;
    } & {
        pubKey: BaseAccount['pubKey'];
    }): Promise<IRawTxInfo>;
    getSimulateBytes(params: ICreateObjectMsg): Uint8Array;
    getAuthInfoBytes({ sequence, pubKey, gasLimit, denom, gasPrice, }: Pick<IBaseMsg & ICreateObjectMsg, 'denom' | 'sequence' | 'gasLimit' | 'gasPrice'> & {
        pubKey: BaseAccount['pubKey'];
    }): Uint8Array;
}
